import re  # 确保导入re模块

def check_port_range(data):
    anomalies = []
    if "port" in data:
        port = data["port"]
        if not (1 <= port <= 65535):
            anomalies.append(f"Port out of range: {port}")
    if "listening_port" in data:
        port = data["listening_port"]
        if not (1 <= port <= 65535):
            anomalies.append(f"Listening port out of range: {port}")
    return anomalies

def check_ip_address(data):
    anomalies = []
    ip_pattern = re.compile(r"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\."
                            r"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\."
                            r"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\."
                            r"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$")
    if "ip_address" in data:
        ip_address = data["ip_address"]
        if not ip_pattern.match(ip_address):
            anomalies.append(f"Invalid IP address: {ip_address}")
    if "server_ip" in data:
        ip_address = data["server_ip"]
        if not ip_pattern.match(ip_address):
            anomalies.append(f"Invalid server IP address: {ip_address}")
    return anomalies

def check_file_path(data):
    anomalies = []
    if "file_path" in data:
        file_path = data["file_path"]
        if "/tmp/" in file_path or "C:\\Users\\" in file_path:
            anomalies.append(f"Suspicious file path: {file_path}")
    if "executable_path" in data:
        file_path = data["executable_path"]
        if "/tmp/" in file_path or "C:\\Users\\" in file_path:
            anomalies.append(f"Suspicious executable path: {file_path}")
    return anomalies

def check_timeout(data):
    anomalies = []
    if "timeout" in data:
        timeout = data["timeout"]
        if not (0 <= timeout <= 60):
            anomalies.append(f"Timeout out of range: {timeout}")
    if "connection_timeout" in data:
        timeout = data["connection_timeout"]
        if not (0 <= timeout <= 60):
            anomalies.append(f"Connection timeout out of range: {timeout}")
    return anomalies

def check_permissions(data):
    anomalies = []
    if "permissions" in data:
        permissions = data["permissions"]
        if permissions.lower() == "root":
            anomalies.append(f"Suspicious permission level: {permissions}")
    if "access_level" in data:
        access_level = data["access_level"]
        if access_level.lower() == "root":
            anomalies.append(f"Suspicious access level: {access_level}")
    return anomalies

def check_version(data):
    anomalies = []
    if "version" in data:
        version = data["version"]
        if version.startswith("0.") or "beta" in version.lower():
            anomalies.append(f"Suspicious version: {version}")
    return anomalies

def check_encryption_level(data):
    anomalies = []
    if "encryption_level" in data:
        encryption = data["encryption_level"]
        if encryption.lower() in ["md5", "des"]:
            anomalies.append(f"Weak encryption level: {encryption}")
    return anomalies

def check_packet_size(data):
    anomalies = []
    if "packet_size" in data:
        packet_size = data["packet_size"]
        if not (64 <= packet_size <= 1500):
            anomalies.append(f"Packet size out of range: {packet_size}")
    return anomalies

def check_auto_update(data):
    anomalies = []
    if "auto_update" in data and data["auto_update"]:
        if "update_interval" in data:
            interval = data["update_interval"]
            if not (1440 <= interval <= 43200):  # 1 day to 30 days in minutes
                anomalies.append(f"Suspicious update interval: {interval} minutes")
    return anomalies

def check_protocol(data):
    anomalies = []
    if "protocol" in data:
        protocol = data["protocol"]
        if protocol.lower() not in ["http", "https", "tcp", "udp"]:
            anomalies.append(f"Suspicious protocol: {protocol}")
    if "communication_protocol" in data:
        protocol = data["communication_protocol"]
        if protocol.lower() not in ["http", "https", "tcp", "udp"]:
            anomalies.append(f"Suspicious communication protocol: {protocol}")
    return anomalies

def check_anomalies(data):
    anomalies = []
    anomalies.extend(check_port_range(data))
    anomalies.extend(check_ip_address(data))
    anomalies.extend(check_file_path(data))
    anomalies.extend(check_timeout(data))
    anomalies.extend(check_permissions(data))
    anomalies.extend(check_version(data))
    anomalies.extend(check_encryption_level(data))
    anomalies.extend(check_packet_size(data))
    anomalies.extend(check_auto_update(data))
    anomalies.extend(check_protocol(data))
    return anomalies

def detect_anomalies_in_json_file(file_path):
    with open(file_path, 'r') as file:
        data = json.load(file)
    anomalies = check_anomalies(data)
    if anomalies:
        print(f"Anomalies found in {file_path}:")
        for anomaly in anomalies:
            print(f" - {anomaly}")
    else:
        print(f"No anomalies found in {file_path}.")

def detect_anomalies_in_directory(directory_path):
    for root, dirs, files in os.walk(directory_path):
        for file in files:
            if file.endswith('.json'):
                file_path = os.path.join(root, file)
                detect_anomalies_in_json_file(file_path)

# 示例：遍历目录并检测所有JSON文件中的异常
detect_anomalies_in_directory('E:\python')
