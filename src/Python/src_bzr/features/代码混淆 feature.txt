# 代码混淆
obfuscation_patterns = {
    "imports": {
        "distorm3": 9,  # 用于反汇编，不常见于正常代码，可能用于底层操作或代码混淆
        "marshal": 8,  # 用于序列化对象为字节码，可能隐藏或混淆代码
        "importlib": 6,  # 动态导入模块，可能用于加载恶意模块或隐藏模块的实际用途
        "codecs": 5,  # 处理字符编码，可能在混淆过程中操纵字符串
        "secrets": 7  # 生成加密强度的随机数，可能用于生成难以预测的随机字符串或数据
    },
    "function_calls": {
        "eval": 9,  # 执行字符串形式的代码，混淆和恶意代码常见
        "exec": 8,  # 动态执行代码片段，恶意代码中常用
        "compile": 7,  # 将字符串编译为字节码并执行，增加混淆难度
        "importlib.import_module": 6,  # 动态导入模块，可能用于加载恶意模块
        "subprocess.check_output": 7,  # 执行系统命令并获取输出，可能用于隐藏执行命令
        "codecs.open": 5  # 以特定编码打开文件，可能在混淆中处理非标准编码数据
    },
    "strings": {
    "AMSI_RESULT_NOT_DETECTED": 10,  # 绕过AMSI的标志字符串，恶意代码常见
    "scramble": 9,  # 混淆字符串的标志，恶意混淆代码中常见
    "unscramble": 9,  # 解混淆字符串的标志，恶意混淆代码中常见
    "-join(({','.join([str(int(b)) for b in self.content.encode()])})|%{{[char]$_}});": 10,  # 隐藏或加密命令的PowerShell代码片段
    "rot13": 9,  # 一种简单的字母替换加密，在混淆代码中较常见，用于简单的文字混淆
    "hexlify": 8,  # 将数据编码为十六进制表示，在混淆代码中用于隐藏字符串内容
    "unhexlify": 8,  # 将十六进制数据解码回原始数据，通常与hexlify配合使用，用于解混淆
    "xor": 9,  # 用于XOR操作，通常用于混淆数据或简单加密，恶意代码中常见
    "RC4": 8,  # 一种流密码算法，在混淆代码中用于加密数据，恶意代码中较常见
    "obfuscate": 9,  # 明示的“混淆”操作，几乎只出现在混淆工具或恶意代码中
    "decrypt": 8,  # 解密操作，通常与混淆手段有关，可能在恶意代码中用于解密被隐藏的数据
    "exec('".format(...)": 9,  # 动态执行代码的格式化字符串，几乎只出现在混淆或恶意代码中
    "reverse": 7,  # 字符串反转操作，用于简单的混淆，正常代码中较少见
    "random.choice": 7,  # 用于生成随机选择，可能在混淆代码中用于生成随机变量名或数据
    }
}
