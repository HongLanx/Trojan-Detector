"Module(body=[ImportFrom(module='enum', names=[alias(name='Enum')], level=0), Import(names=[alias(name='numpy', asname='N')]), Import(names=[alias(name='displayVirusSpread', asname='disp')]), ClassDef(name='State', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\\n        Description: state is an Enum type. none is for a non-node such as for the zeroth index/node\\n                     which is not used in the network. clean refers to a node that has not yet seen\\n                     any effect from a virus. All nodes at the initialization step are set to clean.\\n                     infected means a node is infected by a virus. susceptible means there is a higher\\n                     chance of getting infected by a virus but that has not happened yet. immune is when\\n                     a node has recovered from an infection and is now immune to all viruses.\\n     ')), Assign(targets=[Name(id='none', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='clean', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='infected', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='susceptible', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='immune', ctx=Store())], value=Constant(value=4))], decorator_list=[]), ClassDef(name='GraphType', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\\n        Description: graphType is an Enum type. NONE is for a node that does not represent the network.\\n                     For example zeroth node and/or index is not considered a node in the network. All\\n                     other network types are given numbers from 1 to 8 that represents a particular type\\n                     of network.\\n     ')), Assign(targets=[Name(id='NONE', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='RING', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='STAR', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='MESH', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='ALL_CONNECTED', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='BUS', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='HYBRID', ctx=Store())], value=Constant(value=6)), Assign(targets=[Name(id='LINE', ctx=Store())], value=Constant(value=7)), Assign(targets=[Name(id='TREE', ctx=Store())], value=Constant(value=8))], decorator_list=[]), ClassDef(name='Node', bases=[], keywords=[], body=[Expr(value=Constant(value='\\n        Description: Node class represents a computer in the network. nodeID is used to identify\\n                     the node, adjacentNodes is a list that stores a nodes directly connected neighbors.\\n                     susceptibility var tells us if a node becomes susceptible to getting infectede\\n                     from a virus.\\n    ')), Assign(targets=[Name(id='nodeID', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='adjacentNodes', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='susceptibility', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='status', ctx=Store())], value=Constant(value=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nodeNum'), arg(arg='nodeStrengthRange')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nodeID', ctx=Store())], value=Name(id='nodeNum', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='susceptibility', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='N', ctx=Load()), attr='random', ctx=Load()), attr='uniform', ctx=Load()), args=[Subscript(value=Name(id='nodeStrengthRange', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='nodeStrengthRange', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='adjacentNodes', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='status', ctx=Store())], value=Attribute(value=Name(id='State', ctx=Load()), attr='clean', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='Network', bases=[], keywords=[], body=[Expr(value=Constant(value='\\n        Description: Network class holds all nodes in the network. nodes is a dictionary\\n                     which stores a Node object for each corresponding node number. infectedList\\n                     is a list, the index of which represents that particular node and the value\\n                     it holds (defined enums per the state class) tells us the current status\\n                     of the node corresponding to that index. networkType holds a value that\\n                     represents the type of network that is being created.\\n                     createnetwork() method takes as input a string filename and passed it onto\\n                     drawGraphFromFile() class which returns a list of pairs of numbers. Each pair\\n                     of numbers represents a connection between those two nodes. The function uses each\\n                     pair to construct a Node object and a dictionary item and insert them into the\\n                     corresponding data structure.\\n    ')), Assign(targets=[Name(id='nodes', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='infectedList', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='networkType', ctx=Store())], value=Attribute(value=Name(id='GraphType', ctx=Load()), attr='NONE', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='type')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='networkType', ctx=Store())], value=Name(id='type', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='infectedList', ctx=Store())], value=List(elts=[Attribute(value=Name(id='State', ctx=Load()), attr='none', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='createnetwork', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename'), arg(arg='nodeStrengthRange')], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())]), body=[Expr(value=Constant(value=\"\\n            Description: creates a network from a list of pair of numbers. For each pair in the\\n                         list returned by drawGraphFromFile, if the 1st number in the pair is not already in\\n                         nodes dictionary, a new Node is created for that number and the adjacentNodes\\n                         list in the Node objects gets appended the second number in the pair as a neighbor.\\n                         The infected list also gets appended a state.clean value to mark that a node\\n                         with initial status is added. Later, the index will represent the node corresponding\\n                         to that number. If the there's already a node for that 1st number, only the\\n                         adjacentNodes list will get updated. Same steps will be followed for the second\\n                         number in the pair.\\n            Pre-Condition: filename as a string\\n            Post-Condition: nodes contains the node numbers as keys and Nodes as values, infectedList\\n                            contains a list of state.none values from index 1 to the highest index read\\n                            from the file. Index 0 will not be used since it is not in the network.\\n        \")), Assign(targets=[Name(id='graphArray', ctx=Store())], value=Call(func=Attribute(value=Name(id='disp', ctx=Load()), attr='drawGraphFromFile', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), For(target=Name(id='pair', ctx=Store()), iter=Name(id='graphArray', ctx=Load()), body=[Assign(targets=[Name(id='lhs', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='rhs', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='lhs', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='infectedList', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='State', ctx=Load()), attr='clean', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='lhs', ctx=Load()), ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[Name(id='lhs', ctx=Load()), Name(id='nodeStrengthRange', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='lhs', ctx=Load()), ctx=Load()), attr='adjacentNodes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='rhs', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='lhs', ctx=Load()), ctx=Load()), attr='adjacentNodes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='rhs', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='rhs', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='infectedList', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='State', ctx=Load()), attr='clean', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='rhs', ctx=Load()), ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[Name(id='rhs', ctx=Load()), Name(id='nodeStrengthRange', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='rhs', ctx=Load()), ctx=Load()), attr='adjacentNodes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='lhs', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='rhs', ctx=Load()), ctx=Load()), attr='adjacentNodes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='lhs', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])"