"Module(body=[Import(names=[alias(name='numpy', asname='N')]), Import(names=[alias(name='pygame')]), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), Import(names=[alias(name='sys')]), FunctionDef(name='drawGraphFromFile', args=arguments(posonlyargs=[], args=[arg(arg='fileName')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='retVal', ctx=Store())], value=List(elts=[], ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fileName', ctx=Load()), Constant(value='r')], keywords=[]), optional_vars=Name(id='file', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='file', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='#')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='\\n')], keywords=[]), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='retVal', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(upper=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='\\n')], keywords=[])), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\\t')], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='retVal', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\\t')], keywords=[])], keywords=[]))])], orelse=[])], orelse=[])]), Return(value=Name(id='retVal', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='display_width', ctx=Store())], value=Constant(value=640)), Assign(targets=[Name(id='display_height', ctx=Store())], value=Constant(value=480)), Assign(targets=[Name(id='ALL_CONNECTED_GRAPH', ctx=Store())], value=Call(func=Name(id='drawGraphFromFile', ctx=Load()), args=[Constant(value='fullconnect.txt')], keywords=[])), Assign(targets=[Name(id='LINE_GRAPH', ctx=Store())], value=Call(func=Name(id='drawGraphFromFile', ctx=Load()), args=[Constant(value='line.txt')], keywords=[])), Assign(targets=[Name(id='MESH_GRAPH', ctx=Store())], value=Call(func=Name(id='drawGraphFromFile', ctx=Load()), args=[Constant(value='mesh.txt')], keywords=[])), Assign(targets=[Name(id='RING_GRAPH', ctx=Store())], value=Call(func=Name(id='drawGraphFromFile', ctx=Load()), args=[Constant(value='ring.txt')], keywords=[])), Assign(targets=[Name(id='STAR_GRAPH', ctx=Store())], value=Call(func=Name(id='drawGraphFromFile', ctx=Load()), args=[Constant(value='star.txt')], keywords=[])), Assign(targets=[Name(id='TREE_GRAPH', ctx=Store())], value=Call(func=Name(id='drawGraphFromFile', ctx=Load()), args=[Constant(value='tree.txt')], keywords=[])), Assign(targets=[Name(id='computerImage', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='image', ctx=Load()), attr='load', ctx=Load()), args=[Constant(value='compImage.png')], keywords=[])), Assign(targets=[Name(id='computerImage', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='transform', ctx=Load()), attr='scale', ctx=Load()), args=[Name(id='computerImage', ctx=Load()), Tuple(elts=[Constant(value=50), Constant(value=50)], ctx=Load())], keywords=[])), ClassDef(name='treeNode', bases=[], keywords=[], body=[Assign(targets=[Name(id='edges', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='nodeNumber', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='location', ctx=Store())], value=Constant(value=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='newNodeNumber')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='edges', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nodeNumber', ctx=Store())], value=Name(id='newNodeNumber', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='walkTree', args=arguments(posonlyargs=[], args=[arg(arg='tree'), arg(arg='currentNode'), arg(arg='startPosition'), arg(arg='depth'), arg(arg='retValRef')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='retValRef', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='currentNode', ctx=Load())], keywords=[]), Name(id='startPosition', ctx=Load()), Name(id='depth', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='edgesToExplore', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='edge', ctx=Store()), iter=Attribute(value=Subscript(value=Name(id='tree', ctx=Load()), slice=Name(id='currentNode', ctx=Load()), ctx=Load()), attr='edges', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='edgesToExplore', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='edge', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='edgesDone', ctx=Store())], value=Constant(value=0)), For(target=Name(id='edge', ctx=Store()), iter=Name(id='edgesToExplore', ctx=Load()), body=[AugAssign(target=Name(id='edgesDone', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Name(id='walkTree', ctx=Load()), args=[Name(id='tree', ctx=Load()), Name(id='edge', ctx=Load()), Name(id='startPosition', ctx=Load()), BinOp(left=Name(id='depth', ctx=Load()), op=Add(), right=Constant(value=100)), Name(id='retValRef', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='buildTreeComputerLocations', args=arguments(posonlyargs=[], args=[arg(arg='retVal')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='treeNodes', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='edge', ctx=Store()), iter=Name(id='TREE_GRAPH', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotIn()], comparators=[Name(id='treeNodes', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='treeNodes', ctx=Load()), slice=Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Call(func=Name(id='treeNode', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[NotIn()], comparators=[Name(id='treeNodes', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='treeNodes', ctx=Load()), slice=Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Store())], value=Call(func=Name(id='treeNode', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='treeNodes', ctx=Load()), slice=Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), attr='edges', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='walkTree', ctx=Load()), args=[Name(id='treeNodes', ctx=Load()), Constant(value='1'), BinOp(left=Name(id='display_width', ctx=Load()), op=Div(), right=Constant(value=2)), Constant(value=100), Name(id='retVal', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='retVal', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load())))])), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=100), Constant(value=500), Constant(value=100)], keywords=[]), body=[Assign(targets=[Name(id='count', ctx=Store())], value=Constant(value=0)), For(target=Name(id='line', ctx=Store()), iter=Name(id='retVal', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=2), ctx=Load()), ops=[Eq()], comparators=[Name(id='x', ctx=Load())]), body=[AugAssign(target=Name(id='count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Assign(targets=[Name(id='repositionedValues', ctx=Store())], value=Constant(value=0)), For(target=Name(id='line', ctx=Store()), iter=Name(id='retVal', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=2), ctx=Load()), ops=[Eq()], comparators=[Name(id='x', ctx=Load())]), body=[AugAssign(target=Name(id='repositionedValues', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=1), ctx=Store())], value=BinOp(left=BinOp(left=Name(id='display_width', ctx=Load()), op=Div(), right=BinOp(left=Name(id='count', ctx=Load()), op=Add(), right=Constant(value=1))), op=Mult(), right=Name(id='repositionedValues', ctx=Load())))], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='retVal', ctx=Load()))], decorator_list=[]), FunctionDef(name='getComputerLocationsOnDisplay', args=arguments(posonlyargs=[], args=[arg(arg='typeOfGraph')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='retVal', ctx=Store())], value=List(elts=[List(elts=[Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='typeOfGraph', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='graphType', ctx=Load()), attr='STAR', ctx=Load())]), body=[Assign(targets=[Name(id='centerOfFieldX', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='display_width', ctx=Load()), op=Div(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='centerOfFieldY', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='numberOfNodes', ctx=Store())], value=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='amax', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='STAR_GRAPH', ctx=Load())], keywords=[]), attr='astype', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='retVal', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Constant(value=1), Name(id='centerOfFieldX', ctx=Load()), Name(id='centerOfFieldY', ctx=Load())], ctx=Load())], keywords=[])), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=2), BinOp(left=Name(id='numberOfNodes', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='retVal', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Name(id='x', ctx=Load()), BinOp(left=Name(id='centerOfFieldX', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=3)), op=Mult(), right=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Constant(value=2)), op=Mult(), right=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='N', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Name(id='numberOfNodes', ctx=Load()), op=Sub(), right=Constant(value=1))))], keywords=[]))), BinOp(left=Name(id='centerOfFieldY', ctx=Load()), op=Sub(), right=BinOp(left=BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=3)), op=Mult(), right=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='cos', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Constant(value=2)), op=Mult(), right=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='N', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Name(id='numberOfNodes', ctx=Load()), op=Sub(), right=Constant(value=1))))], keywords=[])))], ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='typeOfGraph', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='graphType', ctx=Load()), attr='RING', ctx=Load())]), body=[Assign(targets=[Name(id='centerOfFieldX', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='display_width', ctx=Load()), op=Div(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='centerOfFieldY', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='numberOfNodes', ctx=Store())], value=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='amax', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='RING_GRAPH', ctx=Load())], keywords=[]), attr='astype', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='numberOfNodes', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='retVal', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Name(id='x', ctx=Load()), BinOp(left=Name(id='centerOfFieldX', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=3)), op=Mult(), right=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Constant(value=2)), op=Mult(), right=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='N', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Name(id='numberOfNodes', ctx=Load())))], keywords=[]))), BinOp(left=Name(id='centerOfFieldY', ctx=Load()), op=Sub(), right=BinOp(left=BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=3)), op=Mult(), right=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='cos', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Constant(value=2)), op=Mult(), right=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='N', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Name(id='numberOfNodes', ctx=Load())))], keywords=[])))], ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='typeOfGraph', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='graphType', ctx=Load()), attr='MESH', ctx=Load())]), body=[Assign(targets=[Name(id='centerOfFieldX', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='display_width', ctx=Load()), op=Div(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='centerOfFieldY', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='numberOfNodes', ctx=Store())], value=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='amax', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='MESH_GRAPH', ctx=Load())], keywords=[]), attr='astype', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='numberOfNodes', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='retVal', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Name(id='x', ctx=Load()), BinOp(left=Name(id='centerOfFieldX', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=3)), op=Mult(), right=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Constant(value=2)), op=Mult(), right=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='N', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Name(id='numberOfNodes', ctx=Load())))], keywords=[]))), BinOp(left=Name(id='centerOfFieldY', ctx=Load()), op=Sub(), right=BinOp(left=BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=3)), op=Mult(), right=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='cos', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Constant(value=2)), op=Mult(), right=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='N', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Name(id='numberOfNodes', ctx=Load())))], keywords=[])))], ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='typeOfGraph', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='graphType', ctx=Load()), attr='ALL_CONNECTED', ctx=Load())]), body=[Assign(targets=[Name(id='centerOfFieldX', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='display_width', ctx=Load()), op=Div(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='centerOfFieldY', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='numberOfNodes', ctx=Store())], value=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='amax', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='ALL_CONNECTED_GRAPH', ctx=Load())], keywords=[]), attr='astype', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='numberOfNodes', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='retVal', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Name(id='x', ctx=Load()), BinOp(left=Name(id='centerOfFieldX', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=3)), op=Mult(), right=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Constant(value=2)), op=Mult(), right=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='N', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Name(id='numberOfNodes', ctx=Load())))], keywords=[]))), BinOp(left=Name(id='centerOfFieldY', ctx=Load()), op=Sub(), right=BinOp(left=BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=3)), op=Mult(), right=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='cos', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Constant(value=2)), op=Mult(), right=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Attribute(value=Name(id='N', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Name(id='numberOfNodes', ctx=Load())))], keywords=[])))], ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='typeOfGraph', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='graphType', ctx=Load()), attr='TREE', ctx=Load())]), body=[Expr(value=Call(func=Name(id='buildTreeComputerLocations', ctx=Load()), args=[Name(id='retVal', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='typeOfGraph', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='graphType', ctx=Load()), attr='LINE', ctx=Load())]), body=[Assign(targets=[Name(id='numberOfNodes', ctx=Store())], value=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='amax', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='LINE_GRAPH', ctx=Load())], keywords=[]), attr='astype', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='numberOfNodes', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='yVal', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=BinOp(left=Name(id='x', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='yVal', ctx=Store())], value=BinOp(left=Name(id='display_height', ctx=Load()), op=Div(), right=Constant(value=3)))], orelse=[Assign(targets=[Name(id='yVal', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='display_height', ctx=Load())), op=Div(), right=Constant(value=3)))]), Expr(value=Call(func=Attribute(value=Name(id='retVal', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Name(id='x', ctx=Load()), BinOp(left=BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Mult(), right=Name(id='display_width', ctx=Load())), op=Div(), right=Name(id='numberOfNodes', ctx=Load())), op=Sub(), right=Constant(value=35)), Name(id='yVal', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])])])])]), Return(value=Name(id='retVal', ctx=Load()))], decorator_list=[]), ClassDef(name='graphType', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='NONE', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='RING', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='STAR', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='MESH', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='ALL_CONNECTED', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='BUS', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='HYBRID', ctx=Store())], value=Constant(value=6)), Assign(targets=[Name(id='LINE', ctx=Store())], value=Constant(value=7)), Assign(targets=[Name(id='TREE', ctx=Store())], value=Constant(value=8))], decorator_list=[]), ClassDef(name='dataToDisplay', bases=[], keywords=[], body=[Assign(targets=[Name(id='typeOfGraph', ctx=Store())], value=Attribute(value=Name(id='graphType', ctx=Load()), attr='NONE', ctx=Load())), Assign(targets=[Name(id='animationSteps', ctx=Store())], value=Constant(value=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='animationSteps', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='linesToDraw', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='defaultLines', ctx=Store())], value=List(elts=[], ctx=Load())), FunctionDef(name='roundTuple', args=arguments(posonlyargs=[], args=[arg(arg='tuple')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Call(func=Name(id='round', ctx=Load()), args=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Call(func=Name(id='round', ctx=Load()), args=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='distanceBetweenTwoPoints', args=arguments(posonlyargs=[], args=[arg(arg='pointA'), arg(arg='pointB')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Subscript(value=Name(id='pointB', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='pointA', ctx=Load()), slice=Constant(value=0), ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Subscript(value=Name(id='pointB', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='pointA', ctx=Load()), slice=Constant(value=1), ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5)))], decorator_list=[]), FunctionDef(name='nodeToLocations', args=arguments(posonlyargs=[], args=[arg(arg='nodes'), arg(arg='positionsInImage')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='retVal', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='node', ctx=Store()), iter=Name(id='nodes', ctx=Load()), body=[Assign(targets=[Name(id='x1', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='positionsInImage', ctx=Load()), slice=Subscript(value=Name(id='node', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='y1', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='positionsInImage', ctx=Load()), slice=Subscript(value=Name(id='node', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), slice=Constant(value=2), ctx=Load())), Assign(targets=[Name(id='x2', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='positionsInImage', ctx=Load()), slice=Subscript(value=Name(id='node', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='y2', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='positionsInImage', ctx=Load()), slice=Subscript(value=Name(id='node', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Load()), slice=Constant(value=2), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='retVal', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Tuple(elts=[Name(id='x1', ctx=Load()), Name(id='y1', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='x2', ctx=Load()), Name(id='y2', ctx=Load())], ctx=Load()), Constant(value=0)], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='retVal', ctx=Load()))], decorator_list=[]), FunctionDef(name='startAnimation', args=arguments(posonlyargs=[], args=[arg(arg='computerPositions'), arg(arg='dataToDisplay')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='clock', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='time', ctx=Load()), attr='Clock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='done', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='screen', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='pygame', ctx=Load()), attr='init', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='screen', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='display', ctx=Load()), attr='set_mode', ctx=Load()), args=[Tuple(elts=[Name(id='display_width', ctx=Load()), Name(id='display_height', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='stepsDone', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='animationSteps', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='linesToDraw', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='nodeToLocations', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='animationSteps', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='computerPositions', ctx=Load())], keywords=[])], keywords=[])), While(test=UnaryOp(op=Not(), operand=Name(id='done', ctx=Load())), body=[Assign(targets=[Name(id='hasCompletedALine', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='iterationDone', ctx=Store())], value=Constant(value=False)), For(target=Name(id='event', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='event', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='event', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='pygame', ctx=Load()), attr='QUIT', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='pygame', ctx=Load()), attr='quit', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='stepsDone', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='animationSteps', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='done', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='linesToDraw', ctx=Load()), slice=Name(id='stepsDone', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[AugAssign(target=Name(id='stepsDone', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='animationSteps', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='linesToDraw', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='nodeToLocations', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='animationSteps', ctx=Load()), slice=Name(id='stepsDone', ctx=Load()), ctx=Load()), Name(id='computerPositions', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='hasCompletedALine', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='time', ctx=Load()), attr='delay', ctx=Load()), args=[Constant(value=3000)], keywords=[]))], orelse=[]), Continue()], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='screen', ctx=Load()), attr='fill', ctx=Load()), args=[Tuple(elts=[Constant(value=255), Constant(value=255), Constant(value=255)], ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='typeOfGraph', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='graphType', ctx=Load()), attr='STAR', ctx=Load())]), body=[For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Attribute(value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=0)], ctx=Load()), ctx=Load()), attr='size', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='numberPairs', ctx=Store())], value=List(elts=[Tuple(elts=[Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Constant(value=1), Constant(value=1)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Constant(value=1), Constant(value=2)], ctx=Load()), ctx=Load())], ctx=Load()), Tuple(elts=[Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Name(id='x', ctx=Load()), Constant(value=1)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Name(id='x', ctx=Load()), Constant(value=2)], ctx=Load()), ctx=Load())], ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='draw', ctx=Load()), attr='lines', ctx=Load()), args=[Name(id='screen', ctx=Load()), Tuple(elts=[Constant(value=100), Constant(value=100), Constant(value=100)], ctx=Load()), Constant(value=False), Name(id='numberPairs', ctx=Load()), Constant(value=2)], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='typeOfGraph', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='graphType', ctx=Load()), attr='RING', ctx=Load())]), body=[Assign(targets=[Name(id='numberPairs', ctx=Store())], value=List(elts=[Tuple(elts=[Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=2)], ctx=Load()), ctx=Load())], ctx=Load()), Tuple(elts=[Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Constant(value=1), Constant(value=1)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Constant(value=1), Constant(value=2)], ctx=Load()), ctx=Load())], ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='draw', ctx=Load()), attr='lines', ctx=Load()), args=[Name(id='screen', ctx=Load()), Tuple(elts=[Constant(value=100), Constant(value=100), Constant(value=100)], ctx=Load()), Constant(value=False), Name(id='numberPairs', ctx=Load()), Constant(value=2)], keywords=[])), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=2), Attribute(value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=0)], ctx=Load()), ctx=Load()), attr='size', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='numberPairs', ctx=Store())], value=List(elts=[Tuple(elts=[Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Constant(value=1)), Constant(value=1)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Constant(value=1)), Constant(value=2)], ctx=Load()), ctx=Load())], ctx=Load()), Tuple(elts=[Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Name(id='x', ctx=Load()), Constant(value=1)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Name(id='x', ctx=Load()), Constant(value=2)], ctx=Load()), ctx=Load())], ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='draw', ctx=Load()), attr='lines', ctx=Load()), args=[Name(id='screen', ctx=Load()), Tuple(elts=[Constant(value=100), Constant(value=100), Constant(value=100)], ctx=Load()), Constant(value=False), Name(id='numberPairs', ctx=Load()), Constant(value=2)], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='typeOfGraph', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='graphType', ctx=Load()), attr='MESH', ctx=Load())]), body=[For(target=Name(id='edge', ctx=Store()), iter=Name(id='MESH_GRAPH', ctx=Load()), body=[Assign(targets=[Name(id='x1', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Constant(value=1)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='y1', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Constant(value=2)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x2', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), Constant(value=1)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='y2', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), Constant(value=2)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='numberPairs', ctx=Store())], value=List(elts=[Tuple(elts=[Name(id='x1', ctx=Load()), Name(id='y1', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='x2', ctx=Load()), Name(id='y2', ctx=Load())], ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='draw', ctx=Load()), attr='lines', ctx=Load()), args=[Name(id='screen', ctx=Load()), Tuple(elts=[Constant(value=100), Constant(value=100), Constant(value=100)], ctx=Load()), Constant(value=False), Name(id='numberPairs', ctx=Load()), Constant(value=2)], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='typeOfGraph', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='graphType', ctx=Load()), attr='ALL_CONNECTED', ctx=Load())]), body=[For(target=Name(id='edge', ctx=Store()), iter=Name(id='ALL_CONNECTED_GRAPH', ctx=Load()), body=[Assign(targets=[Name(id='x1', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Constant(value=1)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='y1', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Constant(value=2)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x2', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), Constant(value=1)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='y2', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), Constant(value=2)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='numberPairs', ctx=Store())], value=List(elts=[Tuple(elts=[Name(id='x1', ctx=Load()), Name(id='y1', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='x2', ctx=Load()), Name(id='y2', ctx=Load())], ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='draw', ctx=Load()), attr='lines', ctx=Load()), args=[Name(id='screen', ctx=Load()), Tuple(elts=[Constant(value=100), Constant(value=100), Constant(value=100)], ctx=Load()), Constant(value=False), Name(id='numberPairs', ctx=Load()), Constant(value=2)], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='typeOfGraph', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='graphType', ctx=Load()), attr='TREE', ctx=Load())]), body=[For(target=Name(id='edge', ctx=Store()), iter=Name(id='TREE_GRAPH', ctx=Load()), body=[Assign(targets=[Name(id='x1', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Constant(value=1)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='y1', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Constant(value=2)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x2', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), Constant(value=1)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='y2', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), Constant(value=2)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='numberPairs', ctx=Store())], value=List(elts=[Tuple(elts=[Name(id='x1', ctx=Load()), Name(id='y1', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='x2', ctx=Load()), Name(id='y2', ctx=Load())], ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='draw', ctx=Load()), attr='lines', ctx=Load()), args=[Name(id='screen', ctx=Load()), Tuple(elts=[Constant(value=100), Constant(value=100), Constant(value=100)], ctx=Load()), Constant(value=False), Name(id='numberPairs', ctx=Load()), Constant(value=2)], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='typeOfGraph', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='graphType', ctx=Load()), attr='LINE', ctx=Load())]), body=[For(target=Name(id='edge', ctx=Store()), iter=Name(id='LINE_GRAPH', ctx=Load()), body=[Assign(targets=[Name(id='x1', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Constant(value=1)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='y1', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Constant(value=2)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x2', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), Constant(value=1)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='y2', ctx=Store())], value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='edge', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), Constant(value=2)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='numberPairs', ctx=Store())], value=List(elts=[Tuple(elts=[Name(id='x1', ctx=Load()), Name(id='y1', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='x2', ctx=Load()), Name(id='y2', ctx=Load())], ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='draw', ctx=Load()), attr='lines', ctx=Load()), args=[Name(id='screen', ctx=Load()), Tuple(elts=[Constant(value=100), Constant(value=100), Constant(value=100)], ctx=Load()), Constant(value=False), Name(id='numberPairs', ctx=Load()), Constant(value=2)], keywords=[]))], orelse=[])], orelse=[])])])])])]), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Attribute(value=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Slice(), Constant(value=0)], ctx=Load()), ctx=Load()), attr='size', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='screen', ctx=Load()), attr='blit', ctx=Load()), args=[Name(id='computerImage', ctx=Load()), Tuple(elts=[BinOp(left=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Name(id='x', ctx=Load()), Constant(value=1)], ctx=Load()), ctx=Load()), op=Sub(), right=Constant(value=25)), BinOp(left=Subscript(value=Name(id='computerPositions', ctx=Load()), slice=Tuple(elts=[Name(id='x', ctx=Load()), Constant(value=2)], ctx=Load()), ctx=Load()), op=Sub(), right=Constant(value=25))], ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='stepsDone', ctx=Load())], keywords=[]), body=[For(target=Name(id='line', ctx=Store()), iter=Subscript(value=Name(id='linesToDraw', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='draw', ctx=Load()), attr='lines', ctx=Load()), args=[Name(id='screen', ctx=Load()), Tuple(elts=[Constant(value=255), Constant(value=0), Constant(value=0)], ctx=Load()), Constant(value=False), Tuple(elts=[Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()), Constant(value=4)], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='line', ctx=Store()), iter=Subscript(value=Name(id='linesToDraw', ctx=Load()), slice=Name(id='stepsDone', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='totalDistance', ctx=Store())], value=Call(func=Name(id='distanceBetweenTwoPoints', ctx=Load()), args=[Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x3', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=2), ctx=Load()), op=Div(), right=Name(id='totalDistance', ctx=Load())), op=Mult(), right=BinOp(left=Subscript(value=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()))))), Assign(targets=[Name(id='y3', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=2), ctx=Load()), op=Div(), right=Name(id='totalDistance', ctx=Load())), op=Mult(), right=BinOp(left=Subscript(value=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=1), ctx=Load()))))), Assign(targets=[Name(id='toDraw', ctx=Store())], value=List(elts=[Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), Tuple(elts=[Name(id='x3', ctx=Load()), Name(id='y3', ctx=Load())], ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='draw', ctx=Load()), attr='lines', ctx=Load()), args=[Name(id='screen', ctx=Load()), Tuple(elts=[Constant(value=255), Constant(value=0), Constant(value=0)], ctx=Load()), Constant(value=False), Name(id='toDraw', ctx=Load()), Constant(value=4)], keywords=[])), If(test=Compare(left=Call(func=Name(id='roundTuple', ctx=Load()), args=[Subscript(value=Name(id='toDraw', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='roundTuple', ctx=Load()), args=[Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='iterationDone', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='hasCompletedALine', ctx=Store())], value=Constant(value=True))], orelse=[AugAssign(target=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=2), ctx=Store()), op=Add(), value=BinOp(left=Name(id='totalDistance', ctx=Load()), op=Div(), right=Constant(value=200)))])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pygame', ctx=Load()), attr='display', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='iterationDone', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)]), body=[AugAssign(target=Name(id='stepsDone', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=Name(id='stepsDone', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='animationSteps', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='done', ctx=Store())], value=Constant(value=True))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='linesToDraw', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='nodeToLocations', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='dataToDisplay', ctx=Load()), attr='animationSteps', ctx=Load()), slice=Name(id='stepsDone', ctx=Load()), ctx=Load()), Name(id='computerPositions', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='clock', ctx=Load()), attr='tick', ctx=Load()), args=[Constant(value=60)], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='display', args=arguments(posonlyargs=[], args=[arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='computerLocations', ctx=Store())], value=Call(func=Attribute(value=Name(id='N', ctx=Load()), attr='array', ctx=Load()), args=[Call(func=Name(id='getComputerLocationsOnDisplay', ctx=Load()), args=[Attribute(value=Name(id='data', ctx=Load()), attr='typeOfGraph', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='startAnimation', ctx=Load()), args=[Name(id='computerLocations', ctx=Load()), Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])"