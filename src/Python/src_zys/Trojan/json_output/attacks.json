"Module(body=[ImportFrom(module='trojanzoo.datasets', names=[alias(name='Dataset')], level=0), ImportFrom(module='trojanzoo.configs', names=[alias(name='config')], level=0), ImportFrom(module='trojanzoo.utils.module', names=[alias(name='get_name'), alias(name='ModelProcess')], level=0), ImportFrom(module='trojanzoo.utils.output', names=[alias(name='ansi')], level=0), Import(names=[alias(name='torch')]), Import(names=[alias(name='os')]), ImportFrom(module='abc', names=[alias(name='ABC'), alias(name='abstractmethod')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='trojanzoo.configs', names=[alias(name='Config')], level=0), ImportFrom(module='trojanzoo.models', names=[alias(name='Model')], level=0), Import(names=[alias(name='argparse')]), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[Pass()], orelse=[]), ClassDef(name='Attack', bases=[Name(id='ABC', ctx=Load()), Name(id='ModelProcess', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\\n    | An abstract class representing an attack.\\n    | It inherits :class:`trojanzoo.utils.module.ModelProcess`.\\n\\n    Note:\\n        This is the implementation of attack.\\n        For users, please use :func:`create` instead, which is more user-friendly.\\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='attack')), FunctionDef(name='add_argument', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='group', annotation=Attribute(value=Name(id='argparse', ctx=Load()), attr='_ArgumentGroup', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add attack arguments to argument parser group.\\n        View source to see specific arguments.\\n\\n        Note:\\n            This is the implementation of adding arguments.\\n            The concrete attack class may override this method to add more arguments.\\n            For users, please use :func:`add_argument()` instead, which is more user-friendly.\\n        ')), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--attack')], keywords=[keyword(arg='dest', value=Constant(value='attack_name'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--output')], keywords=[keyword(arg='type', value=Name(id='int', ctx=Load())), keyword(arg='help', value=Constant(value='output level (default: 0)'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--attack_dir')], keywords=[keyword(arg='help', value=Constant(value='directory to contain attack results'))])), Return(value=Name(id='group', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='attack', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Main attack method (need overriding).')), Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='abstractmethod', ctx=Load())]), FunctionDef(name='generate_target', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_input', annotation=Attribute(value=Name(id='torch', ctx=Load()), attr='Tensor', ctx=Load())), arg(arg='idx', annotation=Name(id='int', ctx=Load())), arg(arg='same', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value='Generate target labels of a batched input based on\\n        the classification confidence ranking index.\\n\\n        Args:\\n            _input (torch.Tensor): The input tensor.\\n            idx (int): The classification confidence\\n                rank of target class.\\n                Defaults to ``1``.\\n            same (bool): Generate the same label\\n                for all samples using mod.\\n                Defaults to ``False``.\\n\\n        Returns:\\n            torch.Tensor:\\n                The generated target label with shape ``(N)``.\\n\\n        See Also:\\n            This method calls\\n            :meth:`trojanzoo.models.Model.generate_target()`.\\n\\n            The implementation is in\\n            :func:`trojanzoo.utils.model.generate_target()`.\\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='generate_target', ctx=Load()), args=[Name(id='_input', ctx=Load())], keywords=[keyword(arg='idx', value=Name(id='idx', ctx=Load())), keyword(arg='same', value=Name(id='same', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='add_argument', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentParser', ctx=Load())), arg(arg='attack_name', annotation=Name(id='str', ctx=Load())), arg(arg='attack', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Name(id='Attack', ctx=Load()))), arg(arg='class_dict', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='Attack', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Dict(keys=[], values=[])]), body=[Expr(value=Constant(value='\\n    | Add attack arguments to argument parser.\\n    | For specific arguments implementation, see :meth:`Attack.add_argument()`.\\n\\n    Args:\\n        parser (argparse.ArgumentParser): The parser to add arguments.\\n        attack_name (str): The attack name.\\n        attack (str | Attack): The attack instance or attack name\\n            (as the alias of `attack_name`).\\n        class_dict (dict[str, type[Attack]]):\\n            Map from attack name to attack class.\\n            Defaults to ``{}``.\\n\\n    Returns:\\n        argparse._ArgumentGroup: The argument group.\\n    ')), Assign(targets=[Name(id='attack_name', ctx=Store())], value=Call(func=Name(id='get_name', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='attack_name', ctx=Load())), keyword(arg='module', value=Name(id='attack', ctx=Load())), keyword(arg='arg_list', value=List(elts=[Constant(value='--attack')], ctx=Load()))])), Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument_group', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{yellow}attack{reset}'), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Name(id='ansi', ctx=Load()))])], keywords=[keyword(arg='description', value=Name(id='attack_name', ctx=Load()))])), Try(body=[Assign(targets=[Name(id='AttackType', ctx=Store())], value=Subscript(value=Name(id='class_dict', ctx=Load()), slice=Name(id='attack_name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[If(test=Compare(left=Name(id='attack_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Subscript(value=Name(id='ansi', ctx=Load()), slice=Constant(value='red'), ctx=Load()), conversion=-1), Constant(value='you need to first claim the attack name using \"--attack\".'), FormattedValue(value=Subscript(value=Name(id='ansi', ctx=Load()), slice=Constant(value='reset'), ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='attack_name', ctx=Load()), conversion=-1), Constant(value=' not in \\n'), FormattedValue(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='class_dict', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), conversion=-1)])], keywords=[])), Raise()])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Name(id='AttackType', ctx=Load()), attr='add_argument', ctx=Load()), args=[Name(id='group', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='create', args=arguments(posonlyargs=[], args=[arg(arg='attack_name', annotation=Name(id='str', ctx=Load())), arg(arg='attack', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Name(id='Attack', ctx=Load()))), arg(arg='dataset_name', annotation=Name(id='str', ctx=Load())), arg(arg='dataset', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Name(id='Dataset', ctx=Load()))), arg(arg='model_name', annotation=Name(id='str', ctx=Load())), arg(arg='model', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Name(id='Model', ctx=Load()))), arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='class_dict', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='Attack', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Name(id='config', ctx=Load()), Dict(keys=[], values=[])]), body=[Expr(value=Constant(value=\"\\n    | Create an attack instance.\\n    | For arguments not included in :attr:`kwargs`,\\n      use the default values in :attr:`config`.\\n    | The default value of :attr:`folder_path` is\\n      ``'{attack_dir}/{dataset.data_type}/{dataset.name}/{model.name}/{attack.name}'``.\\n    | For attack implementation, see :class:`Attack`.\\n\\n    Args:\\n        attack_name (str): The attack name.\\n        attack (str | Attack): The attack instance or attack name\\n            (as the alias of `attack_name`).\\n        dataset_name (str): The dataset name.\\n        dataset (str | Dataset):\\n            Dataset instance or dataset name\\n            (as the alias of `dataset_name`).\\n        model_name (str): The model name.\\n        model (str | Model): The model instance or model name\\n            (as the alias of `model_name`).\\n        config (Config): The default parameter config.\\n        class_dict (dict[str, type[Attack]]):\\n            Map from attack name to attack class.\\n            Defaults to ``{}``.\\n        **kwargs: The keyword arguments\\n            passed to attack init method.\\n\\n    Returns:\\n        Attack: The attack instance.\\n    \")), Assign(targets=[Name(id='dataset_name', ctx=Store())], value=Call(func=Name(id='get_name', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='dataset_name', ctx=Load())), keyword(arg='module', value=Name(id='dataset', ctx=Load())), keyword(arg='arg_list', value=List(elts=[Constant(value='-d'), Constant(value='--dataset')], ctx=Load()))])), Assign(targets=[Name(id='model_name', ctx=Store())], value=Call(func=Name(id='get_name', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='model_name', ctx=Load())), keyword(arg='module', value=Name(id='model', ctx=Load())), keyword(arg='arg_list', value=List(elts=[Constant(value='-m'), Constant(value='--model')], ctx=Load()))])), Assign(targets=[Name(id='attack_name', ctx=Store())], value=Call(func=Name(id='get_name', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='attack_name', ctx=Load())), keyword(arg='module', value=Name(id='attack', ctx=Load())), keyword(arg='arg_list', value=List(elts=[Constant(value='--attack')], ctx=Load()))])), If(test=Compare(left=Name(id='dataset_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='dataset_name', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='full_config', ctx=Load()), slice=Constant(value='dataset'), ctx=Load()), slice=Constant(value='default_dataset'), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='general_config', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get_config', ctx=Load()), args=[], keywords=[keyword(arg='dataset_name', value=Name(id='dataset_name', ctx=Load()))]), slice=Constant(value='attack'), ctx=Load())), Assign(targets=[Name(id='specific_config', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get_config', ctx=Load()), args=[], keywords=[keyword(arg='dataset_name', value=Name(id='dataset_name', ctx=Load()))]), slice=Name(id='attack_name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='general_config', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='specific_config', ctx=Load())], keywords=[]), attr='update', ctx=Load()), args=[Name(id='kwargs', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='AttackType', ctx=Store())], value=Subscript(value=Name(id='class_dict', ctx=Load()), slice=Name(id='attack_name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='attack_name', ctx=Load()), conversion=-1), Constant(value=' not in \\n'), FormattedValue(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='class_dict', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), conversion=-1)])], keywords=[])), Raise()])], orelse=[], finalbody=[]), If(test=Compare(left=Constant(value='folder_path'), ops=[NotIn()], comparators=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='folder_path', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='attack_dir'), ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='dataset', ctx=Load()), Name(id='Dataset', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='folder_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='folder_path', ctx=Load()), Attribute(value=Name(id='dataset', ctx=Load()), attr='data_type', ctx=Load()), Attribute(value=Name(id='dataset', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='folder_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='folder_path', ctx=Load()), Name(id='model_name', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='folder_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='folder_path', ctx=Load()), Attribute(value=Name(id='AttackType', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='folder_path'), ctx=Store())], value=Name(id='folder_path', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='AttackType', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='attack_name', ctx=Load())), keyword(arg='dataset', value=Name(id='dataset', ctx=Load())), keyword(arg='model', value=Name(id='model', ctx=Load())), keyword(value=Name(id='result', ctx=Load()))]))], decorator_list=[], returns=Name(id='Attack', ctx=Load()))], type_ignores=[])"