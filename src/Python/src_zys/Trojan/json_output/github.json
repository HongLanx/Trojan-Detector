"Module(body=[Import(names=[alias(name='git')]), Import(names=[alias(name='os')]), Import(names=[alias(name='shutil')]), ClassDef(name='Github', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='repo_url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='repo_url', ctx=Store())], value=Name(id='repo_url', ctx=Load()))], decorator_list=[]), FunctionDef(name='check_remote_repo', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Deze funcite zal de repo controleren of er een config file beschickbaar is zoja return yes ')), Try(body=[Assign(targets=[Name(id='local_directory', ctx=Store())], value=Constant(value='temp_directory')), Assign(targets=[Name(id='repo', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='git', ctx=Load()), attr='Repo', ctx=Load()), attr='clone_from', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='repo_url', ctx=Load()), Name(id='local_directory', ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='config_file_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='local_directory', ctx=Load()), Constant(value='config'), Constant(value='config.txt')], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='config_file_path', ctx=Load())], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='config_file_path', ctx=Load()), Constant(value='r')], keywords=[]), optional_vars=Name(id='file', ctx=Store()))], body=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='repo', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='local_directory', ctx=Load())], keywords=[])), If(test=Name(id='response', ctx=Load()), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='An error occurred: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[])), Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_config', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Nieuwe config halen van github en de oude verwijderen')), Try(body=[Assign(targets=[Name(id='local_directory', ctx=Store())], value=Constant(value='temp_directory')), Assign(targets=[Name(id='repo', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='git', ctx=Load()), attr='Repo', ctx=Load()), attr='clone_from', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='repo_url', ctx=Load()), Name(id='local_directory', ctx=Load())], keywords=[])), Assign(targets=[Name(id='config_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='local_directory', ctx=Load()), Constant(value='config')], keywords=[])), Assign(targets=[Name(id='current_config_dir', ctx=Store())], value=Constant(value='config')), Assign(targets=[Name(id='current_config_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='current_config_dir', ctx=Load()), Constant(value='config.txt')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='current_config_file', ctx=Load())], keywords=[])), Assign(targets=[Name(id='temp_config_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='config_dir', ctx=Load()), Constant(value='config.txt')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copy2', ctx=Load()), args=[Name(id='temp_config_file', ctx=Load()), Name(id='current_config_dir', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='local_directory', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Tuple(elts=[Attribute(value=Attribute(value=Name(id='git', ctx=Load()), attr='exc', ctx=Load()), attr='GitCommandError', ctx=Load()), Name(id='FileNotFoundError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='load_modules', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Modules inladen van github ')), Try(body=[Assign(targets=[Name(id='local_directory', ctx=Store())], value=Constant(value='temp_directory')), Assign(targets=[Name(id='repo', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='git', ctx=Load()), attr='Repo', ctx=Load()), attr='clone_from', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='repo_url', ctx=Load()), Name(id='local_directory', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='modules')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Constant(value='modules')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='logs_directory', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='local_directory', ctx=Load()), Constant(value='modules')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copytree', ctx=Load()), args=[Name(id='logs_directory', ctx=Load()), Constant(value='modules')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='local_directory', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Tuple(elts=[Attribute(value=Attribute(value=Name(id='git', ctx=Load()), attr='exc', ctx=Load()), attr='GitCommandError', ctx=Load()), Name(id='FileNotFoundError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='send_logs_to_github', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='id')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Deze functie zal de inhoud van de map logs kopieren naar temp_dir en vervolgens de log files gaan versturen naar github ')), Try(body=[Assign(targets=[Name(id='local_directory', ctx=Store())], value=Constant(value='temp_directory')), Assign(targets=[Name(id='repo', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='git', ctx=Load()), attr='Repo', ctx=Load()), attr='clone_from', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='repo_url', ctx=Load()), Name(id='local_directory', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logs_directory', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='local_directory', ctx=Load()), Constant(value='logs'), Name(id='id', ctx=Load())], keywords=[])), Assign(targets=[Name(id='temp_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='local_directory', ctx=Load()), Constant(value='logs'), Name(id='id', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='temp_dir', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='temp_dir', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copytree', ctx=Load()), args=[Constant(value='logs'), Name(id='logs_directory', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='repo', ctx=Load()), attr='git', ctx=Load()), attr='add', ctx=Load()), args=[], keywords=[keyword(arg='all', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='repo', ctx=Load()), attr='index', ctx=Load()), attr='commit', ctx=Load()), args=[Constant(value='Add new log entries')], keywords=[])), Assign(targets=[Name(id='origin', ctx=Store())], value=Call(func=Attribute(value=Name(id='repo', ctx=Load()), attr='remote', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='origin'))])), Expr(value=Call(func=Attribute(value=Name(id='origin', ctx=Load()), attr='push', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='repo', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='local_directory', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Tuple(elts=[Attribute(value=Attribute(value=Name(id='git', ctx=Load()), attr='exc', ctx=Load()), attr='GitCommandError', ctx=Load()), Name(id='FileNotFoundError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])"