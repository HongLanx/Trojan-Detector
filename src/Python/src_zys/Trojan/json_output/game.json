"Module(body=[Import(names=[alias(name='random')]), FunctionDef(name='welcome_message', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Welcome to \"Guess a Number!\"')], keywords=[]))], decorator_list=[]), FunctionDef(name='choose_difficulty', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='\\nChoose difficulty:')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='[0] Easy')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='[1] Medium')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='[2] Hard')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='[3] Legend')], keywords=[])), Try(body=[Assign(targets=[Name(id='choice', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='input', ctx=Load()), args=[Constant(value='Your choice: ')], keywords=[])], keywords=[])), Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='choice', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), Compare(left=Name(id='choice', ctx=Load()), ops=[LtE()], comparators=[Constant(value=3)])])), Return(value=Name(id='choice', ctx=Load()))], handlers=[ExceptHandler(body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Please choose typing 1, 2 or 3.')], keywords=[])), Return(value=Call(func=Name(id='choose_difficulty', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_max_tries', args=arguments(posonlyargs=[], args=[arg(arg='difficulty')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='max_tries', ctx=Store())], value=BinOp(left=Constant(value=50), op=Sub(), right=BinOp(left=Name(id='difficulty', ctx=Load()), op=Mult(), right=Constant(value=10)))), If(test=Compare(left=Name(id='difficulty', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='max_tries', ctx=Store())], value=Constant(value=1))], orelse=[]), Return(value=Name(id='max_tries', ctx=Load()))], decorator_list=[]), FunctionDef(name='game', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='welcome_message', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='max_tries', ctx=Store())], value=Call(func=Name(id='get_max_tries', ctx=Load()), args=[Call(func=Name(id='choose_difficulty', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='number', ctx=Store())], value=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='randint', ctx=Load()), args=[Constant(value=0), Constant(value=100)], keywords=[])), Assign(targets=[Name(id='tries', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='previous_numbers', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='done', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Enter a guess between 0 and 100')], keywords=[])), While(test=UnaryOp(op=Not(), operand=Name(id='done', ctx=Load())), body=[AugAssign(target=Name(id='tries', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=Name(id='tries', ctx=Load()), ops=[GtE()], comparators=[Name(id='max_tries', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='You lost!')], keywords=[])), Assign(targets=[Name(id='done', ctx=Store())], value=Constant(value=True)), Break()], orelse=[]), Assign(targets=[Name(id='guess', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='input', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='tries', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='max_tries', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='previous_numbers', ctx=Load()), conversion=-1), Constant(value=' > ')])], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='guess', ctx=Load()), ops=[Eq()], comparators=[Name(id='number', ctx=Load())]), body=[Assign(targets=[Name(id='done', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='You won!')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='previous_numbers', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='guess', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='guess', ctx=Load()), ops=[Gt()], comparators=[Name(id='number', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='hint: the actual number is smaller')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='hint: the actual number is larger')], keywords=[]))])])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='You got it after '), FormattedValue(value=Name(id='tries', ctx=Load()), conversion=-1), Constant(value=' tries!')])], keywords=[]))], decorator_list=[])], type_ignores=[])"