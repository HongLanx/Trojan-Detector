# Name: command-line-arguments.init
# Package: command-line-arguments
# Synthetic: package initializer
func init():
0:                                                                entry P:0 S:2
	t0 = *init$guard                                                   bool
	if t0 goto 2 else 1
1:                                                           init.start P:1 S:1
	*init$guard = true:bool
	t1 = embed.init()                                                    ()
	t2 = fmt.init()                                                      ()
	t3 = os.init()                                                       ()
	jump 2
2:                                                            init.done P:2 S:0
	return

# Name: command-line-arguments.WriteCaCertPem
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test\Client\lib\bundles\bundles.go:20:6
func WriteCaCertPem():
0:                                                                entry P:0 S:2
	t0 = os.Create("ca-cert.pem":string)                  (*os.File, error)
	t1 = extract t0 #0                                             *os.File
	t2 = extract t0 #1                                                error
	t3 = t2 != nil:error                                               bool
	if t3 goto 1 else 2
1:                                                              if.then P:1 S:0
	t4 = new [1]any (varargs)                                       *[1]any
	t5 = &t4[0:int]                                                    *any
	t6 = change interface any <- error (t2)                             any
	*t5 = t6
	t7 = slice t4[:]                                                  []any
	t8 = fmt.Println(t7...)                              (n int, err error)
	return
2:                                                              if.done P:1 S:2
	t9 = *ca_cert                                                    []byte
	t10 = (*os.File).Write(t1, t9)                       (n int, err error)
	t11 = extract t10 #0                                                int
	t12 = extract t10 #1                                              error
	t13 = t12 != nil:error                                             bool
	if t13 goto 3 else 4
3:                                                              if.then P:1 S:0
	t14 = new [1]any (varargs)                                      *[1]any
	t15 = &t14[0:int]                                                  *any
	t16 = change interface any <- error (t12)                           any
	*t15 = t16
	t17 = slice t14[:]                                                []any
	t18 = fmt.Println(t17...)                            (n int, err error)
	t19 = (*os.File).Close(t1)                                        error
	return
4:                                                              if.done P:1 S:2
	t20 = new [2]any (varargs)                                      *[2]any
	t21 = &t20[0:int]                                                  *any
	t22 = make any <- int (t11)                                         any
	*t21 = t22
	t23 = &t20[1:int]                                                  *any
	t24 = make any <- string ("bytes written suc...":string)            any
	*t23 = t24
	t25 = slice t20[:]                                                []any
	t26 = fmt.Println(t25...)                            (n int, err error)
	t27 = (*os.File).Close(t1)                                        error
	t28 = t27 != nil:error                                             bool
	if t28 goto 5 else 6
5:                                                              if.then P:1 S:0
	t29 = new [1]any (varargs)                                      *[1]any
	t30 = &t29[0:int]                                                  *any
	t31 = change interface any <- error (t27)                           any
	*t30 = t31
	t32 = slice t29[:]                                                []any
	t33 = fmt.Println(t32...)                            (n int, err error)
	return
6:                                                              if.done P:1 S:0
	return

# Name: command-line-arguments.WriteFiraCodeNerd
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test\Client\lib\bundles\bundles.go:42:6
func WriteFiraCodeNerd():
0:                                                                entry P:0 S:2
	t0 = os.Create("FiraCodeNerd.ttf":string)             (*os.File, error)
	t1 = extract t0 #0                                             *os.File
	t2 = extract t0 #1                                                error
	t3 = t2 != nil:error                                               bool
	if t3 goto 1 else 2
1:                                                              if.then P:1 S:0
	t4 = new [1]any (varargs)                                       *[1]any
	t5 = &t4[0:int]                                                    *any
	t6 = change interface any <- error (t2)                             any
	*t5 = t6
	t7 = slice t4[:]                                                  []any
	t8 = fmt.Println(t7...)                              (n int, err error)
	return
2:                                                              if.done P:1 S:2
	t9 = *FiraCodeNerd                                               []byte
	t10 = (*os.File).Write(t1, t9)                       (n int, err error)
	t11 = extract t10 #0                                                int
	t12 = extract t10 #1                                              error
	t13 = t12 != nil:error                                             bool
	if t13 goto 3 else 4
3:                                                              if.then P:1 S:0
	t14 = new [1]any (varargs)                                      *[1]any
	t15 = &t14[0:int]                                                  *any
	t16 = change interface any <- error (t12)                           any
	*t15 = t16
	t17 = slice t14[:]                                                []any
	t18 = fmt.Println(t17...)                            (n int, err error)
	t19 = (*os.File).Close(t1)                                        error
	return
4:                                                              if.done P:1 S:2
	t20 = new [2]any (varargs)                                      *[2]any
	t21 = &t20[0:int]                                                  *any
	t22 = make any <- int (t11)                                         any
	*t21 = t22
	t23 = &t20[1:int]                                                  *any
	t24 = make any <- string ("bytes written suc...":string)            any
	*t23 = t24
	t25 = slice t20[:]                                                []any
	t26 = fmt.Println(t25...)                            (n int, err error)
	t27 = (*os.File).Close(t1)                                        error
	t28 = t27 != nil:error                                             bool
	if t28 goto 5 else 6
5:                                                              if.then P:1 S:0
	t29 = new [1]any (varargs)                                      *[1]any
	t30 = &t29[0:int]                                                  *any
	t31 = change interface any <- error (t27)                           any
	*t30 = t31
	t32 = slice t29[:]                                                []any
	t33 = fmt.Println(t32...)                            (n int, err error)
	return
6:                                                              if.done P:1 S:0
	return

