# Name: command-line-arguments.init
# Package: command-line-arguments
# Synthetic: package initializer
func init():
0:                                                                entry P:0 S:2
	t0 = *init$guard                                                   bool
	if t0 goto 2 else 1
1:                                                           init.start P:1 S:1
	*init$guard = true:bool
	t1 = fmt.init()                                                      ()
	t2 = log.init()                                                      ()
	t3 = golang.org/x/sys/windows/registry.init()                        ()
	jump 2
2:                                                            init.done P:2 S:0
	return

# Name: command-line-arguments.GetUniqueSystemId
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test\Client\lib\reg\identifier.go:12:6
# Recover: 3
# Locals:
#   0:	t0 string
func GetUniqueSystemId() string:
0:                                                                entry P:0 S:2
	t0 = local string ()                                            *string
	t1 = golang.org/x/sys/windows/registry.OpenKey(2147483650:golang.org/x/sys/windows/registry.Key, "SOFTWARE\\Microsof...":string, 1:uint32) (golang.org/x/sys/windows/registry.Key, error)
	t2 = extract t1 #0                golang.org/x/sys/windows/registry.Key
	t3 = extract t1 #1                                                error
	t4 = t3 != nil:error                                               bool
	if t4 goto 1 else 2
1:                                                              if.then P:1 S:1
	t5 = new [1]any (varargs)                                       *[1]any
	t6 = &t5[0:int]                                                    *any
	t7 = change interface any <- error (t3)                             any
	*t6 = t7
	t8 = slice t5[:]                                                  []any
	t9 = log.Fatal(t8...)                                                ()
	jump 2
2:                                                              if.done P:2 S:2
	defer (golang.org/x/sys/windows/registry.Key).Close(t2)
	t10 = (golang.org/x/sys/windows/registry.Key).GetStringValue(t2, "MachineGuid":string) (val string, valtype uint32, err error)
	t11 = extract t10 #0                                             string
	t12 = extract t10 #1                                             uint32
	t13 = extract t10 #2                                              error
	t14 = t13 != nil:error                                             bool
	if t14 goto 4 else 5
3:                                                              recover P:0 S:0
	t15 = *t0                                                        string
	return t15
4:                                                              if.then P:1 S:1
	t16 = new [1]any (varargs)                                      *[1]any
	t17 = &t16[0:int]                                                  *any
	t18 = change interface any <- error (t13)                           any
	*t17 = t18
	t19 = slice t16[:]                                                []any
	t20 = log.Fatal(t19...)                                              ()
	jump 5
5:                                                              if.done P:2 S:0
	t21 = new [1]any (varargs)                                      *[1]any
	t22 = &t21[0:int]                                                  *any
	t23 = make any <- string (t11)                                      any
	*t22 = t23
	t24 = slice t21[:]                                                []any
	t25 = fmt.Printf("Windows MachineGu...":string, t24...) (n int, err error)
	*t0 = t11
	rundefers
	t26 = *t0                                                        string
	return t26

