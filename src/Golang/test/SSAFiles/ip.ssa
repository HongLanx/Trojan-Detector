# Name: command-line-arguments.init
# Package: command-line-arguments
# Synthetic: package initializer
func init():
0:                                                                entry P:0 S:2
	t0 = *init$guard                                                   bool
	if t0 goto 2 else 1
1:                                                           init.start P:1 S:1
	*init$guard = true:bool
	t1 = io.init()                                                       ()
	t2 = net/http.init()                                                 ()
	jump 2
2:                                                            init.done P:2 S:0
	return

# Name: command-line-arguments.GetPublicIP
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test\Client\lib\utils\ip.go:8:6
# Recover: 3
# Locals:
#   0:	t0 string
#   1:	t1 error
func GetPublicIP() (string, error):
0:                                                                entry P:0 S:2
	t0 = local string ()                                            *string
	t1 = local error ()                                              *error
	t2 = net/http.Get("https://api.ipify...":string) (resp *net/http.Response, err error)
	t3 = extract t2 #0                                   *net/http.Response
	t4 = extract t2 #1                                                error
	t5 = t4 != nil:error                                               bool
	if t5 goto 1 else 2
1:                                                              if.then P:1 S:0
	*t0 = "":string
	*t1 = t4
	rundefers
	t6 = *t0                                                         string
	t7 = *t1                                                          error
	return t6, t7
2:                                                              if.done P:1 S:2
	t8 = &t3.Body [#6]                                       *io.ReadCloser
	t9 = *t8                                                  io.ReadCloser
	defer invoke t9.Close()
	t10 = &t3.Body [#6]                                      *io.ReadCloser
	t11 = *t10                                                io.ReadCloser
	t12 = change interface io.Reader <- io.ReadCloser (t11)       io.Reader
	t13 = io.ReadAll(t12)                                   ([]byte, error)
	t14 = extract t13 #0                                             []byte
	t15 = extract t13 #1                                              error
	t16 = t15 != nil:error                                             bool
	if t16 goto 4 else 5
3:                                                              recover P:0 S:0
	t17 = *t0                                                        string
	t18 = *t1                                                         error
	return t17, t18
4:                                                              if.then P:1 S:0
	*t0 = "":string
	*t1 = t15
	rundefers
	t19 = *t0                                                        string
	t20 = *t1                                                         error
	return t19, t20
5:                                                              if.done P:1 S:0
	t21 = convert string <- []byte (t14)                             string
	*t0 = t21
	*t1 = nil:error
	rundefers
	t22 = *t0                                                        string
	t23 = *t1                                                         error
	return t22, t23

