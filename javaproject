https://github.com/HouariZegai/SpyGen   (键盘记录器/截屏/网络摄像头捕捉)
	
1. **键盘记录功能（Keylogger）**：
   - `Keylogger.java` 和 `NativeKeyboard.java` 这两个文件显然与键盘记录有关。键盘记录器是木马中常见的功能之一，用于捕获用户的键盘输入（如密码、信用卡信息等）。

2. **屏幕截图功能**：
   - 在 `screenshot` 文件夹中可能有代码用于捕获用户屏幕的内容，这也是木马程序常见的功能，用于窃取敏感信息。

3. **网络通信功能**：
   - 木马通常会通过网络将收集到的信息发送给攻击者。在 `mail` 文件夹中，可能有代码负责发送电子邮件或通过其他网络途径传输数据。

4. **摄像头监控功能**：
   - 在 `webcam` 文件夹中可能有代码用于访问和控制摄像头，捕捉用户的摄像头图像或视频。这也是一种侵犯隐私的木马功能。

1. 静态分析
静态分析是通过检查代码或可执行文件本身来检测木马程序，而不需要运行它们。可以从以下几个方面入手：
1.1 签名检测
•	代码签名：创建已知恶意代码片段（如键盘记录、截屏、网络通信等）的签名数据库。通过扫描代码文件，匹配这些签名来检测潜在的木马程序。
•	字符串检测：搜索可疑的字符串，如特定的域名、IP 地址、文件路径、邮箱地址等，这些字符串可能会在恶意代码中硬编码。
1.2 关键字分析
•	关键API调用：检测常用的系统API调用（如 Robot.createScreenCapture, GlobalScreen.registerNativeHook, javax.mail 等），这些调用通常用于截屏、键盘记录或网络通信。
•	敏感权限：扫描代码中对敏感权限的请求，如摄像头访问、文件读写、网络通信等。
1.3 代码结构分析
•	控制流图分析：构建代码的控制流图，分析代码的逻辑结构，识别可能的恶意行为模式。
•	依赖分析：检测程序所依赖的库和外部模块（如 org.jnativehook, org.apache.commons.mail 等），以识别可能与木马行为相关的组件。

https://github.com/Th30neAnd0nly/PI  (Instagram Hacking Tool)

`RequestNetworkController.java` 文件负责管理和执行网络请求，以下是对代码的简要分析：
-
### 潜在的木马行为：
- **绕过 SSL 验证**：
  - 代码中的 SSL 配置可以被滥用，忽略 SSL 证书验证可能允许恶意服务器窃听或篡改网络通信。如果应用程序利用这一配置将用户的敏感数据发送到不可信的服务器，可能存在木马行为。

- **隐蔽的数据传输**：
  - 通过 OkHttp 客户端发送网络请求，可以传输大量数据。若这些请求发送的数据是未经用户同意或敏感的，可能表明存在木马行为。

### 总结：
- `RequestNetworkController.java` 的 SSL 证书管理实现存在潜在的安全风险，结合前述的网络请求功能，该类可能被用作绕过安全检查，隐蔽地发送或接收数据。


### 1.2 AST（抽象语法树）分析
AST 分析：使用 AST 分析工具遍历代码树，识别 TrustManager 的实现类，检查 checkClientTrusted 和 checkServerTrusted 方法的实现，判断是否存在空方法体或返回所有证书的情况。
### 1.3 SSL 配置检测
SSLContext 配置：扫描代码中是否存在 SSLContext 配置，尤其是 sslContext.init(null, trustAllCerts, new java.security.SecureRandom()); 这样的代码，它通常意味着信任所有 SSL 证书。


https://github.com/sibivarman/trojan_virus

`file_deleter.java` 文件定义了一个名为 `FileDeleter` 的类，其主要功能是删除文件。以下是对代码的简要分析：

### 功能描述：
- **文件删除**：
  - 该类包含一个方法 `exeFileTerminator(File Obj)`，用于删除指定的文件。如果文件路径中包含 `.exe`，则调用 `DeleteFile()` 方法删除该文件。
  - `DeleteFile(String exePath)` 方法接收一个文件路径，并尝试删除该文件。删除操作成功与否通过布尔值 `delResult` 返回。

- **字符串操作**：
  - 代码中通过 `revPath` 变量逆序读取文件路径，并检查其中是否包含 `.exe` 扩展名。如果包含，则删除该文件。

### 潜在的木马行为：
- **有针对性的文件删除**：
  - 该类专门用于删除 `.exe` 文件。如果被恶意使用，可以用来删除系统中的可执行文件，导致应用程序无法运行或系统崩溃。
  - 结合之前的 `FileList` 类，这个类的功能可能会被用来批量删除指定目录下的所有 `.exe` 文件。

### 总结：
`FileDeleter.java` 文件具备木马程序的典型行为，特别是针对特定文件类型（如 `.exe` 文件）的删除操作。该类可能会对系统的关键文件造成严重破坏。

接下来可以分析 `calculator.java` 文件，查看是否存在其他恶意功能。是否继续？

1.2 目标文件检测
文件类型检查：分析代码中是否有针对特定文件类型（如 .exe、.dll 等）的删除操作。可以通过字符串匹配或正则表达式来查找类似 ".exe" 的字符串。

1.3 控制流与数据流分析
递归与循环检测：分析代码的控制流，识别递归调用或循环结构，检查是否与批量文件操作相关联。
变量追踪：追踪与文件操作相关的变量，检查这些变量是否被用于多次删除操作。
