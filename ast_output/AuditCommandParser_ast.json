{
    "node_type": "CompilationUnit",
    "package": {
        "node_type": "PackageDeclaration",
        "modifiers": null,
        "annotations": null,
        "documentation": "/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */",
        "name": "org.apache.hadoop.tools.dynamometer.workloadgenerator.audit"
    },
    "imports": [
        {
            "node_type": "Import",
            "path": "java.io.IOException",
            "static": false,
            "wildcard": false
        },
        {
            "node_type": "Import",
            "path": "java.util.function.Function",
            "static": false,
            "wildcard": false
        },
        {
            "node_type": "Import",
            "path": "org.apache.hadoop.conf.Configuration",
            "static": false,
            "wildcard": false
        },
        {
            "node_type": "Import",
            "path": "org.apache.hadoop.io.Text",
            "static": false,
            "wildcard": false
        }
    ],
    "types": [
        {
            "node_type": "InterfaceDeclaration",
            "modifiers": [
                "public"
            ],
            "annotations": [],
            "documentation": "/**\n * This interface represents a pluggable command parser. It will accept in one\n * line of {@link Text} input at a time and return an {@link AuditReplayCommand}\n * which represents the input text. Each input line should produce exactly one\n * command.\n */",
            "name": "AuditCommandParser",
            "body": [
                {
                    "node_type": "MethodDeclaration",
                    "documentation": "/**\n   * Initialize this parser with the given configuration. Guaranteed to be\n   * called prior to any calls to {@link #parse(Text, Function)}.\n   *\n   * @param conf The Configuration to be used to set up this parser.\n   * @throws IOException if error on initializing a parser.\n   */",
                    "modifiers": [],
                    "annotations": [],
                    "type_parameters": null,
                    "return_type": null,
                    "name": "initialize",
                    "parameters": [
                        {
                            "node_type": "FormalParameter",
                            "modifiers": [],
                            "annotations": [],
                            "type": {
                                "node_type": "ReferenceType",
                                "name": "Configuration",
                                "dimensions": [],
                                "arguments": null,
                                "sub_type": null
                            },
                            "name": "conf",
                            "varargs": false
                        }
                    ],
                    "throws": [
                        "IOException"
                    ],
                    "body": null
                },
                {
                    "node_type": "MethodDeclaration",
                    "documentation": "/**\n   * Convert a line of input into an {@link AuditReplayCommand}. Since\n   * {@link AuditReplayCommand}s store absolute timestamps, relativeToAbsolute\n   * can be used to convert relative timestamps (i.e., milliseconds elapsed\n   * between the start of the audit log and this command) into absolute\n   * timestamps.\n   *\n   * @param inputLine Single input line to convert.\n   * @param relativeToAbsolute Function converting relative timestamps\n   *                           (in milliseconds) to absolute timestamps\n   *                           (in milliseconds).\n   * @return A command representing the input line.\n   * @throws IOException if error on parsing.\n   */",
                    "modifiers": [],
                    "annotations": [],
                    "type_parameters": null,
                    "return_type": {
                        "node_type": "ReferenceType",
                        "name": "AuditReplayCommand",
                        "dimensions": [],
                        "arguments": null,
                        "sub_type": null
                    },
                    "name": "parse",
                    "parameters": [
                        {
                            "node_type": "FormalParameter",
                            "modifiers": [],
                            "annotations": [],
                            "type": {
                                "node_type": "ReferenceType",
                                "name": "Text",
                                "dimensions": [],
                                "arguments": null,
                                "sub_type": null
                            },
                            "name": "inputLine",
                            "varargs": false
                        },
                        {
                            "node_type": "FormalParameter",
                            "modifiers": [],
                            "annotations": [],
                            "type": {
                                "node_type": "ReferenceType",
                                "name": "Function",
                                "dimensions": [],
                                "arguments": [
                                    {
                                        "node_type": "TypeArgument",
                                        "type": {
                                            "node_type": "ReferenceType",
                                            "name": "Long",
                                            "dimensions": [],
                                            "arguments": null,
                                            "sub_type": null
                                        },
                                        "pattern_type": null
                                    },
                                    {
                                        "node_type": "TypeArgument",
                                        "type": {
                                            "node_type": "ReferenceType",
                                            "name": "Long",
                                            "dimensions": [],
                                            "arguments": null,
                                            "sub_type": null
                                        },
                                        "pattern_type": null
                                    }
                                ],
                                "sub_type": null
                            },
                            "name": "relativeToAbsolute",
                            "varargs": false
                        }
                    ],
                    "throws": [
                        "IOException"
                    ],
                    "body": null
                }
            ],
            "type_parameters": null,
            "extends": null
        }
    ]
}